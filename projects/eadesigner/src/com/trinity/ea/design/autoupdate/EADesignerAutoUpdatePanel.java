/*
 * EADesignerAutoUpdatePanel.java
 *
 * Created on December 13, 2003, 1:17 AM
 */

package com.trinity.ea.design.autoupdate;
import com.trinity.ea.design.common.panel.EAPanel;
import com.trinity.ea.design.common.panel.EAMasterControlPanel;
import com.trinity.ea.design.common.panel.EAPropertiesPanel;
import com.trinity.ea.design.common.panel.EAListItem;
import com.trinity.ea.design.common.panel.EAListItemContent;
import com.trinity.ea.design.common.panel.DataContentPanel;
import com.trinity.ea.design.common.panel.MarginContentPanel;
import com.trinity.ea.design.common.panel.TextFieldPanel;
import com.trinity.ea.design.autoupdate.config.AutoUpdateConfigPanel;
import com.trinity.ea.design.autoupdate.folders.AutoUpdatePlatformsPanel;
import com.trinity.ea.design.autoupdate.actions.AutoUpdateActionsPanel;
import com.trinity.ea.design.autoupdate.encrypt.AutoUpdateEncryptionPanel;
import com.trinity.ea.design.common.sidebar.SBTab;
import com.trinity.ea.design.common.sidebar.SBSpacer;
import com.trinity.ea.design.rules.builder.DesignerRuleBuilder;
import com.trinity.ea.design.common.borderline.ContentAreaHeaderPanel;
import com.trinity.ea.design.common.file.ProjectManager;
//import com.trinity.ea.design.common.status.ProgressWindow;
import java.awt.Font;
import java.util.HashMap;
import java.util.Collections;
import java.util.Map;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class EADesignerAutoUpdatePanel extends EAMasterControlPanel {
Map sbMap = Collections.synchronizedMap(new HashMap());    
    private Color backgroundColor = new java.awt.Color(100, 120, 170);
    private Color borderColor1 = new java.awt.Color(198, 226, 253);
    private Color borderColor2 = new java.awt.Color(96, 110, 145);
    private Color rowColor = new java.awt.Color(220, 225, 240);
    private Color rowBorderColor = new java.awt.Color(255, 255, 255);
    private Icon theActionRowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/lgpl/action.png"));
    private int rowHeight = 25;

    /** Creates new form EADesignerProjectPanel */
    public EADesignerAutoUpdatePanel() {
    
//	ProgressWindow progWindow = new ProgressWindow();
//	try
////	{
//	  progWindow.showStatus("Launching AutoUpdate Designer", 1);
        initComponents();
	  initSidebar();
        setSelectedMenuItem(AutoUpdateMenuLabelConfigButton);   
  	  setPropertiesPanel();
//	  progWindow.close();
//	}
//	catch(Exception e)
//	{
//		e.printStackTrace();
//		progWindow.close();
//	}
    }
    
    private EAPanel TheContentPanelReference = new EAPanel();
    private void setContentPanel(EAPanel theContentPanel)
    {
        try
        {
	     getDataUpdate();
           TheContentPanelReference.setVisible(false);
           ProjectSelectionContentPanel.remove(TheContentPanelReference);        
           TheContentPanelReference = theContentPanel;
           ProjectSelectionContentPanel.add(TheContentPanelReference);     
           TheContentPanelReference.setVisible(true);

        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }     

    public synchronized void getDataUpdate()
    {
	try
	{
		autoUpdateConfigPanel.getDataUpdate();
		// Auto Update Support Functionality Checkbox Enabled/Disabled
            if(cbAutoUpdateEnabled.isSelected()==true)
            {
		    ProjectManager.putTempNoFileWrite("autoUpdateEnabled", "true");
 		    ProjectManager.putTempNoFileWrite("project_auto_update_support_is_enabled", "true");                            
            }
            else
            {
		    ProjectManager.putTempNoFileWrite("autoUpdateEnabled", "false");
		    ProjectManager.putTempNoFileWrite("project_auto_update_support_is_enabled", "false");               
            }
            ProjectManager.saveTempNow();
		TheContentPanelReference.getDataUpdate();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public synchronized void setProjectData()
    {
        try
        {
		// Auto Update Support Functionality Checkbox Enabled/Disabled   
            if(ProjectManager.get("project_auto_update_support_is_enabled").equalsIgnoreCase("true")==true)
            {
                cbAutoUpdateEnabled.setSelected(true);              
            }
            else
            {
                cbAutoUpdateEnabled.setSelected(false);               
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
	  autoUpdatePlatformsPanel = new AutoUpdatePlatformsPanel();
        AutoUpdateContentTopPanel = new javax.swing.JPanel();
        AutoUpdateCentralContentPanel = new javax.swing.JPanel();
        AutoUpdateContentPanel = new EAPanel();
        AutoUpdateContentPanelItem1 = new EAPanel();
        AutoUpdateSettingsPanelItem1 = new javax.swing.JPanel();
        AutoUpdateEnabledPanel = new EAPanel();
        cbAutoUpdateEnabled = new javax.swing.JCheckBox();
        AutoUpdatePanelMainContainer = new javax.swing.JPanel();
        AutoUpdateSettingsPanelItem7 = new javax.swing.JPanel();
        AutoUpdateCentralContentLeftMarginPanel = new javax.swing.JPanel();
        AutoUpdateCentralContentRightMarginPanel = new javax.swing.JPanel();
        AutoUpdateContentBottomPanel = new javax.swing.JPanel();
        ProjectMenuPanel = new javax.swing.JPanel();
        LeftMenuPanelBottomPanel = new javax.swing.JPanel();
        ProjectMenuButtonPanel = new javax.swing.JPanel();
        AutoUpdateMenuLabelConfigButton = new SBTab("Properties",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
	  AutoUpdateMenuLabelPlatformsButton = new SBTab("Platforms",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        AutoUpdateMenuLabelActionsButton = new SBTab("Actions",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        AutoUpdateMenuLabelHTMLFormInputsButton = new SBTab("Security",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        ProjectMenuButtonPanelTop = new SBTab(null,sbTabWidth, sbTabMenuTopSpaceFiller, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, null, iconTextGap, theCurrentMenuColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        ProjectMenuButtonPanelBottom = new SBSpacer(theCurrentMenuColor,sbTabTopBorderColor,theCurrentMenuColor,sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,sbTabIsOpaque);
        PaymentsMenuLeftSpaceFiller = new javax.swing.JPanel();
        ProjectSelectionContentPanel = new javax.swing.JPanel();
	  marginContentPanel = new MarginContentPanel();
	  autoUpdateConfigPanel = new AutoUpdateConfigPanel();
	  autoUpdateEncryptionPanel = new AutoUpdateEncryptionPanel();
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateContentTopPanel.setLayout(new java.awt.BorderLayout());

        AutoUpdateContentTopPanel.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateContentTopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        AutoUpdateContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 60));
        AutoUpdateCentralContentPanel.setLayout(new java.awt.BorderLayout());

        AutoUpdateCentralContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateCentralContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        AutoUpdateContentPanel.setLayout(new javax.swing.BoxLayout(AutoUpdateContentPanel, javax.swing.BoxLayout.Y_AXIS));

        AutoUpdateContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        AutoUpdateContentPanel.setMinimumSize(new java.awt.Dimension(448, 0));
        AutoUpdateContentPanel.setPreferredSize(new java.awt.Dimension(600, 60));
        AutoUpdateContentPanelItem1.setLayout(new javax.swing.BoxLayout(AutoUpdateContentPanelItem1, javax.swing.BoxLayout.Y_AXIS));

        AutoUpdateContentPanelItem1.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateContentPanelItem1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(new java.awt.Color(140, 171, 240), new java.awt.Color(27, 44, 76)), "Automatic Software Updates", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12)));
        AutoUpdateContentPanelItem1.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        AutoUpdateSettingsPanelItem1.setLayout(new java.awt.BorderLayout());

        AutoUpdateSettingsPanelItem1.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateEnabledPanel.setLayout(new java.awt.BorderLayout(15, 5));

        AutoUpdateEnabledPanel.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateEnabledPanel.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        cbAutoUpdateEnabled.setBackground(new java.awt.Color(100, 120, 170));
        cbAutoUpdateEnabled.setFont(new java.awt.Font("Arial", 0, 12));
        try
        {
		// Auto Update Support Functionality Checkbox Enabled/Disabled   
            if(ProjectManager.get("project_auto_update_support_is_enabled").equalsIgnoreCase("true")==true)
            {
                cbAutoUpdateEnabled.setSelected(true);              
            }
            else
            {
                cbAutoUpdateEnabled.setSelected(false);               
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        cbAutoUpdateEnabled.setText("Enable Automatic Software Update Support");
        AutoUpdateEnabledPanel.add(cbAutoUpdateEnabled, java.awt.BorderLayout.CENTER);

        AutoUpdateSettingsPanelItem1.add(AutoUpdateEnabledPanel, java.awt.BorderLayout.WEST);

        AutoUpdatePanelMainContainer.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        AutoUpdatePanelMainContainer.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateSettingsPanelItem1.add(AutoUpdatePanelMainContainer, java.awt.BorderLayout.CENTER);

        AutoUpdateContentPanelItem1.add(AutoUpdateSettingsPanelItem1);

        AutoUpdateSettingsPanelItem7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        AutoUpdateSettingsPanelItem7.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateContentPanelItem1.add(AutoUpdateSettingsPanelItem7);

        AutoUpdateContentPanel.add(AutoUpdateContentPanelItem1);

        AutoUpdateCentralContentPanel.add(AutoUpdateContentPanel, java.awt.BorderLayout.CENTER);

        AutoUpdateCentralContentLeftMarginPanel.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateCentralContentLeftMarginPanel.setMaximumSize(new java.awt.Dimension(1, 200));
        AutoUpdateCentralContentPanel.add(AutoUpdateCentralContentLeftMarginPanel, java.awt.BorderLayout.WEST);

        AutoUpdateCentralContentRightMarginPanel.setBackground(new java.awt.Color(100, 120, 170));
        AutoUpdateCentralContentRightMarginPanel.setMaximumSize(new java.awt.Dimension(32767, 200));
        AutoUpdateCentralContentPanel.add(AutoUpdateCentralContentRightMarginPanel, java.awt.BorderLayout.EAST);

        AutoUpdateContentTopPanel.add(AutoUpdateCentralContentPanel, java.awt.BorderLayout.CENTER);

        add(AutoUpdateContentTopPanel);

        AutoUpdateContentBottomPanel.setLayout(new java.awt.BorderLayout());

        AutoUpdateContentBottomPanel.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuPanel.setLayout(new java.awt.BorderLayout());

        ProjectMenuPanel.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuPanel.setForeground(new java.awt.Color(255, 255, 255));
        ProjectMenuPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 32767));
        ProjectMenuPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 10));
        ProjectMenuPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 10));
        ProjectMenuButtonPanel.setLayout(new javax.swing.BoxLayout(ProjectMenuButtonPanel, javax.swing.BoxLayout.Y_AXIS));

        ProjectMenuButtonPanel.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuButtonPanel.setForeground(new java.awt.Color(255, 255, 255));
        ProjectMenuButtonPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        ProjectMenuButtonPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        ProjectMenuButtonPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        LeftMenuPanelBottomPanel.setLayout(new java.awt.BorderLayout());

        LeftMenuPanelBottomPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuPanelBottomPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuPanelBottomPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        LeftMenuPanelBottomPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        LeftMenuPanelBottomPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
 
        AutoUpdateMenuLabelConfigButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelConfigButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelConfigButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelConfigButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelConfigButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelConfigButtonMouseReleased(evt);
            }
        });

        ProjectMenuButtonPanel.add(AutoUpdateMenuLabelConfigButton);

        AutoUpdateMenuLabelPlatformsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelPlatformsButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelPlatformsButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelPlatformsButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelPlatformsButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelPlatformsButtonMouseReleased(evt);
            }
        });

        ProjectMenuButtonPanel.add(AutoUpdateMenuLabelPlatformsButton);

        AutoUpdateMenuLabelActionsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelActionsButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelActionsButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelActionsButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelActionsButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelActionsButtonMouseReleased(evt);
            }
        });

        ProjectMenuButtonPanel.add(AutoUpdateMenuLabelActionsButton);

         AutoUpdateMenuLabelHTMLFormInputsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelHTMLFormInputsButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelHTMLFormInputsButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelHTMLFormInputsButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelHTMLFormInputsButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AutoUpdateMenuLabelHTMLFormInputsButtonMouseReleased(evt);
            }
        });

        ProjectMenuButtonPanel.add(AutoUpdateMenuLabelHTMLFormInputsButton);
/**********************/
        LeftMenuPanelBottomPanel.add(ProjectMenuButtonPanel, java.awt.BorderLayout.NORTH);
        LeftMenuPanelBottomPanel.add(ProjectMenuButtonPanelBottom, java.awt.BorderLayout.CENTER);
        ProjectMenuPanel.add(LeftMenuPanelBottomPanel, java.awt.BorderLayout.CENTER);
        ProjectMenuPanel.add(ProjectMenuButtonPanelTop, java.awt.BorderLayout.NORTH);
        ProjectMenuButtonPanelBottom.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuButtonPanelBottom.setForeground(new java.awt.Color(255, 255, 255));
        PaymentsMenuLeftSpaceFiller.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsMenuLeftSpaceFiller.setMinimumSize(new java.awt.Dimension(1, 10));
        PaymentsMenuLeftSpaceFiller.setPreferredSize(new java.awt.Dimension(1, 10));
        ProjectMenuPanel.add(PaymentsMenuLeftSpaceFiller, java.awt.BorderLayout.WEST);
        AutoUpdateContentBottomPanel.add(ProjectMenuPanel, java.awt.BorderLayout.WEST);
/**********************/
        ProjectSelectionContentPanel.setLayout(new java.awt.BorderLayout());

        ProjectSelectionContentPanel.setBackground(new java.awt.Color(140, 160, 210));
        ProjectSelectionContentPanel.setForeground(new java.awt.Color(255, 255, 255));
        AutoUpdateContentBottomPanel.add(ProjectSelectionContentPanel, java.awt.BorderLayout.CENTER);

        //add(AutoUpdateContentBottomPanel);
// add header here
	  contentPanel = new JPanel();
        contentPanel.setLayout(new java.awt.BorderLayout());
        contentPanel.add(ProjectMenuPanel, java.awt.BorderLayout.WEST);
        contentPanel.add(AutoUpdateContentBottomPanel, java.awt.BorderLayout.CENTER);
	  contentProjectPanel = new ContentAreaHeaderPanel(contentPanel, sbTabWidth, theCurrentMenuColor, sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,theSelectedMenuColor);
	  add(contentProjectPanel, java.awt.BorderLayout.CENTER);
	  autoUpdateEnabledPanel = new AutoUpdateEnabledControl();
//
theEAProperties = new EAPropertiesPanel(getActionsEAListItems(),rowColor, rowBorderColor, backgroundColor, rowHeight);
//
theEAProperties.setMasterControlPanel(this);
//	  
	try
	{
	  theEAProperties.setDescriptorPanelWidth(281);
	  autoUpdateEnabledPanel.setBackgroundColor(backgroundColor);
	  autoUpdateEnabledPanel.setText("Enable Automatic Software Update Support");
	  theEAProperties.setHeaderText("Action Mappings");
	  theEAProperties.setDescriptorText("");
	  theEAProperties.setHeaderTextAndWidth("Action Mappings", 225, "Class Name", 120, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  theEAProperties.setPreviewButtonVisible(false);
	  theEAProperties.setConfigurationWizardButtonVisible(false);
	  theEAProperties.setSelectedIndex(0);
	  theEAProperties.setDescriptorPanel(autoUpdateEnabledPanel);

	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}

    }//GEN-END:initComponents

    private void AutoUpdateMenuLabelHTMLFormInputsButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseReleased
	 setMouseReleasedMenuLabel(AutoUpdateMenuLabelHTMLFormInputsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseReleased

    private void AutoUpdateMenuLabelActionsButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelActionsButtonMouseReleased
	 setMouseReleasedMenuLabel(AutoUpdateMenuLabelActionsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelActionsButtonMouseReleased

    private void AutoUpdateMenuLabelConfigButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelConfigButtonMouseReleased
	 setMouseReleasedMenuLabel(AutoUpdateMenuLabelConfigButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelConfigButtonMouseReleased

    private void AutoUpdateMenuLabelPlatformsButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelPlatformsButtonMouseReleased
	 setMouseReleasedMenuLabel(AutoUpdateMenuLabelPlatformsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelPlatformsButtonMouseReleased

    private void AutoUpdateMenuLabelHTMLFormInputsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMousePressed
        setMousePressedMenuLabel(AutoUpdateMenuLabelHTMLFormInputsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMousePressed

    private void AutoUpdateMenuLabelActionsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelActionsButtonMousePressed
        setMousePressedMenuLabel(AutoUpdateMenuLabelActionsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelActionsButtonMousePressed

    private void AutoUpdateMenuLabelConfigButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelConfigButtonMousePressed
        setMousePressedMenuLabel(AutoUpdateMenuLabelConfigButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelConfigButtonMousePressed

    private void AutoUpdateMenuLabelPlatformsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelPlatformsButtonMousePressed
        setMousePressedMenuLabel(AutoUpdateMenuLabelPlatformsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelPlatformsButtonMousePressed

    private void AutoUpdateMenuLabelHTMLFormInputsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseExited
        setMouseExitedMenuLabel(AutoUpdateMenuLabelHTMLFormInputsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseExited

    private void AutoUpdateMenuLabelActionsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelActionsButtonMouseExited
        setMouseExitedMenuLabel(AutoUpdateMenuLabelActionsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelActionsButtonMouseExited

    private void AutoUpdateMenuLabelConfigButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelConfigButtonMouseExited
        setMouseExitedMenuLabel(AutoUpdateMenuLabelConfigButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelConfigButtonMouseExited

    private void AutoUpdateMenuLabelPlatformsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelPlatformsButtonMouseExited
        setMouseExitedMenuLabel(AutoUpdateMenuLabelPlatformsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelPlatformsButtonMouseExited

    private void AutoUpdateMenuLabelHTMLFormInputsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseEntered
        setMouseEnteredMenuLabel(AutoUpdateMenuLabelHTMLFormInputsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseEntered

    private void AutoUpdateMenuLabelActionsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelActionsButtonMouseEntered
        setMouseEnteredMenuLabel(AutoUpdateMenuLabelActionsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelActionsButtonMouseEntered

    private void AutoUpdateMenuLabelConfigButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelConfigButtonMouseEntered
        setMouseEnteredMenuLabel(AutoUpdateMenuLabelConfigButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelConfigButtonMouseEntered

    private void AutoUpdateMenuLabelPlatformsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelPlatformsButtonMouseEntered
        setMouseEnteredMenuLabel(AutoUpdateMenuLabelPlatformsButton);
    }//GEN-LAST:event_AutoUpdateMenuLabelPlatformsButtonMouseEntered

    private void AutoUpdateMenuLabelHTMLFormInputsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseClicked
 	setSelectedMenuItem(AutoUpdateMenuLabelHTMLFormInputsButton);
	setEncryptionPanel();
    }//GEN-LAST:event_AutoUpdateMenuLabelHTMLFormInputsButtonMouseClicked

    private void AutoUpdateMenuLabelActionsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelActionsButtonMouseClicked
	setSelectedMenuItem(AutoUpdateMenuLabelActionsButton);
	setActionsPanel();
    }//GEN-LAST:event_AutoUpdateMenuLabelActionsButtonMouseClicked

    private void AutoUpdateMenuLabelConfigButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelConfigButtonMouseClicked
	setSelectedMenuItem(AutoUpdateMenuLabelConfigButton); 
	setPropertiesPanel();
    }//GEN-LAST:event_AutoUpdateMenuLabelConfigButtonMouseClicked

    private void AutoUpdateMenuLabelPlatformsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoUpdateMenuLabelPlatformsButtonMouseClicked
	setSelectedMenuItem(AutoUpdateMenuLabelPlatformsButton); 
	setPlatformsPanel();
    }//GEN-LAST:event_AutoUpdateMenuLabelPlatformsButtonMouseClicked

 private Color theCurrentMenuColor = new Color(100, 120, 170);
 private Color theSelectedMenuColor = new Color(140,160,210);
 private Color theTextMenuColor = new Color(255, 255, 255);
 private boolean pressedSelected = false;
 private Icon arrowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow.gif"));
 private Icon arrowSelectedIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_selected.gif"));
 private Icon arrowMouseOverIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_mouseover.gif"));  
 private int iconTextGap = 5;
 private int sbTabMenuTopSpaceFiller = 15;
 private int sbTabLeftMargin = 5;
 private int sbTabWidth = 100;
 private int sbTabHeight = 25;
 private int sbTabGroupHeight = 100;
 private boolean sbTabIsOpaque=true;
 private Color sbTabTopBorderColor = new Color(140, 171, 240);
 private Color sbTabBottomBorderColor = new Color(70, 82, 116);
 private Color sbTabTopSelectedBorderColor = new Color(96, 110, 145);
 private Color sbTabBottomSelectedBorderColor = new Color(198, 226, 253);
 private Color sbTabRightInnerBorderColor = new java.awt.Color(68, 76, 100);
 private Color sbTabRightOuterBorderColor = new java.awt.Color(100, 114, 149);
 private Font sbTabFont = new java.awt.Font("Arial", 1, 12);
 private SBTab TheMenuLabelReference = new SBTab(null,sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
 private SBTab thePressedLabelReference = null;
 private SBTab theEnteredLabelReference = null;

 private void setSelectedMenuItem(SBTab theMenuLabel)
  {
    try
    {
        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
	  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
        TheMenuLabelReference.setTheIcon(arrowIcon);
        theMenuLabel.setBackgroundColor(theSelectedMenuColor);
        theMenuLabel.setTheIcon(arrowSelectedIcon);
	  theMenuLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        TheMenuLabelReference = theMenuLabel;

                       /* try
                        {
                            setContentPanel((EAPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance());
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }   */
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
    }
    catch(Exception e)
    {
	e.printStackTrace();
    }
  }    
 boolean isEntered = false;
 private void setMouseEnteredMenuLabel(SBTab theEnteredLabel)
 {
    isEntered = true;
    try
    {
        theEnteredLabelReference = theEnteredLabel;
        if(theEnteredLabel.equals(TheMenuLabelReference)==false)
        {
            theEnteredLabel.setTheIcon(arrowMouseOverIcon);
            if(pressedSelected==true)
            {
                
                TheMenuLabelReference.setForegroundColor(theTextMenuColor);
            }
        }
        else
        {
            if(pressedSelected==true)
            {
                TheMenuLabelReference.setForegroundColor(theSelectedMenuColor);    
            }
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }     
 }
 private void setMouseExitedMenuLabel(SBTab theExitedLabel)
 {
    isEntered = false;
    try
    {
        if(theExitedLabel.equals(TheMenuLabelReference)==false)
        {
            theExitedLabel.setTheIcon(arrowIcon);   
        }
        else
        {
            theEnteredLabelReference.setForegroundColor(theTextMenuColor);           
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }

  private void setMousePressedMenuLabel(SBTab thePressedLabel)
 {
    try
    {
        thePressedLabelReference = thePressedLabel;
        if(thePressedLabel.equals(TheMenuLabelReference)==false)
        {
            thePressedLabel.setBackgroundColor(theSelectedMenuColor); 
	  	thePressedLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        }
        else
        {
            pressedSelected=true; 
            thePressedLabel.setForegroundColor(theSelectedMenuColor);
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }
 
  private void setMouseReleasedMenuLabel(SBTab theReleasedLabel)
 {
    try
    {
        pressedSelected = false;
        if(theEnteredLabelReference.equals(thePressedLabelReference)==false || isEntered == false)
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==false)
            {
                thePressedLabelReference.setBackgroundColor(theCurrentMenuColor);
		    thePressedLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
            }
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }           
        }
        else
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }
		else
		{
		    try
		    {
 		        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
			  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
 		        TheMenuLabelReference.setTheIcon(arrowIcon);
 		        thePressedLabelReference.setTheIcon(arrowSelectedIcon);
 		        TheMenuLabelReference = thePressedLabelReference;
                       /* try
                        {
                            setContentPanel((EAPanel)Class.forName(getSidebarComponentID(theReleasedLabel.getComponentLocalizationID())).newInstance());
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }*/
  	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();   
 		    }
		    catch(Exception e)
		    {
		        System.out.println(e);
		    }
		}
        }
        
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 } 
    private static synchronized Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        try
        {
            while(textArrayString.indexOf(",")!=-1)
            {
                tempString = textArrayString.substring(0,textArrayString.indexOf(","));
                textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
                aryList.add(tempString);
            }
            aryList.add(textArrayString);
            aryList.trimToSize();
        }
        catch(NullPointerException e)
        {
         
        }

        return aryList.toArray();
    }  

private synchronized String getSidebarComponentID(String compRefID)
{
	try
	{
		return (String)sbMap.get(compRefID);
	}
	catch(Exception e)
	{
	e.printStackTrace();
	}
	return "";
}

private synchronized void initSidebar()
{
try
{
	Object[] sbUIStrings = getStringArraysFromString(DesignerRuleBuilder.get("sbAutoUpdateStrings"));
	Object[] sbUIActions = getStringArraysFromString(DesignerRuleBuilder.get("sbAutoUpdateActionPanels"));
//sbMap

                    for(int i = 0;i<sbUIStrings.length;i++)
                    {
                        try
				{
					sbMap.put((String)sbUIStrings[i],(String)sbUIActions[i]);
					//LeftMenuButtonPanel.add(new SBTab((String)sbUIStrings[i],sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque));
				}
				catch(Exception e)
				{
					sbMap.put((String)sbUIStrings[i],"");
				} 
                    }
}
catch(Exception e)
{
	e.printStackTrace();
}
}      

private String[] strActionsArray = new String[4];
private EAListItem[] ActionsEAListItemArray = new EAListItem[4];
private EAListItem[] getActionsEAListItems()
{
        try
        {
		int defActionLabelWidth = 200;
		int defActionDataWidth = 325;

		EAListItem[] eaItems = new EAListItem[4];
            EAListItem eai = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent autoUpdateLoadCheckForUpdatesUIAction = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		autoUpdateLoadCheckForUpdatesUIAction.setLabelText("Check for Updates UI Action:");
		if(ProjectManager.get("autoUpdateLoadCheckForUpdatesUIAction")!=null)
		{
			autoUpdateLoadCheckForUpdatesUIAction.setInputText(ProjectManager.get("autoUpdateLoadCheckForUpdatesUIAction"));
			strActionsArray[0] = "autoUpdateLoadCheckForUpdatesUIAction";
		}
            eai.setRowDataPanel(autoUpdateLoadCheckForUpdatesUIAction);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
//
            EAListItem eai2 = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent autoUpdateLoadInstallUIAction = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		autoUpdateLoadInstallUIAction.setLabelText("Start Install UI Action:");
		if(ProjectManager.get("autoUpdateLoadInstallUIAction")!=null)
		{
			autoUpdateLoadInstallUIAction.setInputText(ProjectManager.get("autoUpdateLoadInstallUIAction"));
			strActionsArray[1] = "autoUpdateLoadInstallUIAction";
		}
            eai2.setRowDataPanel(autoUpdateLoadInstallUIAction);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai2.setListItemIsRemovable(false);
		eai2.setValueBoxEnabled(false);
		eaItems[1] = eai2;
//
            EAListItem eai3 = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent autoUpdateInstallAction = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		autoUpdateInstallAction.setLabelText("Install Action:");
		if(ProjectManager.get("autoUpdateInstallAction")!=null)
		{
			autoUpdateInstallAction.setInputText(ProjectManager.get("autoUpdateInstallAction"));
			strActionsArray[2] = "autoUpdateInstallAction";
		}
            eai3.setRowDataPanel(autoUpdateInstallAction);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai3.setListItemIsRemovable(false);
		eai3.setValueBoxEnabled(false);
		eaItems[2] = eai3;
//
            EAListItem eai4 = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent autoUpdateSkipAction = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		autoUpdateSkipAction.setLabelText("Skip Install Action:");
		if(ProjectManager.get("autoUpdateSkipAction")!=null)
		{
			autoUpdateSkipAction.setInputText(ProjectManager.get("autoUpdateSkipAction"));
			strActionsArray[3] = "autoUpdateSkipAction";
		}
            eai4.setRowDataPanel(autoUpdateSkipAction);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai4.setListItemIsRemovable(false);
		eai4.setValueBoxEnabled(false);
		eaItems[3] = eai4;
		ActionsEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}

    public void setSelectedListItemEvent(int theLastSelectedIndex)
    {
		try
		{
			TheContentPanelReference.getDataUpdate();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
		EAListItemContent theContent = eaListItemObj.getRowDataPanel();
		if(theLastSelectedIndex!=-1)
		{
			try
			{
				theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(strActionsArray[theLastSelectedIndex]));
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}

		DataContentPanel tempPanel = new DataContentPanel("The Automatic Update Action can be viewed below.");
		tempPanel.setContentPanel(new TextFieldPanel(ActionsEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(strActionsArray[theEAProperties.getSelectedIndex()]), strActionsArray[theEAProperties.getSelectedIndex()], false));
		setContentPanel(tempPanel);
    }

        //AutoUpdateSettingsPanelItem1.add(AutoUpdateEnabledPanel, java.awt.BorderLayout.WEST);
    private EAPanel TheTopContentPanelReference = new EAPanel();
    private void setActionsPanel()
    {
        try
        {
	     getDataUpdate();
           AutoUpdateContentTopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
           AutoUpdateContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 300));
	     AutoUpdateCentralContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
           AutoUpdateCentralContentPanel.setPreferredSize(new java.awt.Dimension(620, 300));
           TheTopContentPanelReference.setVisible(false);
           AutoUpdateCentralContentPanel.remove(TheTopContentPanelReference);        
           TheTopContentPanelReference = theEAProperties;
           AutoUpdateCentralContentPanel.add(theEAProperties, java.awt.BorderLayout.CENTER);     
           TheTopContentPanelReference.setVisible(true);
	     DataContentPanel tempPanel = new DataContentPanel("The Automatic Update Action can be viewed below.");
	     tempPanel.setContentPanel(new TextFieldPanel(ActionsEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(strActionsArray[theEAProperties.getSelectedIndex()]), strActionsArray[theEAProperties.getSelectedIndex()], true));
	     setContentPanel(tempPanel);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }  
    private void setPropertiesPanel()
    {
        try
        {
	     getDataUpdate();
           AutoUpdateContentTopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
           AutoUpdateContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 60));
	     AutoUpdateCentralContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
           AutoUpdateCentralContentPanel.setPreferredSize(new java.awt.Dimension(620, 60));
           TheTopContentPanelReference.setVisible(false);
           AutoUpdateCentralContentPanel.remove(TheTopContentPanelReference);        
           TheTopContentPanelReference = AutoUpdateContentPanel;
           AutoUpdateCentralContentPanel.add(AutoUpdateContentPanel, java.awt.BorderLayout.CENTER);     
           TheTopContentPanelReference.setVisible(true);
	     marginContentPanel.setContentPanel(autoUpdateConfigPanel);
	     setContentPanel(marginContentPanel);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }   

    private void setPlatformsPanel()
    {
        try
        {
	     getDataUpdate();
           AutoUpdateContentTopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
           AutoUpdateContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 60));
	     AutoUpdateCentralContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
           AutoUpdateCentralContentPanel.setPreferredSize(new java.awt.Dimension(620, 60));
           TheTopContentPanelReference.setVisible(false);
           AutoUpdateCentralContentPanel.remove(TheTopContentPanelReference);        
           TheTopContentPanelReference = AutoUpdateContentPanel;
           AutoUpdateCentralContentPanel.add(AutoUpdateContentPanel, java.awt.BorderLayout.CENTER);     
           TheTopContentPanelReference.setVisible(true);
	     setContentPanel(autoUpdatePlatformsPanel);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    } 

    private void setEncryptionPanel()
    {
        try
        {
	     getDataUpdate();
           AutoUpdateContentTopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
           AutoUpdateContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 60));
	     AutoUpdateCentralContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
           AutoUpdateCentralContentPanel.setPreferredSize(new java.awt.Dimension(620, 60));
           TheTopContentPanelReference.setVisible(false);
           AutoUpdateCentralContentPanel.remove(TheTopContentPanelReference);        
           TheTopContentPanelReference = AutoUpdateContentPanel;
           AutoUpdateCentralContentPanel.add(AutoUpdateContentPanel, java.awt.BorderLayout.CENTER);     
           TheTopContentPanelReference.setVisible(true);
	     setContentPanel(autoUpdateEncryptionPanel);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AutoUpdateCentralContentLeftMarginPanel;
    private javax.swing.JPanel AutoUpdateCentralContentPanel;
    private javax.swing.JPanel AutoUpdateCentralContentRightMarginPanel;
    private javax.swing.JPanel AutoUpdateContentBottomPanel;
    private EAPanel AutoUpdateContentPanel;
    private EAPanel AutoUpdateContentPanelItem1;
    private javax.swing.JPanel AutoUpdateContentTopPanel;
    private EAPanel AutoUpdateEnabledPanel;
    private SBTab AutoUpdateMenuLabelActionsButton;
    private SBTab AutoUpdateMenuLabelConfigButton;
    private SBTab AutoUpdateMenuLabelPlatformsButton;
    private SBTab AutoUpdateMenuLabelHTMLFormInputsButton;
    private javax.swing.JPanel AutoUpdatePanelMainContainer;
    private javax.swing.JPanel AutoUpdateSettingsPanelItem1;
    private javax.swing.JPanel AutoUpdateSettingsPanelItem7;
    private javax.swing.JPanel PaymentsMenuLeftSpaceFiller;
    private javax.swing.JPanel LeftMenuPanelBottomPanel;
    private javax.swing.JPanel ProjectMenuButtonPanel;
    private SBSpacer ProjectMenuButtonPanelBottom;
    private SBTab ProjectMenuButtonPanelTop;
    private javax.swing.JPanel ProjectMenuPanel;
    private javax.swing.JPanel ProjectSelectionContentPanel;
    private javax.swing.JCheckBox cbAutoUpdateEnabled;
    private ContentAreaHeaderPanel contentProjectPanel;
    private javax.swing.JPanel contentPanel;
    private EAPropertiesPanel theEAProperties;
    private AutoUpdateConfigPanel autoUpdateConfigPanel;
    private AutoUpdateEncryptionPanel autoUpdateEncryptionPanel;
    private AutoUpdateEnabledControl autoUpdateEnabledPanel;
    private AutoUpdatePlatformsPanel autoUpdatePlatformsPanel;
    private MarginContentPanel marginContentPanel;
    // End of variables declaration//GEN-END:variables
    
}
