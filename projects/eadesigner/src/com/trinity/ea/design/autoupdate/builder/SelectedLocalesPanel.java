/*
 * SelectedLocalesPanel.java
 *
 * Created on December 16, 2003, 4:55 PM
 */

package com.trinity.ea.design.autoupdate.builder;
import com.trinity.ea.design.common.panel.EAPanel;
import com.trinity.ea.design.common.panel.EAMasterControlPanel;
import com.trinity.ea.design.common.panel.EAPropertiesPanel;
import com.trinity.ea.design.common.panel.EAListItem;
import com.trinity.ea.design.common.panel.EAListItemContent;
import com.trinity.ea.design.common.file.ProjectManager;
import com.trinity.ea.design.rules.builder.DesignerRuleBuilder;
import com.trinity.ea.design.common.localechooser.LanguageSelector;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.ImageIcon;
import javax.swing.Icon;
import javax.swing.BoxLayout;
import java.awt.FlowLayout;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Font;
import java.util.HashMap;
import java.io.File;
import java.net.URL;
import java.net.MalformedURLException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class SelectedLocalesPanel extends EAMasterControlPanel {
    private Color backgroundColor = getBackground();
    private Color borderColor1 = getBackground();
    private Color borderColor2 = getBackground();
    //private Color rowColor = new java.awt.Color(220, 225, 240);
    //private Color rowBorderColor = new java.awt.Color(255, 255, 255);
    //private Color tabColor = new java.awt.Color(255, 255, 255);
    //private Color tabBorderColor = new java.awt.Color(0, 0, 0);
    private Color rowColor = javax.swing.UIManager.getDefaults().getColor("List.background");
    private Color rowBorderColor = javax.swing.UIManager.getDefaults().getColor("List.focusCellBorderColor");
    private Color tabColor = javax.swing.UIManager.getDefaults().getColor("TabbedPane.background");
    private Color tabBorderColor = javax.swing.UIManager.getDefaults().getColor("Button.highlight");
    private Icon theActionRowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/lgpl/locale.png"));
    private int rowHeight = 25;
    private int defActionLabelWidth = 180;
    private int defActionDataWidth = 60;
    private int defActionDataValueWidth = 0;    
    private static String prjbuildlocales = null;
    private static String prjlocalesnames = null;
    private static String prjlocales = null;
    private static String prjdefaultlocale = null;

    public String getMessageLocales()
    {
	if(prjlocales!=null)
	{
	  	return prjlocales;
	}
	else
	{
		return "";
	}
    }

    public String getMessageLocalesNames()
    {
	if(prjlocalesnames!=null)
	{
	  	return prjlocalesnames;
	}
	else
	{
		return "";
	}
    }

    public String getMessageBuildLocales()
    {
	if(prjbuildlocales!=null)
	{
	  	return prjbuildlocales;
	}
	else
	{
		return "";
	}
    }

    /** Creates new form SelectedLocalesPanel */
    public SelectedLocalesPanel() 
    {
		if(ProjectManager.get("prjdefaultlocale")!=null)
		{
			if(ProjectManager.get("prjdefaultlocale").equalsIgnoreCase("")==false)
			{
				prjdefaultlocale = ProjectManager.get("prjdefaultlocale");
			}
		}
		if(ProjectManager.get("prjlocales")!=null)
		{
			if(ProjectManager.get("prjlocales").equalsIgnoreCase("")==false)
			{
				prjlocales = ProjectManager.get("prjlocales");
			}
		}
		if(ProjectManager.get("prjlocalesnames")!=null)
		{
			if(ProjectManager.get("prjlocalesnames").equalsIgnoreCase("")==false)
			{
				prjlocalesnames = ProjectManager.get("prjlocalesnames");
			}
		}
		if(ProjectManager.get("prjbuildlocales")!=null)
		{
			if(ProjectManager.get("prjbuildlocales").equalsIgnoreCase("")==false)
			{
				prjbuildlocales = ProjectManager.get("prjbuildlocales");
			}
		}
        initComponents();
	  setProjectData();
    }
    
    public SelectedLocalesPanel(String defaultLocale, String prjLocales, String prjBuildLocales, String prjLocaleNames)
    {
    	  prjbuildlocales = prjBuildLocales;
    	  prjlocalesnames = prjLocaleNames;
    	  prjlocales = prjLocales;
    	  prjdefaultlocale = defaultLocale;
        initComponents();
	  setProjectData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ProjectLocalesCenterPanel = new javax.swing.JPanel();
        ProjectLocalesCenterPanelScrollPane = new javax.swing.JScrollPane();
        LocalesCenterPanelScrollPaneContentPanel = new javax.swing.JPanel();
        LocalesCenterPanelScrollPaneLanguageID = new javax.swing.JScrollPane();
        LocalesJTreeLanguages = new javax.swing.JTree();
        LocalesCenterPanelScrollPaneLanguageEnabled = new javax.swing.JScrollPane();
        LocalesEnablesLocalesCheckboxPanel = new javax.swing.JPanel();
        ProjectLocalesNorthPanel = new javax.swing.JPanel();
        ProjectLocalesNorthPanelTopPanel = new javax.swing.JPanel();
        ProjectLocalesNorthPanelBottomPanel = new javax.swing.JPanel();
        ProjectLocalesSouthPanel = new javax.swing.JPanel();
        //LocalesSelectAllButton = new javax.swing.JButton();
        //LocalesDeselectAllButton = new javax.swing.JButton();
        ProjectLocalesLeftPanel = new javax.swing.JPanel();
        ProjectLocalesRightPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        //setBackground(new java.awt.Color(140, 160, 210));
        ProjectLocalesCenterPanel.setLayout(new java.awt.BorderLayout());
//
theEAProperties = new EAPropertiesPanel(getActionsEAListItems(),rowColor, rowBorderColor, backgroundColor, rowHeight);
//
theEAProperties.setMasterControlPanel(this);
//	  
	try
	{
	  theEAProperties.setDescriptorPanelWidth(149);
	  //allowURLChangesPanel.setBackgroundColor(backgroundColor);
	  //allowURLChangesPanel.setText("Allow URL changes via messages");
	  theEAProperties.setHeaderText("Locale List");
	  theEAProperties.setDescriptorText("Configure Languages");
	  theEAProperties.setHeaderTextAndWidth("Locale List", 190, "Enabled", 110, "", 0);
	  theEAProperties.setAddEALIOnAddEnabled(true);
	  theEAProperties.setAddButtonVisible(true);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(true);
		try
		{
             			if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             			{
                				if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 				{
						}
						else
						{
	  theEAProperties.setAddButtonEnabled(false);
	  theEAProperties.setEditButtonEnabled(false);
	  theEAProperties.setRemoveButtonEnabled(false);
						}
					}
					else
					{
	  theEAProperties.setAddButtonEnabled(false);
	  theEAProperties.setEditButtonEnabled(false);
	  theEAProperties.setRemoveButtonEnabled(false);
					}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	  theEAProperties.setAddButtonText("Add Locale");
	  theEAProperties.setEditButtonText("Edit Locale");
	  theEAProperties.setRemoveButtonText("Remove Locale");
	  theEAProperties.setPreviewButtonVisible(false);
	  theEAProperties.setConfigurationWizardButtonVisible(false);
	  theEAProperties.setSelectedIndex(0);
	  theEAProperties.setLabelWidth(defActionLabelWidth);
	  theEAProperties.setDataWidth(defActionDataWidth);
	  theEAProperties.setDefaultRowIcon(theActionRowIcon);
	  theEAProperties.setBackgroundColor(backgroundColor);
	  theEAProperties.setTabColor(tabColor);
	  theEAProperties.setTabBorderColor(tabBorderColor);
	  theEAProperties.setParentComponent(this);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}

        ProjectLocalesCenterPanel.setBackground(new java.awt.Color(220, 225, 240));
        ProjectLocalesCenterPanelScrollPane.setBackground(new java.awt.Color(220, 225, 240));
        ProjectLocalesCenterPanelScrollPane.setBorder(null);
        ProjectLocalesCenterPanelScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        ProjectLocalesCenterPanelScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        LocalesCenterPanelScrollPaneContentPanel.setLayout(new java.awt.BorderLayout());

        LocalesCenterPanelScrollPaneContentPanel.setBackground(new java.awt.Color(220, 225, 240));
        LocalesCenterPanelScrollPaneLanguageID.setBackground(new java.awt.Color(220, 225, 240));
        LocalesCenterPanelScrollPaneLanguageID.setBorder(null);
        LocalesCenterPanelScrollPaneLanguageID.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        LocalesCenterPanelScrollPaneLanguageID.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        LocalesCenterPanelScrollPaneLanguageID.setFont(new java.awt.Font("Arial", 0, 12));
        LocalesCenterPanelScrollPaneLanguageID.setMinimumSize(new java.awt.Dimension(385, 22));
        LocalesCenterPanelScrollPaneLanguageID.setPreferredSize(new java.awt.Dimension(385, 3));
        LocalesJTreeLanguages.setBackground(new java.awt.Color(220, 225, 240));
        LocalesJTreeLanguages.setFont(new java.awt.Font("Arial", 0, 12));
        LocalesJTreeLanguages.setMaximumSize(new java.awt.Dimension(385, 32768));
        LocalesJTreeLanguages.setMinimumSize(new java.awt.Dimension(385, 0));
        LocalesJTreeLanguages.setPreferredSize(new java.awt.Dimension(385, 2000));
        LocalesJTreeLanguages.setRootVisible(false);
        LocalesJTreeLanguages.setRowHeight(20);
        LocalesJTreeLanguages.setVisibleRowCount(100);
        LocalesCenterPanelScrollPaneLanguageID.setViewportView(LocalesJTreeLanguages);

        LocalesCenterPanelScrollPaneContentPanel.add(LocalesCenterPanelScrollPaneLanguageID, java.awt.BorderLayout.WEST);

        LocalesCenterPanelScrollPaneLanguageEnabled.setBackground(new java.awt.Color(220, 225, 240));
        LocalesCenterPanelScrollPaneLanguageEnabled.setBorder(null);
        LocalesCenterPanelScrollPaneLanguageEnabled.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        LocalesCenterPanelScrollPaneLanguageEnabled.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        LocalesEnablesLocalesCheckboxPanel.setBackground(new java.awt.Color(220, 225, 240));
        LocalesCenterPanelScrollPaneLanguageEnabled.setViewportView(LocalesEnablesLocalesCheckboxPanel);

        LocalesCenterPanelScrollPaneContentPanel.add(LocalesCenterPanelScrollPaneLanguageEnabled, java.awt.BorderLayout.CENTER);

        ProjectLocalesCenterPanelScrollPane.setViewportView(LocalesCenterPanelScrollPaneContentPanel);

        ProjectLocalesCenterPanel.add(ProjectLocalesCenterPanelScrollPane, java.awt.BorderLayout.CENTER);

        //add(ProjectLocalesCenterPanel, java.awt.BorderLayout.CENTER);
        add(theEAProperties, java.awt.BorderLayout.CENTER);

        ProjectLocalesNorthPanel.setLayout(new javax.swing.BoxLayout(ProjectLocalesNorthPanel, javax.swing.BoxLayout.Y_AXIS));

        ProjectLocalesNorthPanel.setBackground(backgroundColor);
        ProjectLocalesNorthPanelTopPanel.setBackground(backgroundColor);
        ProjectLocalesNorthPanel.add(ProjectLocalesNorthPanelTopPanel);

        ProjectLocalesNorthPanelBottomPanel.setBackground(backgroundColor);
        ProjectLocalesNorthPanel.add(ProjectLocalesNorthPanelBottomPanel);

        add(ProjectLocalesNorthPanel, java.awt.BorderLayout.NORTH);

        ProjectLocalesSouthPanel.setBackground(backgroundColor);
       // LocalesSelectAllButton.setFont(new java.awt.Font("Arial", 0, 12));
        //LocalesSelectAllButton.setText("Select All");
        //LocalesSelectAllButton.addActionListener(new java.awt.event.ActionListener() {
        //    public void actionPerformed(java.awt.event.ActionEvent evt) {
        //        LocalesSelectAllButtonActionPerformed(evt);
        //    }
        //});

        //ProjectLocalesSouthPanel.add(LocalesSelectAllButton);

        //LocalesDeselectAllButton.setFont(new java.awt.Font("Arial", 0, 12));
        //LocalesDeselectAllButton.setText("Deselect All");
        //LocalesDeselectAllButton.addActionListener(new java.awt.event.ActionListener() {
        //    public void actionPerformed(java.awt.event.ActionEvent evt) {
        //        LocalesDeselectAllButtonActionPerformed(evt);
        //    }
        //});

        //ProjectLocalesSouthPanel.add(LocalesDeselectAllButton);

        add(ProjectLocalesSouthPanel, java.awt.BorderLayout.SOUTH);

        ProjectLocalesLeftPanel.setBackground(backgroundColor);
        ProjectLocalesLeftPanel.setMaximumSize(new java.awt.Dimension(10, 32767));
        add(ProjectLocalesLeftPanel, java.awt.BorderLayout.WEST);

        ProjectLocalesRightPanel.setBackground(backgroundColor);
        ProjectLocalesRightPanel.setMaximumSize(new java.awt.Dimension(10, 32767));
        add(ProjectLocalesRightPanel, java.awt.BorderLayout.EAST);

    }//GEN-END:initComponents

   // private void LocalesDeselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalesDeselectAllButtonActionPerformed
        // Add your handling code here:
    //}//GEN-LAST:event_LocalesDeselectAllButtonActionPerformed

    //private void LocalesSelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalesSelectAllButtonActionPerformed
        // Add your handling code here:
  //  }//GEN-LAST:event_LocalesSelectAllButtonActionPerformed

public EAListItem[] getEAListItemURLArray()
{
	return getActionsEAListItems();
}

private int translatedLangs = 3;
EAListItem[] ActionsEAListItemArray = new EAListItem[4];
//private String[] strActionsArray = new String[4];
private EAListItem[] getActionsEAListItems()
{
	String strDefaultLanguage = "en";
        try
        {
		Object[] localArray = {"en"};
		ArrayList strArrayList1 = new ArrayList();
		ArrayList eaListItemArrayList1 = new ArrayList();
		if(prjdefaultlocale.equalsIgnoreCase("")==false)
		{
			strDefaultLanguage = prjdefaultlocale;
		}
	
		localArray = getStringArraysFromString(prjlocales);
		ActionsEAListItemArray = new EAListItem[localArray.length];
		try
		{
        		try
        		{
            		// Translated languages available value
            		if(ProjectManager.get("project_translated_lang_count")!=null)
            		{
            			if(ProjectManager.get("project_translated_lang_count").equalsIgnoreCase("")==false)
            			{
   		    				translatedLangs = Integer.valueOf(ProjectManager.get("project_translated_lang_count")).intValue();
 					}
					else
					{
						translatedLangs = 3;
					}
	           		}
				else
				{
					translatedLangs = 3;
				}
        		}
        		catch(Exception e)
        		{
            		translatedLangs = 3;
        		}
			int loopnum = 0;
			if(translatedLangs<=localArray.length)
			{
				loopnum=translatedLangs;
			}
			else
			{
				loopnum = localArray.length;
			}
			for(int i = 0;i<loopnum;i++)
			{
            		EAListItem eai2 = new EAListItem(theActionRowIcon,rowColor);
				EAListItemContent locales1 = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth, defActionDataValueWidth, true);
				HashMap locHM = getLocaleMap();
				if(localArray[i]!=null)
				{
             			if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             			{
                				if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 				{
							try
							{
								Object[] theObj = (Object[])locHM.get((String)localArray[i]);
								locales1.setLabelText(((String)theObj[0]) + " - " + ((String)localArray[i]));
								locales1.setCheckBoxSelected(((Boolean)theObj[1]).booleanValue());
								locales1.setValueBoxEnabled(false);
								if(strDefaultLanguage.equalsIgnoreCase(((String)localArray[i]))==true)
								{
									locales1.setCheckBoxEnabled(true);
								}
							}
							catch(Exception e)
							{
								locales1.setLabelText((String)localArray[i]);
								locales1.setCheckBoxEnabled(false);
							}
						}
						else
						{
							try
							{
								Object[] theObj = (Object[])locHM.get((String)localArray[i]);
								locales1.setLabelText(((String)theObj[0]) + " - " + ((String)localArray[i]));
								locales1.setCheckBoxSelected(((Boolean)theObj[1]).booleanValue());
								if(prjdefaultlocale!=null)
								{
									locales1.setCheckBoxEnabled(false);
								}
								else
								{
									locales1.setCheckBoxEnabled(false);
								}
							}
							catch(Exception e)
							{
								locales1.setLabelText((String)localArray[i]);
							}
						}
					}
					else
					{
							try
							{
								Object[] theObj = (Object[])locHM.get((String)localArray[i]);
								locales1.setLabelText(((String)theObj[0]) + " - " + ((String)localArray[i]));
								locales1.setCheckBoxSelected(((Boolean)theObj[1]).booleanValue());
								if(prjdefaultlocale!=null)
								{
									locales1.setCheckBoxEnabled(false);
								}
								else
								{
									locales1.setCheckBoxEnabled(false);
								}
							}
							catch(Exception e)
							{
								locales1.setLabelText((String)localArray[i]);
							}
					}
				}
            		eai2.setRowDataPanel(locales1);
				// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
				eai2.setListItemIsRemovable(false);
				eai2.setValueBoxEnabled(true);
				eai2.getJCheckBoxControl().addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                localeSelectedActionPerformed(evt);
            }
        });

				eaListItemArrayList1.add(eai2);
			}
			for(int i = (translatedLangs);i<localArray.length;i++)
			{
            		EAListItem eai2 = new EAListItem(theActionRowIcon,rowColor);
				EAListItemContent locales1 = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth,defActionDataValueWidth, true);
				HashMap locHM = getLocaleMap();
				if(localArray[i]!=null)
				{
             			if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             			{
                				if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 				{
							try
							{
								Object[] theObj = (Object[])locHM.get((String)localArray[i]);
								locales1.setLabelText(((String)theObj[0]) + " - " + ((String)localArray[i]));
								locales1.setCheckBoxSelected(((Boolean)theObj[1]).booleanValue());
								locales1.setValueBoxEnabled(true);
								locales1.setInputTextColor(Color.black);
								locales1.setInputValueText("No");
								if(strDefaultLanguage.equalsIgnoreCase(((String)localArray[i]))==true)
								{
									locales1.setCheckBoxEnabled(false);
								}
							}
							catch(Exception e)
							{
								locales1.setLabelText((String)localArray[i]);
								locales1.setCheckBoxEnabled(false);
							}
						}
						else
						{
							try
							{
								Object[] theObj = (Object[])locHM.get((String)localArray[i]);
								locales1.setLabelText(((String)theObj[0]) + " - " + ((String)localArray[i]));
								locales1.setCheckBoxSelected(((Boolean)theObj[1]).booleanValue());
								if(prjdefaultlocale!=null)
								{
									locales1.setCheckBoxEnabled(false);
								}
								else
								{
									locales1.setCheckBoxEnabled(false);
								}
							}
							catch(Exception e)
							{
								locales1.setLabelText((String)localArray[i]);
							}
						}
					}
					else
					{
							try
							{
								Object[] theObj = (Object[])locHM.get((String)localArray[i]);
								locales1.setLabelText(((String)theObj[0]) + " - " + ((String)localArray[i]));
								locales1.setCheckBoxSelected(((Boolean)theObj[1]).booleanValue());
								if(prjdefaultlocale!=null)
								{
									locales1.setCheckBoxEnabled(false);
								}
								else
								{
									locales1.setCheckBoxEnabled(false);
								}
							}
							catch(Exception e)
							{
								locales1.setLabelText((String)localArray[i]);
							}
					}
				}
            		eai2.setRowDataPanel(locales1);
				// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
				eai2.setListItemIsRemovable(true);
				eai2.setValueBoxEnabled(true);
				eai2.getJCheckBoxControl().addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                localeSelectedActionPerformed(evt);
            }
        });
				eaListItemArrayList1.add(eai2);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		eaListItemArrayList1.trimToSize();
		Object[] theEAListItemObjArray = eaListItemArrayList1.toArray();
		ActionsEAListItemArray = new EAListItem[theEAListItemObjArray.length];
		for(int i = 0;i<theEAListItemObjArray.length;i++)
		{
			ActionsEAListItemArray[i] = (EAListItem)theEAListItemObjArray[i];
		}

		return ActionsEAListItemArray;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}

private HashMap getLocaleMap()
{
	HashMap hm = new HashMap();
	try
	{
	if(prjlocales!=null)
	{
		if(prjlocales.equalsIgnoreCase("")==false)
		{
			if(prjlocalesnames!=null)
			{
				if(prjlocalesnames.equalsIgnoreCase("")==false)
				{
					if(prjbuildlocales!=null)
					{
							Object[] shorts = getStringArraysFromString(prjlocales);
							Object[] names = getStringArraysFromString(prjlocalesnames);
							Object[] enabled = getStringArraysFromString(prjbuildlocales);
							HashMap enabledMap = new HashMap();
							for(int i = 0;i<enabled.length;i++)
							{
								hm.put((String)enabled[i],(String)enabled[i]);
							}
							for(int i = 0;i<shorts.length;i++)
							{
									Object[] strArray = new Object[2];
									strArray[0] = (String)names[i];

								if(hm.get((String)shorts[i])!=null)
								{
									strArray[1] = new Boolean(true);
								}
								else
								{
									strArray[1] = new Boolean(false);
								}
								hm.put((String)shorts[i],strArray);
							}
							//System.out.println("HashMap: " + hm.toString());
							return hm;
					}
				}	
			}
		}	
	}	
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	//System.out.println("HashMap: returning null");
	return null;
}

    public EAListItemContent addEAListItem()
    {
	try
	{
        if(LanguageSelector.showLanguageSelectorDialog()!=-1)
        {
		 addLocale(LanguageSelector.getLocaleString(), LanguageSelector.getLocaleNameString());
	 	 EAListItemContent locales1 = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth,true);
		 try
		 {
			locales1.setLabelText(LanguageSelector.getLocaleNameString() + " - " + LanguageSelector.getLocaleString());
		 	locales1.setCheckBoxSelected(false);
			locales1.setValueBoxEnabled(false);
		 }
		 catch(Exception e)
		 {
			e.printStackTrace();
		 }
		locales1.cbInputLabel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                localeSelectedActionPerformed(evt);
            }
        });

		return locales1;
        }
        else
        {
         	return null;
        }

	}
	catch(Exception e)
	{
		e.printStackTrace();
         	return null;
	}
    } 

    public void removeListItem(int index)
    {
       try
       {
		Object[] prjLocales = getStringArraysFromString(prjlocales);
		removeLocale(((String)prjLocales[index]));
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
    } 

	private void addLocale(String strLocale, String strLocaleName)
	{
		try
		{
             	if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             	{
                		if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 		{
					if(strLocale!=null)
					{
						if(strLocaleName!=null)	
						{
							prjlocales = prjlocales + "," + strLocale;
							prjlocalesnames = prjlocalesnames + "," + strLocaleName;
						}
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	private void addBuildLocale(String strLocale)
	{
		try
		{
             	if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             	{
                		if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 		{
					if(strLocale!=null)
					{
						if(prjbuildlocales.equalsIgnoreCase("")==false)
						{
							prjbuildlocales = prjbuildlocales + "," + strLocale;
						}
						else
						{
							prjbuildlocales = strLocale;
						}
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}		
	}

	private void removeLocale(String strLocale)
	{
		try
		{
             	if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             	{
                		if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 		{
					if(strLocale!=null)
					{
						removeBuildLocale(strLocale);
						Object[] prjLocales = getStringArraysFromString(prjlocales);
						Object[] prjLocaleNames = getStringArraysFromString(prjlocalesnames);
						String[] newPrjLocales = new String[prjLocales.length - 1];
						String[] newPrjLocaleNames = new String[prjLocales.length - 1];
						int j = 0;
						for(int i = 0;i<prjLocales.length;i++)
						{
							if(strLocale.equalsIgnoreCase((String)prjLocales[i])==false)
							{
								newPrjLocales[j] = (String)prjLocales[i];
								newPrjLocaleNames[j] = (String)prjLocaleNames[i];
								j++;
							}
						}
						String strNewPrjLocales = newPrjLocales[0];
						String strNewPrjLocaleNames = newPrjLocaleNames[0];
						for(int i = 1;i<newPrjLocales.length;i++)
						{
							strNewPrjLocales = strNewPrjLocales + "," + newPrjLocales[i];
							strNewPrjLocaleNames = strNewPrjLocaleNames + "," + newPrjLocaleNames[i];
						}						
						prjlocales = strNewPrjLocales;
						prjlocalesnames = strNewPrjLocaleNames;
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}		
	}

	private static void removeBuildLocale(String strLocale)
	{
		try
		{
             	if(DesignerRuleBuilder.get("prjLocalesEnabled")!=null)
             	{
                		if(DesignerRuleBuilder.get("prjLocalesEnabled").equalsIgnoreCase("true")==true)
                 		{
					if(strLocale!=null)
					{
						Object[] prjLocales = getStringArraysFromString(prjbuildlocales);
						String[] newPrjLocales = new String[prjLocales.length - 1];
						int j = 0;
						for(int i = 0;i<prjLocales.length;i++)
						{
							if(strLocale.equalsIgnoreCase((String)prjLocales[i])==false)
							{
								newPrjLocales[j] = (String)prjLocales[i];
								j++;
							}
						}
                                    if(0<newPrjLocales.length)
                                    {
                                        String strNewPrjLocales = newPrjLocales[0];
                                        for(int i = 1;i<newPrjLocales.length;i++)
                                        {
                                            strNewPrjLocales = strNewPrjLocales + "," + newPrjLocales[i];
                                        }						
                                        prjbuildlocales = strNewPrjLocales;
                                    }
						else
						{
							prjbuildlocales = "";
						}
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

    private void localeSelectedActionPerformed(java.awt.event.ItemEvent evt)
    {
	try
	{
	theEAProperties.setSelectedIndex(((EAListItem)((JCheckBox)evt.getItem()).getParent().getParent().getParent()).getComponentLocalizationID());
	Object[] prjLocales = getStringArraysFromString(prjlocales);
	Object[] prjLocaleNames = getStringArraysFromString(prjlocalesnames);
	//System.out.println("Checkbox Action performed. The selected index is: " + theEAProperties.getSelectedIndex() + ", The index locale is: " + ((String)prjLocales[theEAProperties.getSelectedIndex()]) + ", The Language is: " + ((String)prjLocaleNames[theEAProperties.getSelectedIndex()]));
	if(((JCheckBox)evt.getItem()).isSelected()==true)
	{
		addBuildLocale(((String)prjLocales[theEAProperties.getSelectedIndex()]));
	}
	else
	{
		removeBuildLocale(((String)prjLocales[theEAProperties.getSelectedIndex()]));
	}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
    }

    public void setSelectedListItemEvent(int theLastSelectedIndex)
    {
		/*EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
		EAListItemContent theContent = eaListItemObj.getRowDataPanel();
		if(theLastSelectedIndex!=-1)
		{
			try
			{
				theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(strActionsArray[theLastSelectedIndex]));
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}*/
    }

    private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    }   

  public void getDataUpdate()
  {
	try
	{
		//System.out.println("Data Update not implemented in this Panel...");
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
  }       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LocalesCenterPanelScrollPaneContentPanel;
    private javax.swing.JScrollPane LocalesCenterPanelScrollPaneLanguageEnabled;
    private javax.swing.JScrollPane LocalesCenterPanelScrollPaneLanguageID;
   // private javax.swing.JButton LocalesDeselectAllButton;
    private javax.swing.JPanel LocalesEnablesLocalesCheckboxPanel;
    private javax.swing.JTree LocalesJTreeLanguages;
   // private javax.swing.JButton LocalesSelectAllButton;
    private javax.swing.JPanel ProjectLocalesCenterPanel;
    private javax.swing.JScrollPane ProjectLocalesCenterPanelScrollPane;
    private javax.swing.JPanel ProjectLocalesLeftPanel;
    private javax.swing.JPanel ProjectLocalesNorthPanel;
    private javax.swing.JPanel ProjectLocalesNorthPanelBottomPanel;
    private javax.swing.JPanel ProjectLocalesNorthPanelTopPanel;
    private javax.swing.JPanel ProjectLocalesRightPanel;
    private javax.swing.JPanel ProjectLocalesSouthPanel;
    private EAPropertiesPanel theEAProperties;
    // End of variables declaration//GEN-END:variables
    
}
