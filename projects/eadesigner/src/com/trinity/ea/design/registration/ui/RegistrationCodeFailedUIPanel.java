/*
 * RegistrationCodeFailedUIPanel.java
 *
 * Created on March 7, 2004, 5:33 PM
 */

package com.trinity.ea.design.registration.ui;

import com.trinity.ea.design.common.panel.EAPanel;
import com.trinity.ea.design.registration.EADesignerRegistrationPanel;
import com.trinity.ea.design.common.sidebar.SBTab;
import com.trinity.ea.design.project.EADesignerProjectPanel;
import com.trinity.ea.design.common.sidebar.SBSpacer;
import com.trinity.ea.design.rules.builder.DesignerRuleBuilder;
import java.awt.Font;
import java.util.HashMap;
import java.util.Collections;
import java.util.Map;
import java.util.ArrayList;
import com.trinity.ea.design.common.borderline.ContentAreaHeaderPanel3;
import javax.swing.UIManager;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.InsetsUIResource;
import javax.swing.plaf.BorderUIResource;
import javax.swing.*;
import java.awt.*;


/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class RegistrationCodeFailedUIPanel extends EAPanel {
    Map sbMap = Collections.synchronizedMap(new HashMap());  
    EAPanel uiPanel;
    EAPanel actPanel;

    /** Creates new form RegistrationCodeFailedUIPanel */
    public RegistrationCodeFailedUIPanel() {
        initComponents();
	  initSidebar();
        setSelectedMenuItem(lUserInterfaceMenuItem);
  	  setProjectData();   
    }

   private EAPanel TheContentPanelReference = new EAPanel();
   public void setContentPanel(EAPanel theContentPanel)
  {
    try
    {
	 getDataUpdate();
       TheContentPanelReference.setVisible(false);
       RegistrationSelectionContentPanel.remove(TheContentPanelReference);        
       TheContentPanelReference = theContentPanel;
       RegistrationSelectionContentPanel.add(TheContentPanelReference);     
       TheContentPanelReference.setVisible(true);

    }
    catch(Exception e)
    {
        System.out.println(e);
    }
  }   

  public synchronized void setProjectData()
  {
	try
	{
		TheContentPanelReference.setProjectData();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
  }       

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.BorderLayout());
        setBackground(new java.awt.Color(140, 160, 210));
 	  RegistrationMenuPanel = new javax.swing.JPanel();
	  RegistrationContentBottomPanel = new javax.swing.JPanel();
        LeftMenuPanelBottomPanel = new javax.swing.JPanel();
	  RegistrationUIMenuButtonPanel = new javax.swing.JPanel();
        RegistrationUIMenuButtonPanelTop = new SBTab(null,sbTabWidth, sbTabMenuTopSpaceFiller, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, null, iconTextGap, theCurrentMenuColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        RegistrationUIMenuButtonPanelBottom = new SBSpacer(theCurrentMenuColor,sbTabTopBorderColor,theCurrentMenuColor,sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,sbTabIsOpaque);
        RegistrationMenuLeftSpaceFiller = new javax.swing.JPanel();
	  RegistrationMenuContentPanel = new javax.swing.JPanel();
	  RegistrationSelectionContentPanel = new javax.swing.JPanel();

        RegistrationMenuPanel.setLayout(new java.awt.BorderLayout());
        RegistrationMenuPanel.setBackground(new java.awt.Color(140, 160, 210));
        RegistrationMenuPanel.setForeground(new java.awt.Color(255, 255, 255));
        RegistrationMenuPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 32767));
        RegistrationMenuPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 0));
        RegistrationMenuPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 200));
        RegistrationUIMenuButtonPanel.setLayout(new javax.swing.BoxLayout(RegistrationUIMenuButtonPanel, javax.swing.BoxLayout.Y_AXIS));
        RegistrationUIMenuButtonPanel.setBackground(theCurrentMenuColor);
        RegistrationUIMenuButtonPanel.setForeground(theTextMenuColor);
        RegistrationUIMenuButtonPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        RegistrationUIMenuButtonPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        RegistrationUIMenuButtonPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));

        LeftMenuPanelBottomPanel.setLayout(new java.awt.BorderLayout());
        LeftMenuPanelBottomPanel.setBackground(new java.awt.Color(140, 160, 210));
        LeftMenuPanelBottomPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuPanelBottomPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 100));
        LeftMenuPanelBottomPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 100));
        LeftMenuPanelBottomPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 100));

        RegistrationContentBottomPanel.setLayout(new java.awt.BorderLayout());
        RegistrationContentBottomPanel.setMaximumSize(new java.awt.Dimension(32767, 200));
        RegistrationContentBottomPanel.setMinimumSize(new java.awt.Dimension(0, 200));
        RegistrationContentBottomPanel.setPreferredSize(new java.awt.Dimension(500, 200));
        RegistrationContentBottomPanel.setBackground(new java.awt.Color(140, 160, 210));

        RegistrationSelectionContentPanel.setLayout(new java.awt.BorderLayout());
        RegistrationSelectionContentPanel.setBackground(new java.awt.Color(140, 160, 210));
        RegistrationSelectionContentPanel.setForeground(new java.awt.Color(255, 255, 255));

	  lUserInterfaceMenuItem = new SBTab("User Interface",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
    	  //lActionsMenuItem = new SBTab("Actions",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
	  lUserInterfaceMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lUserInterfaceMenuItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lUserInterfaceMenuItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lUserInterfaceMenuItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lUserInterfaceMenuItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lUserInterfaceMenuItemMouseReleased(evt);
            }
        });

        RegistrationUIMenuButtonPanel.add(lUserInterfaceMenuItem);
/*
	  lActionsMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lActionsMenuItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lActionsMenuItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lActionsMenuItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lActionsMenuItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lActionsMenuItemMouseReleased(evt);
            }
        });

        RegistrationUIMenuButtonPanel.add(lActionsMenuItem);
*/
/**********************/

        LeftMenuPanelBottomPanel.add(RegistrationUIMenuButtonPanel, java.awt.BorderLayout.NORTH);
        LeftMenuPanelBottomPanel.add(RegistrationUIMenuButtonPanelBottom, java.awt.BorderLayout.CENTER);
        RegistrationMenuPanel.add(LeftMenuPanelBottomPanel, java.awt.BorderLayout.CENTER);
        RegistrationMenuPanel.add(RegistrationUIMenuButtonPanelTop, java.awt.BorderLayout.NORTH);
        RegistrationUIMenuButtonPanelBottom.setBackground(new java.awt.Color(140, 160, 210));
        RegistrationUIMenuButtonPanelBottom.setForeground(new java.awt.Color(255, 255, 255));
        RegistrationMenuLeftSpaceFiller.setBackground(new java.awt.Color(140, 160, 210));
        RegistrationMenuLeftSpaceFiller.setMinimumSize(new java.awt.Dimension(1, 10));
        RegistrationMenuLeftSpaceFiller.setPreferredSize(new java.awt.Dimension(1, 10));
        RegistrationMenuPanel.add(RegistrationMenuLeftSpaceFiller, java.awt.BorderLayout.WEST);
        RegistrationContentBottomPanel.add(RegistrationMenuPanel, java.awt.BorderLayout.WEST);
        RegistrationContentBottomPanel.add(RegistrationMenuPanel, java.awt.BorderLayout.WEST);
        RegistrationContentBottomPanel.add(RegistrationSelectionContentPanel, java.awt.BorderLayout.CENTER);
/**********************/
///////////////////////////
// add header here
	  contentPanel = new JPanel();
        contentPanel.setLayout(new java.awt.BorderLayout());
        contentPanel.add(RegistrationMenuPanel, java.awt.BorderLayout.WEST);
        contentPanel.add(RegistrationSelectionContentPanel, java.awt.BorderLayout.CENTER);
	  contentProjectPanel = new ContentAreaHeaderPanel3(contentPanel, sbTabWidth, theCurrentMenuColor, sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,theSelectedMenuColor);
	add(contentProjectPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

  public void getDataUpdate()
  {
	try
	{
		TheContentPanelReference.getDataUpdate();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
  }       
 
    private void lUserInterfaceMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lUserInterfaceMenuItemMouseReleased
	 setMouseReleasedMenuLabel(lUserInterfaceMenuItem);
    }//GEN-LAST:event_lUserInterfaceMenuItemMouseReleased

    private void lUserInterfaceMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lUserInterfaceMenuItemMousePressed
        setMousePressedMenuLabel(lUserInterfaceMenuItem);
    }//GEN-LAST:event_lUserInterfaceMenuItemMousePressed

    private void lUserInterfaceMenuItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lUserInterfaceMenuItemMouseExited
        setMouseExitedMenuLabel(lUserInterfaceMenuItem);
    }//GEN-LAST:event_lUserInterfaceMenuItemMouseExited

    private void lUserInterfaceMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lUserInterfaceMenuItemMouseEntered
        setMouseEnteredMenuLabel(lUserInterfaceMenuItem);
    }//GEN-LAST:event_lUserInterfaceMenuItemMouseEntered

    private void lUserInterfaceMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lUserInterfaceMenuItemMouseClicked
	((EADesignerRegistrationPanel)getParentComponent()).setRegistrationCodeFailedUserInterfacePropertyPanel();
 	setSelectedMenuItem(lUserInterfaceMenuItem);
    }//GEN-LAST:event_lUserInterfaceMenuItemMouseClicked

/*    private void lActionsMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lActionsMenuItemMouseReleased
	 setMouseReleasedMenuLabel(lActionsMenuItem);
    }//GEN-LAST:event_lActionsMenuItemMouseReleased

    private void lActionsMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lActionsMenuItemMousePressed
        setMousePressedMenuLabel(lActionsMenuItem);
    }//GEN-LAST:event_lActionsMenuItemMousePressed

    private void lActionsMenuItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lActionsMenuItemMouseExited
        setMouseExitedMenuLabel(lActionsMenuItem);
    }//GEN-LAST:event_lActionsMenuItemMouseExited

    private void lActionsMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lActionsMenuItemMouseEntered
        setMouseEnteredMenuLabel(lActionsMenuItem);
    }//GEN-LAST:event_lActionsMenuItemMouseEntered

    private void lActionsMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lActionsMenuItemMouseClicked
	((EADesignerRegistrationPanel)getParentComponent()).setRegistrationCodeActionsPropertyPanel();
 	setSelectedMenuItem(lActionsMenuItem);
    }//GEN-LAST:event_lActionsMenuItemMouseClicked
*/

 private Color theCurrentMenuColor = new Color(140,160,210);
 private Color theSelectedMenuColor = new Color(176, 191, 240);
 private Color theTextMenuColor = new Color(255, 255, 255);
 private boolean pressedSelected = false;
 private Icon arrowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow.gif"));
 private Icon arrowSelectedIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_selected.gif"));
 private Icon arrowMouseOverIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_mouseover.gif"));  
 private int iconTextGap = 5;
 private int sbTabMenuTopSpaceFiller = 15;
 private int sbTabLeftMargin = 5;
 private int sbTabWidth = 120;
 private int sbTabHeight = 25;
 private int sbTabGroupHeight = 25;
 private boolean sbTabIsOpaque=true;
 private Color sbTabTopBorderColor = new Color(198, 226, 253);
 private Color sbTabBottomBorderColor = new Color(100, 114, 149);
 private Color sbTabTopSelectedBorderColor = new Color(123,132,167);
 private Color sbTabBottomSelectedBorderColor = new Color(251, 255, 255);
 private Color sbTabRightInnerBorderColor = new java.awt.Color(84,94,118);
 private Color sbTabRightOuterBorderColor = new java.awt.Color(123,132,167);
 private Font sbTabFont = new java.awt.Font("Arial", 1, 12);
 private SBTab TheMenuLabelReference = new SBTab(null,sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
 private SBTab thePressedLabelReference = null;
 private SBTab theEnteredLabelReference = null;

 private void setSelectedMenuItem(SBTab theMenuLabel)
  {
    try
    {
        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
	  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
        TheMenuLabelReference.setTheIcon(arrowIcon);
        theMenuLabel.setBackgroundColor(theSelectedMenuColor);
        theMenuLabel.setTheIcon(arrowSelectedIcon);
	  theMenuLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        TheMenuLabelReference = theMenuLabel;
/*
                        try
                        {
                            setContentPanel((EAPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance());
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }   
*/
    }
    catch(Exception e)
    {
	e.printStackTrace();
    }
  }    
 
 boolean isEntered = false;
 private void setMouseEnteredMenuLabel(SBTab theEnteredLabel)
 {
    isEntered = true;
    try
    {
        theEnteredLabelReference = theEnteredLabel;
        if(theEnteredLabel.equals(TheMenuLabelReference)==false)
        {
            theEnteredLabel.setTheIcon(arrowMouseOverIcon);
            if(pressedSelected==true)
            {
                
                TheMenuLabelReference.setForegroundColor(theTextMenuColor);
            }
        }
        else
        {
            if(pressedSelected==true)
            {
                TheMenuLabelReference.setForegroundColor(theSelectedMenuColor);    
            }
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }     
 }
 private void setMouseExitedMenuLabel(SBTab theExitedLabel)
 {
    isEntered = false;
    try
    {
        if(theExitedLabel.equals(TheMenuLabelReference)==false)
        {
            theExitedLabel.setTheIcon(arrowIcon);   
        }
        else
        {
            theEnteredLabelReference.setForegroundColor(theTextMenuColor);           
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }

  private void setMousePressedMenuLabel(SBTab thePressedLabel)
 {
    try
    {
        thePressedLabelReference = thePressedLabel;
        if(thePressedLabel.equals(TheMenuLabelReference)==false)
        {
            thePressedLabel.setBackgroundColor(theSelectedMenuColor); 
	  	thePressedLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        }
        else
        {
            pressedSelected=true; 
            thePressedLabel.setForegroundColor(theSelectedMenuColor);
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }
 
 private void setMouseReleasedMenuLabel(SBTab theReleasedLabel)
 {
    try
    {
        pressedSelected = false;
        if(theEnteredLabelReference.equals(thePressedLabelReference)==false || isEntered == false)
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==false)
            {
                thePressedLabelReference.setBackgroundColor(theCurrentMenuColor);
		    thePressedLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
            }
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }           
        }
        else
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }
		else
		{
		    try
		    {
 		        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
			  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
 		        TheMenuLabelReference.setTheIcon(arrowIcon);
 		        thePressedLabelReference.setTheIcon(arrowSelectedIcon);
 		        TheMenuLabelReference = thePressedLabelReference;
/*
                        try
                        {
                            setContentPanel((EAPanel)Class.forName(getSidebarComponentID(theReleasedLabel.getComponentLocalizationID())).newInstance());
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }   
*/ 
		    }
		    catch(Exception e)
		    {
		        System.out.println(e);
		    }
		}
        }
        
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 } 
    private static synchronized Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        try
        {
            while(textArrayString.indexOf(",")!=-1)
            {
                tempString = textArrayString.substring(0,textArrayString.indexOf(","));
                textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
                aryList.add(tempString);
            }
            aryList.add(textArrayString);
            aryList.trimToSize();
        }
        catch(NullPointerException e)
        {
         
        }

        return aryList.toArray();
    }  

private synchronized String getSidebarComponentID(String compRefID)
{
	try
	{
		return (String)sbMap.get(compRefID);
	}
	catch(Exception e)
	{
	e.printStackTrace();
	}
	return "";
}

private synchronized void initSidebar()
{
try
{
	Object[] sbUIStrings = getStringArraysFromString(DesignerRuleBuilder.get("sbRegistrationUIStrings"));
	Object[] sbUIActions = getStringArraysFromString(DesignerRuleBuilder.get("sbRegistrationUIActionPanels"));
//sbMap

                    for(int i = 0;i<sbUIStrings.length;i++)
                    {
                        try
				{
					sbMap.put((String)sbUIStrings[i],(String)sbUIActions[i]);
					//LeftMenuButtonPanel.add(new SBTab((String)sbUIStrings[i],sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque));
				}
				catch(Exception e)
				{
					sbMap.put((String)sbUIStrings[i],"");
				} 
                    }
}
catch(Exception e)
{
	e.printStackTrace();
}
}
   
public void setUISelected()
{
	setSelectedMenuItem(lUserInterfaceMenuItem);
}
/*
public void setActionSelected()
{
	setSelectedMenuItem(lActionsMenuItem);
}
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private SBSpacer RegistrationUIMenuButtonPanelBottom;
    private SBTab RegistrationUIMenuButtonPanelTop;
    private SBTab lUserInterfaceMenuItem;
    private ContentAreaHeaderPanel3 contentProjectPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel RegistrationUIMenuButtonPanel;
    private javax.swing.JPanel RegistrationMenuContentPanel;
    private javax.swing.JPanel RegistrationMenuLeftSpaceFiller;
    private javax.swing.JPanel RegistrationMenuPanel;
    private javax.swing.JPanel RegistrationSelectionContentPanel;
    private javax.swing.JPanel LeftMenuPanelBottomPanel;
    private javax.swing.JPanel RegistrationContentBottomPanel;
/////////////////////////// 
   // End of variables declaration//GEN-END:variables
    
}
