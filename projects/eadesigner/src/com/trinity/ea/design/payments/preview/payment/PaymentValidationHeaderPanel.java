/*
 * PaymentValidationHeaderPanel.java
 *
 * Created on October 27, 2003, 11:32 PM
 */

package com.trinity.ea.design.payments.preview.payment;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import com.trinity.ea.util.*;
import com.trinity.ea.design.common.file.ProjectManager;
import java.io.*;
import java.util.ArrayList;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;  
import java.net.URL;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class PaymentValidationHeaderPanel extends javax.swing.JPanel {
    private int imageWidth = 94;
    /** Creates new form PaymentValidationHeaderPanel */
    public PaymentValidationHeaderPanel() {
	updateUIExpressionDefines();
        initComponents();
	  if(ProjectManager.get("paymentBackgroundColor")!=null)
	  {
		if(ProjectManager.get("paymentBackgroundColor").equalsIgnoreCase("")==false)
		{
			Object[] tmpArray = getStringArraysFromString(ProjectManager.get("paymentBackgroundColor"));
			setBackgroundColor(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
		}
		else
		{
	  		taValidationResponse.setBackground(getBackground());
		}
	  }
	  else
	  {
	  	taValidationResponse.setBackground(getBackground());
	  }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        SoftwareLogo = new javax.swing.JLabel();
        taValidationResponse = new javax.swing.JTextArea();
        setLayout(null);


      if(ProjectManager.get("paymentFormLeftTopImagePath")!=null)
      {
      	if(ProjectManager.get("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
			try
			{
        			SoftwareLogo.setIcon(new javax.swing.ImageIcon(new URL(ProjectManager.get("paymentFormLeftTopImagePath"))));
			}
			catch(Exception e)
			{

			}
        		add(SoftwareLogo);
			if(ProjectManager.get("paymentFormLeftTopImageWidth")!=null)
			{
				if(ProjectManager.get("paymentFormLeftTopImageWidth").equalsIgnoreCase("")==false)
				{
					try
					{
						imageWidth = new Integer(ProjectManager.get("paymentFormLeftTopImageWidth")).intValue();
						SoftwareLogo.setBounds(15, 8, imageWidth, 94);
					}
					catch(Exception e)
					{
						SoftwareLogo.setBounds(15, 8, 94, 94);
					}
				}
				else
				{
					SoftwareLogo.setBounds(15, 8, 94, 94);
				}
			}	
			else
			{		
        			SoftwareLogo.setBounds(15, 8, 94, 94);
			}
		}
	}

        

	  if(ProjectManager.get("paymentSuccessLabelHeaderTextFont")!=null)
	  {
		if(ProjectManager.get("paymentSuccessLabelHeaderTextFont").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(ProjectManager.get("paymentSuccessLabelHeaderTextFont"));
				taValidationResponse.setFont(new java.awt.Font((String)tmpArray[0],new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			e.printStackTrace();
			}
		}
	  }
	try
	{
      	if(ProjectManager.get("paymentSuccessResponsePanelHeaderDescription")!=null)
      	{
        		taValidationResponse.setText(replaceUIExpressions(ProjectManager.get("paymentSuccessResponsePanelHeaderDescription")));
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	  if(ProjectManager.get("paymentSuccessLabelHeaderTextColor")!=null)
	  {
		if(ProjectManager.get("paymentSuccessLabelHeaderTextColor").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(ProjectManager.get("paymentSuccessLabelHeaderTextColor"));
				taValidationResponse.setForeground(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			e.printStackTrace();
			}
		}
	  }
	  taValidationResponse.setBackground(getBackground());
	  taValidationResponse.setBorder(null);
	  taValidationResponse.setEditable(false);
	  taValidationResponse.setSelectedTextColor(taValidationResponse.getForeground());
        taValidationResponse.setLineWrap(true);
        taValidationResponse.setWrapStyleWord(true);
        add(taValidationResponse);
	  if(imageWidth>94)
	  {
        	taValidationResponse.setBounds(imageWidth + 23, 11, 489 - (imageWidth + 23), 85);
	  }
	  else
	  {
        	taValidationResponse.setBounds(imageWidth + 23, 11, 374, 85);
	  }


    }//GEN-END:initComponents

     private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    } 
    private void setBackgroundColor(Color BGColor)
    {
        setBackground(BGColor);
        SoftwareLogo.setBackground(BGColor);
        taValidationResponse.setBackground(BGColor);
	  taValidationResponse.setSelectionColor(BGColor);
    }

    private String replaceUIExpressions(String UIStringToReplaceExpressions)
    {
        try
        {
            for(int i = 0;i<updateUIExpressions.length;i++)
            {
			if(((String)updateUIExpressions[i]).equalsIgnoreCase("product_version")==false)
			{
                    UIStringToReplaceExpressions = UIStringToReplaceExpressions.replaceAll("(?i)" + (String)updateUIExpressions[i],ProjectManager.get((String)updateUIExpressions[i]));
			}
			else
			{
			  //put replace version string code here.
			  Object[] theVersionArray = getStringArraysFromString(ProjectManager.get((String)updateUIExpressions[i]));
			  int tempInt = 1;
			  String strVersionString = "";
  			  for(int a = 0;a<theVersionArray.length;a++)
			  {
				if(0<a)
				{
					try
					{
						if(Integer.parseInt((String)theVersionArray[a])!=0)
						{
							tempInt = a;
						}
					}
					catch(Exception e)
					{
						//The String likely was not a number and threw an exception
					}
				}
			  }
			  tempInt = tempInt + 1;
  			  for(int a = 0;a<tempInt;a++)
			  {
				if(a!=0)
				{
					strVersionString = strVersionString + "." + (String)theVersionArray[a];
				}
				else
				{
					strVersionString = (String)theVersionArray[a];
				}
			  }
                    UIStringToReplaceExpressions = UIStringToReplaceExpressions.replaceAll("(?i)" + (String)updateUIExpressions[i],strVersionString);
			}
            }
            return UIStringToReplaceExpressions;
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return null;
    }

    Object[] updateUIExpressions = new Object[9];
    private void updateUIExpressionDefines()
    {
        try
        {
            ArrayList theExpressionDefinesArrayList = new ArrayList();
            if(ProjectManager.get("product_vendor_name")!=null)
            {
                theExpressionDefinesArrayList.add("product_vendor_name");
            }
            if(ProjectManager.get("product_name")!=null)
            {
                theExpressionDefinesArrayList.add("product_name");
            }
            if(ProjectManager.get("product_version")!=null)
            {
                theExpressionDefinesArrayList.add("product_version");
            }
            if(ProjectManager.get("product_info_url")!=null)
            {
                theExpressionDefinesArrayList.add("product_info_url");
            }
            if(ProjectManager.get("product_url")!=null)
            {
                theExpressionDefinesArrayList.add("product_url");
            }
            if(ProjectManager.get("product_privacy_policy_email")!=null)
            {
                theExpressionDefinesArrayList.add("product_privacy_policy_email");
            }
            if(ProjectManager.get("product_copyright")!=null)
            {
                theExpressionDefinesArrayList.add("product_copyright");
            }     
            if(ProjectManager.get("product_price")!=null)
            {
                theExpressionDefinesArrayList.add("product_price");
            }
            if(ProjectManager.get("product_purchase_support_email")!=null)
            {
                theExpressionDefinesArrayList.add("product_purchase_support_email");
            }
            theExpressionDefinesArrayList.trimToSize();
            updateUIExpressions = theExpressionDefinesArrayList.toArray();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }   

    public void paint(Graphics g)
    {
	Graphics2D g2 = (Graphics2D) g;
	g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT);
	super.paint(g);
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SoftwareLogo;
    private javax.swing.JTextArea taValidationResponse;
    // End of variables declaration//GEN-END:variables
    
}
