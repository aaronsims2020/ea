/*
 * PaymentProcessingDialog.java
 *
 * Created on October 27, 2003, 11:22 PM
 */

package com.trinity.ea.design.payments.preview;
import com.trinity.ea.design.payments.preview.SecureOrderInformationPanel;
import com.trinity.ea.design.payments.preview.CustomerBillingInformationPanel;
import com.trinity.ea.design.payments.preview.SecondaryPaymentMethodPanel;
import com.trinity.ea.design.common.file.ProjectManager;
import com.trinity.ea.design.common.util.URLToByteArray;
import java.io.ByteArrayInputStream;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import com.trinity.ea.design.payments.preview.gui.swing.ImageBackgroundBorder;
import javax.swing.border.Border;
import java.net.URL;
import java.net.MalformedURLException;
import javax.imageio.*;
import java.util.ArrayList;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;  
import java.net.URL;
import java.io.File;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class PaymentProcessingDialog extends javax.swing.JDialog {
    private int btnHeight = 34;
    /** Creates new form PaymentProcessingDialog */
    public PaymentProcessingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
	updateUIExpressionDefines();
        initComponents();
        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = getSize().width;
        int h = getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        setResizable(false);
        // Move the window
        setLocation(x, y);
         try
        {
            setTitle(replaceUIExpressions(ProjectManager.get("paymentWindowTitle")));
	  if(ProjectManager.get("paymentBackgroundColor")!=null)
	  {
		if(ProjectManager.get("paymentBackgroundColor").equalsIgnoreCase("")==false)
		{
			Object[] tmpArray = getStringArraysFromString(ProjectManager.get("paymentBackgroundColor"));
			CustomerBillingInformationPanel1.setBackground(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
		}
	  }
        }
        catch(Exception e)
{

}   
   	try
	{
	  	  //applyComponentOrientation(ComponentOrientation.getOrientation(ProjectManager.getLocale()));
	}
	catch(Exception e)
	{
		e.printStackTrace();
	} 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        SecureOrderScrollPane = new javax.swing.JScrollPane();
        RootPanel = new javax.swing.JPanel();
        CustomerBillingInformationPanel1 = new com.trinity.ea.design.payments.preview.CustomerBillingInformationPanel();
        SecureOrderInformationPanel1 = new com.trinity.ea.design.payments.preview.SecureOrderInformationPanel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Secure Order");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        //RootPanel.setLayout(new java.awt.BorderLayout());
	  RootPanel.setLayout(new javax.swing.BoxLayout(RootPanel, javax.swing.BoxLayout.Y_AXIS));

        CustomerBillingInformationPanel1.setLayout(null);
if(ProjectManager.get("paymentPhoneInputEnabled")!=null)
{
	if(ProjectManager.get("paymentPhoneInputEnabled").equalsIgnoreCase("true")==true)
	{
        CustomerBillingInformationPanel1.setPreferredSize(new java.awt.Dimension(555, 440));
	}
	else
	{
          CustomerBillingInformationPanel1.setPreferredSize(new java.awt.Dimension(555, 410));
	}
}
else
{
    CustomerBillingInformationPanel1.setPreferredSize(new java.awt.Dimension(555, 410));
}

	try
	{ 
if(ProjectManager.get("paymentFormInputBackgroundImagePath")!=null)
{
 	if(ProjectManager.get("paymentFormInputBackgroundImagePath").equalsIgnoreCase("")==false)
	{
if(ProjectManager.get("paymentPhoneInputEnabled").equalsIgnoreCase("true")==true && ProjectManager.get("paymentFormInputBackgroundImagePath").equalsIgnoreCase(new URL(new File(System.getProperty("user.dir")).toURL().toString() + "/images/frame.png").toString())==true)
{
	try
	{
        final URL bgURL= new URL(new File(System.getProperty("user.dir")).toURL().toString() + "/images/framepho.png");
        final Border bkgrnd = new ImageBackgroundBorder(ImageIO.read(new ByteArrayInputStream(URLToByteArray.getURLByteArray(bgURL))));
	  if(bkgrnd!=null)
	  {
        Runnable r = new Runnable() {
            public void run() {
                		CustomerBillingInformationPanel1.setBorder(bkgrnd);
                		CustomerBillingInformationPanel1.repaint();
            }
        };
        SwingUtilities.invokeLater(r);
	  }
	}
	catch(Exception e)
	{

	}
}
else
{
	try
	{
        final URL bgURL= new URL(ProjectManager.get("paymentFormInputBackgroundImagePath"));
        final Border bkgrnd = new ImageBackgroundBorder(ImageIO.read(new ByteArrayInputStream(URLToByteArray.getURLByteArray(bgURL))));
	  if(bkgrnd!=null)
	  {
        Runnable r = new Runnable() {
            public void run() {
			try
			{
                		CustomerBillingInformationPanel1.setBorder(bkgrnd);
                		CustomerBillingInformationPanel1.repaint();
			}
			catch(Exception e)
			{

			}
            }
        };
        SwingUtilities.invokeLater(r);
	  }
	}
	catch(Exception e)
	{

	}
}
}
}
	}
	catch(Exception e)
	{
		//e.printStackTrace();
	}
        SecureOrderInformationPanel1.setLayout(null);

      if(ProjectManager.get("paymentFormLeftTopImagePath")!=null)
      {
      	if(ProjectManager.get("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
        		SecureOrderInformationPanel1.setPreferredSize(new java.awt.Dimension(555, 110));
		}
		else
		{
        		SecureOrderInformationPanel1.setPreferredSize(new java.awt.Dimension(555, 90));

		}
	}
	else
	{
        	SecureOrderInformationPanel1.setPreferredSize(new java.awt.Dimension(555, 90));
	}
        //RootPanel.add(SecureOrderInformationPanel1, java.awt.BorderLayout.NORTH);
        RootPanel.add(SecureOrderInformationPanel1);
	  RootPanel.add(CustomerBillingInformationPanel1);
	  if(ProjectManager.get("secondaryPaymentMethodEnabled")!=null)
	  {
		if(ProjectManager.get("secondaryPaymentMethodEnabled").equalsIgnoreCase("true")==true)
		{
			SecondaryPaymentMethodPanel1 = new SecondaryPaymentMethodPanel();
        		SecondaryPaymentMethodPanel1.setLayout(null);

	  if(ProjectManager.get("paymentImgSecondaryButtonHeight")!=null)
	  {
	  	if(ProjectManager.get("paymentImgSecondaryButtonHeight").equalsIgnoreCase("")==false)
	  	{
			try
			{
				btnHeight = new Integer(ProjectManager.get("paymentImgSecondaryButtonHeight")).intValue() + 7;
			}
			catch(Exception eee)
			{
				//eee.printStackTrace();
				btnHeight = 34;
			}
		}
		else
		{
			btnHeight = 34;
		}
	  }
	  else
	  {
		btnHeight = 34;
	  }	
        		SecondaryPaymentMethodPanel1.setPreferredSize(new java.awt.Dimension(555, btnHeight));
			try
			{ 
if(ProjectManager.get("paymentImgSecondaryButtonFace")!=null)
{
 	if(ProjectManager.get("paymentImgSecondaryButtonFace").equalsIgnoreCase("")==false)
	{
/*
       			final Border bkgrnd = new ImageBackgroundBorder(ImageIO.read(new URL(ProjectManager.get("paymentImgSecondaryButtonFace"))));
        			Runnable r = new Runnable() {
            		public void run() {
                		SecondaryPaymentMethodPanel1.setBorder(bkgrnd);
                		SecondaryPaymentMethodPanel1.repaint();
            		}
        			};
        			SwingUtilities.invokeLater(r);
*/
	}
}
				RootPanel.add(SecondaryPaymentMethodPanel1);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	  }

        SecureOrderScrollPane.setViewportView(RootPanel);

        getContentPane().add(SecureOrderScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
				try
				{
					UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
				}
				catch(Exception e)
				{

				}
    }//GEN-LAST:event_closeDialog
 
     private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    } 
   
    private String replaceUIExpressions(String UIStringToReplaceExpressions)
    {
        try
        {
            for(int i = 0;i<updateUIExpressions.length;i++)
            {
			if(((String)updateUIExpressions[i]).equalsIgnoreCase("product_version")==false)
			{
                    UIStringToReplaceExpressions = UIStringToReplaceExpressions.replaceAll("(?i)" + (String)updateUIExpressions[i],ProjectManager.get((String)updateUIExpressions[i]));
			}
			else
			{
			  //put replace version string code here.
			  Object[] theVersionArray = getStringArraysFromString(ProjectManager.get((String)updateUIExpressions[i]));
			  int tempInt = 1;
			  String strVersionString = "";
  			  for(int a = 0;a<theVersionArray.length;a++)
			  {
				if(0<a)
				{
					try
					{
						if(Integer.parseInt((String)theVersionArray[a])!=0)
						{
							tempInt = a;
						}
					}
					catch(Exception e)
					{
						//The String likely was not a number and threw an exception
					}
				}
			  }
			  tempInt = tempInt + 1;
  			  for(int a = 0;a<tempInt;a++)
			  {
				if(a!=0)
				{
					strVersionString = strVersionString + "." + (String)theVersionArray[a];
				}
				else
				{
					strVersionString = (String)theVersionArray[a];
				}
			  }
                    UIStringToReplaceExpressions = UIStringToReplaceExpressions.replaceAll("(?i)" + (String)updateUIExpressions[i],strVersionString);
			}
            }
            return UIStringToReplaceExpressions;
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return null;
    }

    Object[] updateUIExpressions = new Object[9];
    private void updateUIExpressionDefines()
    {
        try
        {
            ArrayList theExpressionDefinesArrayList = new ArrayList();
            if(ProjectManager.get("product_vendor_name")!=null)
            {
                theExpressionDefinesArrayList.add("product_vendor_name");
            }
            if(ProjectManager.get("product_name")!=null)
            {
                theExpressionDefinesArrayList.add("product_name");
            }
            if(ProjectManager.get("product_version")!=null)
            {
                theExpressionDefinesArrayList.add("product_version");
            }
            if(ProjectManager.get("product_info_url")!=null)
            {
                theExpressionDefinesArrayList.add("product_info_url");
            }
            if(ProjectManager.get("product_url")!=null)
            {
                theExpressionDefinesArrayList.add("product_url");
            }
            if(ProjectManager.get("product_privacy_policy_email")!=null)
            {
                theExpressionDefinesArrayList.add("product_privacy_policy_email");
            }
            if(ProjectManager.get("product_copyright")!=null)
            {
                theExpressionDefinesArrayList.add("product_copyright");
            }     
            if(ProjectManager.get("product_price")!=null)
            {
                theExpressionDefinesArrayList.add("product_price");
            }
            if(ProjectManager.get("product_purchase_support_email")!=null)
            {
                theExpressionDefinesArrayList.add("product_purchase_support_email");
            }
            theExpressionDefinesArrayList.trimToSize();
            updateUIExpressions = theExpressionDefinesArrayList.toArray();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }     

    public void paint(Graphics g)
    {
	Graphics2D g2 = (Graphics2D) g;
	g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
	super.paint(g);
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.trinity.ea.design.payments.preview.CustomerBillingInformationPanel CustomerBillingInformationPanel1;
    private com.trinity.ea.design.payments.preview.SecondaryPaymentMethodPanel SecondaryPaymentMethodPanel1;
    private javax.swing.JPanel RootPanel;
    private com.trinity.ea.design.payments.preview.SecureOrderInformationPanel SecureOrderInformationPanel1;
    private javax.swing.JScrollPane SecureOrderScrollPane;
    // End of variables declaration//GEN-END:variables
}
