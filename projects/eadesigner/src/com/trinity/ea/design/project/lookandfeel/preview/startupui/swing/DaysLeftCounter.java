/*
 * DaysLeftCounter.java
 *
 * Created on June 2, 2004, 11:19 PM
 */
 
package com.trinity.ea.design.project.lookandfeel.preview.startupui.swing;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;  
import javax.swing.*;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2005 Trinity Software. All rights reserved.
 */
public class DaysLeftCounter extends javax.swing.JPanel {
    
    /** Creates new form DaysLeftCounter */
    public DaysLeftCounter(int progressBarCellSpacing) {
	  UIManager.put("ProgressBar.cellSpacing", new Integer(progressBarCellSpacing)); 
        initComponents();
    }
    public DaysLeftCounter() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        TopPanel = new javax.swing.JPanel();
        Filler2 = new javax.swing.JLabel();
        TextLabel = new javax.swing.JLabel();
        Filler3 = new javax.swing.JLabel();
        ContentPanel = new javax.swing.JPanel();
        Filler4 = new javax.swing.JLabel();
        TimeLeftProgressBarContentPanel = new javax.swing.JPanel();
        TimeLeftProgressBar = new javax.swing.JProgressBar();
        Filler5 = new javax.swing.JLabel();
        BottomFiller = new javax.swing.JPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        setBackground(new java.awt.Color(0, 0, 0));
        setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 1, 0, 0), new java.awt.Color(162, 200, 169)));
        setMaximumSize(new java.awt.Dimension(32777, 44));
        setMinimumSize(new java.awt.Dimension(20, 44));
        setPreferredSize(new java.awt.Dimension(160, 44));
        TopPanel.setLayout(new java.awt.BorderLayout());

        TopPanel.setBackground(new java.awt.Color(0, 0, 0));
        TopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 22));
        TopPanel.setMinimumSize(new java.awt.Dimension(5, 22));
        TopPanel.setPreferredSize(new java.awt.Dimension(5, 22));
        Filler2.setMaximumSize(new java.awt.Dimension(3, 15));
        Filler2.setMinimumSize(new java.awt.Dimension(3, 15));
        Filler2.setPreferredSize(new java.awt.Dimension(3, 15));
        TopPanel.add(Filler2, java.awt.BorderLayout.WEST);

        TextLabel.setFont(new java.awt.Font("Arial", 1, 12));
        TextLabel.setForeground(new java.awt.Color(255, 255, 255));
        TextLabel.setText("Trial Expired");
        TextLabel.setIconTextGap(0);
        TextLabel.setMaximumSize(new java.awt.Dimension(32767, 22));
        TextLabel.setMinimumSize(new java.awt.Dimension(5, 22));
        TextLabel.setPreferredSize(new java.awt.Dimension(5, 22));
        TopPanel.add(TextLabel, java.awt.BorderLayout.CENTER);

        Filler3.setMaximumSize(new java.awt.Dimension(3, 15));
        Filler3.setMinimumSize(new java.awt.Dimension(3, 15));
        Filler3.setPreferredSize(new java.awt.Dimension(3, 15));
        TopPanel.add(Filler3, java.awt.BorderLayout.EAST);

        add(TopPanel);

        ContentPanel.setLayout(new javax.swing.BoxLayout(ContentPanel, javax.swing.BoxLayout.X_AXIS));

        ContentPanel.setBackground(new java.awt.Color(0, 0, 0));
        ContentPanel.setMaximumSize(new java.awt.Dimension(32777, 18));
        ContentPanel.setMinimumSize(new java.awt.Dimension(20, 18));
        ContentPanel.setPreferredSize(new java.awt.Dimension(160, 18));
        Filler4.setMaximumSize(new java.awt.Dimension(3, 15));
        Filler4.setMinimumSize(new java.awt.Dimension(3, 15));
        Filler4.setPreferredSize(new java.awt.Dimension(3, 15));
        ContentPanel.add(Filler4);

        TimeLeftProgressBarContentPanel.setLayout(new java.awt.BorderLayout());

        TimeLeftProgressBarContentPanel.setBackground(new java.awt.Color(0, 0, 0));
        TimeLeftProgressBarContentPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 0, 0), new java.awt.Color(125, 125, 125)), new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 1, 1), new java.awt.Color(255, 255, 255))));
        TimeLeftProgressBarContentPanel.setMaximumSize(new java.awt.Dimension(32777, 16));
        TimeLeftProgressBarContentPanel.setMinimumSize(new java.awt.Dimension(20, 16));
        TimeLeftProgressBarContentPanel.setPreferredSize(new java.awt.Dimension(160, 16));
        TimeLeftProgressBar.setBackground(new java.awt.Color(0, 0, 0));
        TimeLeftProgressBar.setMaximum(30);
        TimeLeftProgressBar.setValue(15);
        TimeLeftProgressBar.setBorder(null);
        TimeLeftProgressBar.setBorderPainted(false);
        TimeLeftProgressBar.setMaximumSize(new java.awt.Dimension(32767, 18));
        TimeLeftProgressBar.setMinimumSize(new java.awt.Dimension(10, 18));
        TimeLeftProgressBar.setPreferredSize(new java.awt.Dimension(150, 18));
        TimeLeftProgressBar.setString("");
        TimeLeftProgressBarContentPanel.add(TimeLeftProgressBar, java.awt.BorderLayout.CENTER);

        ContentPanel.add(TimeLeftProgressBarContentPanel);

        Filler5.setMaximumSize(new java.awt.Dimension(3, 15));
        Filler5.setMinimumSize(new java.awt.Dimension(3, 15));
        Filler5.setPreferredSize(new java.awt.Dimension(3, 15));
        ContentPanel.add(Filler5);

        add(ContentPanel);

        BottomFiller.setLayout(new javax.swing.BoxLayout(BottomFiller, javax.swing.BoxLayout.X_AXIS));

        BottomFiller.setBackground(new java.awt.Color(0, 0, 0));
        BottomFiller.setMaximumSize(new java.awt.Dimension(32777, 5));
        BottomFiller.setMinimumSize(new java.awt.Dimension(15, 4));
        BottomFiller.setPreferredSize(new java.awt.Dimension(15, 5));
        add(BottomFiller);

    }//GEN-END:initComponents
    
    private Color BGColor = Color.black;
    public void setBackgroundColor(Color backgroundColor)
    {
         BGColor = backgroundColor;
         setBackground(backgroundColor);
         BottomFiller.setBackground(backgroundColor);
         Filler5.setBackground(backgroundColor);
         Filler4.setBackground(backgroundColor);
         Filler3.setBackground(backgroundColor);
         Filler2.setBackground(backgroundColor);        
         TopPanel.setBackground(backgroundColor);
         ContentPanel.setBackground(backgroundColor);
         TimeLeftProgressBarContentPanel.setBackground(backgroundColor);
         TimeLeftProgressBar.setBackground(backgroundColor);
         TextLabel.setBackground(backgroundColor);
         if(leftBorderEnabled==false)
         {
             setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 1, 0, 0), backgroundColor));
         }         
    }
    
    public void setTextColor(Color textColor)
    {
         TextLabel.setForeground(textColor);
    }
    
    public void setProgressBarColor(Color progressBarColor)
    {
         TimeLeftProgressBar.setForeground(progressBarColor);
    }

    public void setProgressBarBackgroundColor(Color progressBarBackgroundColor)
    {
         TimeLeftProgressBar.setBackground(progressBarBackgroundColor);
    }
    
    public void setProgressBarBorderColor(Color progressBarHighlightBorderColor, Color progressBarShadowBorderColor)
    {
        TimeLeftProgressBarContentPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 0, 0), progressBarHighlightBorderColor), new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 1, 1), progressBarShadowBorderColor)));
    }    
    
    boolean leftBorderEnabled = false;
    public void setComponentLeftBorderEnabled(boolean isEnabled)
    {
        leftBorderEnabled = isEnabled;
        if(leftBorderEnabled==true)
        {
		if(boolIsLeftToRight==true)
		{
            	setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 1, 0, 0), new java.awt.Color(162, 200, 169)));
		}
		else
		{
            	setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 0, 1), new java.awt.Color(162, 200, 169)));
		}
        }
        else
        {
            setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 1, 0, 0), BGColor));
        }
    }

    private Color componentLeftBorderColorRef = Color.white;
    public boolean setComponentLeftBorderColor(Color componentLeftBorderColor)
    {
	  componentLeftBorderColorRef=componentLeftBorderColor;
        if(leftBorderEnabled==true)
        {
		if(boolIsLeftToRight==true)
		{
            	setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 1, 0, 0), componentLeftBorderColor));
		}
		else
		{
            	setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 0, 1), componentLeftBorderColor));
		}
            return true;
        }      
        else
        {
            return false;
        }
    }

    public boolean setTextFont(String strFontName, int fontStyle, int fontSize)
    {
        try
        {
            TextLabel.setFont(new java.awt.Font(strFontName, fontStyle, fontSize));
            return true;
        }
        catch(Exception e)
        {
            e.printStackTrace(); 
            return false;
        }
    }
    
    public void setDaysLeftText(String daysLeftText)
    {
         TextLabel.setText(daysLeftText);        
    }
    
    public void setDaysLeft(long daysLeft, long totalDays)
    {
        try
        {
         TimeLeftProgressBar.setMaximum(new Long(totalDays).intValue());
         TimeLeftProgressBar.setValue(new Long(daysLeft).intValue());   
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    private boolean trialIsExpired = true;
    public void setIsExpired(boolean isExpired)
    {
        trialIsExpired = isExpired;
        if(isExpired==true)
        {
            setDaysLeft(0,0);
        }
    }
  
    public boolean getIsExpired()
    {
        return trialIsExpired;
    }  

    private boolean boolIsLeftToRight = true;
    public void setComponentOrientation(ComponentOrientation theOrientation)
    {
        TimeLeftProgressBar.setComponentOrientation(theOrientation);
        TextLabel.setComponentOrientation(theOrientation);
	  boolIsLeftToRight = theOrientation.isLeftToRight();
        if(leftBorderEnabled==true)
        {
            setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 0, 1), componentLeftBorderColorRef));
        }  
    }    

    public void setTimerIsVisible(boolean isVisible)
    {
        TimeLeftProgressBar.setVisible(isVisible);
        TextLabel.setVisible(isVisible);
        TimeLeftProgressBarContentPanel.setBorder(null);
        TimeLeftProgressBarContentPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 0, 0), getBackground()), new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 1, 1), getBackground())));
    }

    public void paint(Graphics g)
    {
	Graphics2D g2 = (Graphics2D) g;
	g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
	super.paint(g);
    } 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BottomFiller;
    private javax.swing.JPanel ContentPanel;
    private javax.swing.JLabel Filler2;
    private javax.swing.JLabel Filler3;
    private javax.swing.JLabel Filler4;
    private javax.swing.JLabel Filler5;
    private javax.swing.JLabel TextLabel;
    private javax.swing.JProgressBar TimeLeftProgressBar;
    private javax.swing.JPanel TimeLeftProgressBarContentPanel;
    private javax.swing.JPanel TopPanel;
    // End of variables declaration//GEN-END:variables
    
}
