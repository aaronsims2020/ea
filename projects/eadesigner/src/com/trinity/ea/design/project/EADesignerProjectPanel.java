/*
 * EADesignerProjectPanel.java
 *
 * Created on December 13, 2003, 1:17 AM
 */

package com.trinity.ea.design.project;
import com.trinity.ea.design.common.panel.EAPanel;
import com.trinity.ea.design.project.info.*;
import com.trinity.ea.design.project.locales.*;
import com.trinity.ea.design.project.lookandfeel.*;
import com.trinity.ea.design.project.rules.*;
import com.trinity.ea.design.EADesigner;
import java.awt.*;
import javax.swing.*;
import com.trinity.ea.design.common.sidebar.SBTab;
import com.trinity.ea.design.common.status.ProgressWindow;
import com.trinity.ea.design.common.sidebar.SBSpacer;
import com.trinity.ea.design.rules.builder.DesignerRuleBuilder;
import com.trinity.ea.design.common.borderline.ContentAreaHeaderPanel;
import java.awt.Font;
import java.util.HashMap;
import java.util.Collections;
import java.util.Map;
import java.util.ArrayList;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class EADesignerProjectPanel extends EAPanel {
Map sbMap = Collections.synchronizedMap(new HashMap());
    /** Creates new form EADesignerProjectPanel */
    public EADesignerProjectPanel() {
	//ProgressWindow progWindow = new ProgressWindow();
	//try
	//{
	 // progWindow.showStatus("Launching Project Designer", 1);
        initComponents();
	  initSidebar();
        setSelectedMenuItem(ProjectMenuLabelInfoButton);    
	//  progWindow.close();
	//}
	//catch(Exception e)
	//{
	//	e.printStackTrace();
	//	progWindow.close();
	//}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
	  contentPanel = new JPanel();
        ProjectMenuPanel = new javax.swing.JPanel();
        ProjectMenuButtonPanel = new javax.swing.JPanel();
        ProjectMenuLabelInfoButton = new SBTab("Info",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);

        ProjectMenuLabelLookAndFeelButton = new SBTab("Look & Feel",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);

        ProjectMenuLabelLocalesButton = new SBTab("Locales",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);

        //ProjectMenuLabelRulesButton = new SBTab("Rules",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);

        ProjectMenuButtonPanelTop = new SBTab(null,sbTabWidth, sbTabMenuTopSpaceFiller, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, null, iconTextGap, theCurrentMenuColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);

        LeftMenuControlAreaPanel = new SBSpacer(theCurrentMenuColor,sbTabTopBorderColor,theCurrentMenuColor,sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,sbTabIsOpaque);

        ProjectMenuButtonPanelBottom = new javax.swing.JPanel();
        ProjectMenuButtonPanelLeft = new javax.swing.JPanel();
        ProjectSelectionContentPanel = new javax.swing.JPanel();

        LeftMenuPanelBottomPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuPanel.setLayout(new java.awt.BorderLayout());

        ProjectMenuPanel.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuPanel.setForeground(new java.awt.Color(255, 255, 255));
        ProjectMenuPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 32767));
        ProjectMenuPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 10));
        ProjectMenuPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 10));
	  
	  LeftMenuControlAreaPanel.setLayout(new java.awt.BorderLayout()); 
        LeftMenuPanelBottomPanel.setLayout(new java.awt.BorderLayout());

        LeftMenuPanelBottomPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuPanelBottomPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuPanelBottomPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 100));
        LeftMenuPanelBottomPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 100));
        LeftMenuPanelBottomPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 100));


        ProjectMenuButtonPanel.setLayout(new javax.swing.BoxLayout(ProjectMenuButtonPanel, javax.swing.BoxLayout.Y_AXIS));

        ProjectMenuButtonPanel.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuButtonPanel.setForeground(new java.awt.Color(255, 255, 255));
        ProjectMenuButtonPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        ProjectMenuButtonPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        ProjectMenuButtonPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        ProjectMenuLabelInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelInfoButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelInfoButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelInfoButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelInfoButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelInfoButtonMouseEntered(evt);
            }
        });

        ProjectMenuButtonPanel.add(ProjectMenuLabelInfoButton);

        ProjectMenuLabelLookAndFeelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLookAndFeelButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLookAndFeelButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLookAndFeelButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLookAndFeelButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLookAndFeelButtonMouseEntered(evt);
            }
        });

        ProjectMenuButtonPanel.add(ProjectMenuLabelLookAndFeelButton);

        ProjectMenuLabelLocalesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLocalesButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLocalesButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLocalesButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLocalesButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelLocalesButtonMouseEntered(evt);
            }
        });

        ProjectMenuButtonPanel.add(ProjectMenuLabelLocalesButton);

       /* ProjectMenuLabelRulesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelRulesButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelRulesButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelRulesButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelRulesButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ProjectMenuLabelRulesButtonMouseEntered(evt);
            }
        });

        ProjectMenuButtonPanel.add(ProjectMenuLabelRulesButton);
 */
        LeftMenuPanelBottomPanel.add(ProjectMenuButtonPanel, java.awt.BorderLayout.NORTH);
        LeftMenuPanelBottomPanel.add(LeftMenuControlAreaPanel, java.awt.BorderLayout.CENTER);
//need to add button panel
        ProjectMenuPanel.add(LeftMenuPanelBottomPanel, java.awt.BorderLayout.CENTER);
        ProjectMenuPanel.add(ProjectMenuButtonPanelTop, java.awt.BorderLayout.NORTH);

        ProjectMenuButtonPanelBottom.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuButtonPanelBottom.setForeground(new java.awt.Color(255, 255, 255));
        //ProjectMenuPanel.add(ProjectMenuButtonPanelBottom, java.awt.BorderLayout.SOUTH);

        ProjectMenuButtonPanelLeft.setBackground(new java.awt.Color(100, 120, 170));
        ProjectMenuButtonPanelLeft.setMinimumSize(new java.awt.Dimension(1, 10));
        ProjectMenuButtonPanelLeft.setPreferredSize(new java.awt.Dimension(1, 10));
        ProjectMenuPanel.add(ProjectMenuButtonPanelLeft, java.awt.BorderLayout.WEST);

        

        ProjectSelectionContentPanel.setLayout(new java.awt.BorderLayout());

        ProjectSelectionContentPanel.setBackground(new java.awt.Color(140, 160, 210));
        ProjectSelectionContentPanel.setForeground(new java.awt.Color(255, 255, 255));
        

// add header here
        contentPanel.setLayout(new java.awt.BorderLayout());
        contentPanel.add(ProjectMenuPanel, java.awt.BorderLayout.WEST);
        contentPanel.add(ProjectSelectionContentPanel, java.awt.BorderLayout.CENTER);
	  contentProjectPanel = new ContentAreaHeaderPanel(contentPanel, sbTabWidth, theCurrentMenuColor, sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,theSelectedMenuColor);
	  add(contentProjectPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

   /* private void ProjectMenuLabelRulesButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelRulesButtonMouseReleased
        setMouseReleasedMenuLabel(ProjectMenuLabelRulesButton); 
    }//GEN-LAST:event_ProjectMenuLabelRulesButtonMouseReleased


    private void ProjectMenuLabelRulesButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelRulesButtonMousePressed
	  setMousePressedMenuLabel(ProjectMenuLabelRulesButton);
    }//GEN-LAST:event_ProjectMenuLabelRulesButtonMousePressed

    private void ProjectMenuLabelRulesButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelRulesButtonMouseExited
	  setMouseExitedMenuLabel(ProjectMenuLabelRulesButton);
    }//GEN-LAST:event_ProjectMenuLabelRulesButtonMouseExited

    private void ProjectMenuLabelRulesButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelRulesButtonMouseEntered
 	  setMouseEnteredMenuLabel(ProjectMenuLabelRulesButton);
    }//GEN-LAST:event_ProjectMenuLabelRulesButtonMouseEntered

    private void ProjectMenuLabelRulesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelRulesButtonMouseClicked
        setSelectedMenuItem(ProjectMenuLabelRulesButton);
    }//GEN-LAST:event_ProjectMenuLabelRulesButtonMouseClicked
*/

    private void ProjectMenuLabelLocalesButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLocalesButtonMouseReleased
        setMouseReleasedMenuLabel(ProjectMenuLabelLocalesButton); 
    }//GEN-LAST:event_ProjectMenuLabelLocalesButtonMouseReleased

    private void ProjectMenuLabelLocalesButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLocalesButtonMousePressed
	  setMousePressedMenuLabel(ProjectMenuLabelLocalesButton);
    }//GEN-LAST:event_ProjectMenuLabelLocalesButtonMousePressed

    private void ProjectMenuLabelLocalesButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLocalesButtonMouseExited
	  setMouseExitedMenuLabel(ProjectMenuLabelLocalesButton);
    }//GEN-LAST:event_ProjectMenuLabelLocalesButtonMouseExited

    private void ProjectMenuLabelLocalesButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLocalesButtonMouseEntered
	  setMouseEnteredMenuLabel(ProjectMenuLabelLocalesButton);
    }//GEN-LAST:event_ProjectMenuLabelLocalesButtonMouseEntered

    private void ProjectMenuLabelLocalesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLocalesButtonMouseClicked
        setSelectedMenuItem(ProjectMenuLabelLocalesButton);
    }//GEN-LAST:event_ProjectMenuLabelLocalesButtonMouseClicked

    private void ProjectMenuLabelLookAndFeelButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLookAndFeelButtonMouseReleased
        setMouseReleasedMenuLabel(ProjectMenuLabelLookAndFeelButton); 
    }//GEN-LAST:event_ProjectMenuLabelLookAndFeelButtonMouseReleased

    private void ProjectMenuLabelLookAndFeelButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLookAndFeelButtonMousePressed
	  setMousePressedMenuLabel(ProjectMenuLabelLookAndFeelButton);
    }//GEN-LAST:event_ProjectMenuLabelLookAndFeelButtonMousePressed

    private void ProjectMenuLabelLookAndFeelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLookAndFeelButtonMouseExited
	  setMouseExitedMenuLabel(ProjectMenuLabelLookAndFeelButton);
    }//GEN-LAST:event_ProjectMenuLabelLookAndFeelButtonMouseExited

    private void ProjectMenuLabelLookAndFeelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLookAndFeelButtonMouseEntered
	  setMouseEnteredMenuLabel(ProjectMenuLabelLookAndFeelButton);
    }//GEN-LAST:event_ProjectMenuLabelLookAndFeelButtonMouseEntered

    private void ProjectMenuLabelLookAndFeelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelLookAndFeelButtonMouseClicked
        setSelectedMenuItem(ProjectMenuLabelLookAndFeelButton);
    }//GEN-LAST:event_ProjectMenuLabelLookAndFeelButtonMouseClicked

    private void ProjectMenuLabelInfoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelInfoButtonMousePressed
	  setMousePressedMenuLabel(ProjectMenuLabelInfoButton);
    }//GEN-LAST:event_ProjectMenuLabelInfoButtonMousePressed

    private void ProjectMenuLabelInfoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelInfoButtonMouseReleased
        setMouseReleasedMenuLabel(ProjectMenuLabelInfoButton); 
    }//GEN-LAST:event_ProjectMenuLabelInfoButtonMouseReleased

    private void ProjectMenuLabelInfoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelInfoButtonMouseExited
	  setMouseExitedMenuLabel(ProjectMenuLabelInfoButton);
    }//GEN-LAST:event_ProjectMenuLabelInfoButtonMouseExited

    private void ProjectMenuLabelInfoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelInfoButtonMouseEntered
	  setMouseEnteredMenuLabel(ProjectMenuLabelInfoButton);
    }//GEN-LAST:event_ProjectMenuLabelInfoButtonMouseEntered

    private void ProjectMenuLabelInfoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectMenuLabelInfoButtonMouseClicked
        setSelectedMenuItem(ProjectMenuLabelInfoButton);
    }//GEN-LAST:event_ProjectMenuLabelInfoButtonMouseClicked
    
 private Color theCurrentMenuColor = new Color(100, 120, 170);
 private Color theSelectedMenuColor = new Color(140,160,210);
 private Color theTextMenuColor = new Color(255, 255, 255);
 private boolean pressedSelected = false;
 private Icon arrowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow.gif"));
 private Icon arrowSelectedIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_selected.gif"));
 private Icon arrowMouseOverIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_mouseover.gif"));  
 private int iconTextGap = 5;
 private int sbTabMenuTopSpaceFiller = 19;
 private int sbTabLeftMargin = 5;
 private int sbTabWidth = 100;
 private int sbTabHeight = 25;
 private int sbTabGroupHeight = 75;
 private boolean sbTabIsOpaque=true;
 private Color sbTabTopBorderColor = new Color(140, 171, 240);
 private Color sbTabBottomBorderColor = new Color(70, 82, 116);
 private Color sbTabTopSelectedBorderColor = new Color(96, 110, 145);
 private Color sbTabBottomSelectedBorderColor = new Color(198, 226, 253);
 private Color sbTabRightInnerBorderColor = new java.awt.Color(68, 76, 100);
 private Color sbTabRightOuterBorderColor = new java.awt.Color(100, 114, 149);
 private Font sbTabFont = new java.awt.Font("Arial", 1, 12);
 private SBTab TheMenuLabelReference = new SBTab(null,sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
 private SBTab thePressedLabelReference = null;
 private SBTab theEnteredLabelReference = null;

 private void setSelectedMenuItem(SBTab theMenuLabel)
  {
    try
    {
        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
	  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
        TheMenuLabelReference.setTheIcon(arrowIcon);
        theMenuLabel.setBackgroundColor(theSelectedMenuColor);
        theMenuLabel.setTheIcon(arrowSelectedIcon);
	  theMenuLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        TheMenuLabelReference = theMenuLabel;

                        try
                        {
	                      setContentPanel(((EAPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance()).setParentComp(getParentComp()));
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }   
    }
    catch(Exception e)
    {
	e.printStackTrace();
    }
  }    
 
 boolean isEntered = false;
 private void setMouseEnteredMenuLabel(SBTab theEnteredLabel)
 {
    isEntered = true;
    try
    {
        theEnteredLabelReference = theEnteredLabel;
        if(theEnteredLabel.equals(TheMenuLabelReference)==false)
        {
            theEnteredLabel.setTheIcon(arrowMouseOverIcon);
            if(pressedSelected==true)
            {
                
                TheMenuLabelReference.setForegroundColor(theTextMenuColor);
            }
        }
        else
        {
            if(pressedSelected==true)
            {
                TheMenuLabelReference.setForegroundColor(theSelectedMenuColor);    
            }
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }     
 }
 private void setMouseExitedMenuLabel(SBTab theExitedLabel)
 {
    isEntered = false;
    try
    {
        if(theExitedLabel.equals(TheMenuLabelReference)==false)
        {
            theExitedLabel.setTheIcon(arrowIcon);   
        }
        else
        {
            theEnteredLabelReference.setForegroundColor(theTextMenuColor);           
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }

  private void setMousePressedMenuLabel(SBTab thePressedLabel)
 {
    try
    {
        thePressedLabelReference = thePressedLabel;
        if(thePressedLabel.equals(TheMenuLabelReference)==false)
        {
            thePressedLabel.setBackgroundColor(theSelectedMenuColor); 
	  	thePressedLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        }
        else
        {
            pressedSelected=true; 
            thePressedLabel.setForegroundColor(theSelectedMenuColor);
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }

  private void setMouseReleasedMenuLabel(SBTab theReleasedLabel)
 {
    try
    {
        pressedSelected = false;
        if(theEnteredLabelReference.equals(thePressedLabelReference)==false || isEntered == false)
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==false)
            {
                thePressedLabelReference.setBackgroundColor(theCurrentMenuColor);
		    thePressedLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
            }
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }           
        }
        else
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }
		else
		{
		    try
		    {
 		        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
			  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
 		        TheMenuLabelReference.setTheIcon(arrowIcon);
 		        thePressedLabelReference.setTheIcon(arrowSelectedIcon);
 		        TheMenuLabelReference = thePressedLabelReference;
                        try
                        {
                            setContentPanel(((EAPanel)Class.forName(getSidebarComponentID(theReleasedLabel.getComponentLocalizationID())).newInstance()).setParentComp(this.getParentComp()));
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }   
 		    }
		    catch(Exception e)
		    {
		        System.out.println(e);
		    }
		}
        }
        
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 } 
    private static synchronized Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        try
        {
            while(textArrayString.indexOf(",")!=-1)
            {
                tempString = textArrayString.substring(0,textArrayString.indexOf(","));
                textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
                aryList.add(tempString);
            }
            aryList.add(textArrayString);
            aryList.trimToSize();
        }
        catch(NullPointerException e)
        {
         
        }

        return aryList.toArray();
    }  

private synchronized String getSidebarComponentID(String compRefID)
{
	try
	{
		return (String)sbMap.get(compRefID);
	}
	catch(Exception e)
	{
	e.printStackTrace();
	}
	return "";
}

private synchronized void initSidebar()
{
try
{
	Object[] sbUIStrings = getStringArraysFromString(DesignerRuleBuilder.get("sbProjectStrings"));
	Object[] sbUIActions = getStringArraysFromString(DesignerRuleBuilder.get("sbProjectActionPanels"));
//sbMap

                    for(int i = 0;i<sbUIStrings.length;i++)
                    {
                        try
				{
					sbMap.put((String)sbUIStrings[i],(String)sbUIActions[i]);
					//LeftMenuButtonPanel.add(new SBTab((String)sbUIStrings[i],sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque));
				}
				catch(Exception e)
				{
					sbMap.put((String)sbUIStrings[i],"");
				} 
                    }
}
catch(Exception e)
{
	e.printStackTrace();
}
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ProjectMenuButtonPanel;
    private javax.swing.JPanel ProjectMenuButtonPanelBottom;
    private javax.swing.JPanel ProjectMenuButtonPanelLeft;
    private SBTab ProjectMenuButtonPanelTop;
    private SBTab ProjectMenuLabelInfoButton;
    private SBTab ProjectMenuLabelLocalesButton;
    private SBTab ProjectMenuLabelLookAndFeelButton;
    //private SBTab ProjectMenuLabelRulesButton;
    private SBSpacer LeftMenuControlAreaPanel;
    private javax.swing.JPanel ProjectMenuPanel;
    private javax.swing.JPanel ProjectSelectionContentPanel;
    private javax.swing.JPanel LeftMenuPanelBottomPanel;
    private javax.swing.JPanel LeftUpperCornerPanelHere;
    private javax.swing.JPanel TopLevelLayerTransitionCenterBorderPanel;
    private javax.swing.JPanel headerCenterGroupBottomPanel;
    private javax.swing.JPanel headerCenterGroupPanel;
    private javax.swing.JPanel headerCenterGroupTopPanel;
    private javax.swing.JPanel headerContentPanel;
    private javax.swing.JPanel headerLeftGroupBottomPanel;
    private javax.swing.JPanel headerLeftGroupPanel;
    private javax.swing.JPanel headerLeftGroupTopPanel;
    private javax.swing.JPanel headerRightGroupBottomPanel;
    private javax.swing.JPanel headerRightGroupTopPanel;
    private javax.swing.JPanel rightHeaderGroupPanel;
    private ContentAreaHeaderPanel contentProjectPanel;
    private javax.swing.JPanel contentPanel;
    // End of variables declaration//GEN-END:variables
  private EAPanel TheContentPanelReference = new EAPanel();
  private void setContentPanel(EAPanel theContentPanel)
  {
    try
    {
	  getDataUpdate();
        TheContentPanelReference.setVisible(false);
        ProjectSelectionContentPanel.remove(TheContentPanelReference);        
        TheContentPanelReference = theContentPanel;
        ProjectSelectionContentPanel.add(TheContentPanelReference);     
        TheContentPanelReference.setVisible(true);

    }
    catch(Exception e)
    {
        System.out.println(e);
    }
  }  

  public void getDataUpdate()
  {
	try
	{
		TheContentPanelReference.getDataUpdate();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
  }
  
}
