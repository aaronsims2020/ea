/*
 * EADesigner.java
 *
 * Created on December 11, 2003, 4:00 PM
 */

package com.trinity.ea.design;
import java.awt.*;
import javax.swing.*;
import com.trinity.ea.design.messaging.actions.MessageBuilderAction;
import com.trinity.ea.design.autoupdate.actions.UpdateBuilderAction;
import com.trinity.ea.design.optin.EADesignerOptinPanel;
import com.trinity.ea.design.payments.EADesignerPaymentsPanel;
import com.trinity.ea.design.build.EADesignerBuildPanel;
import com.trinity.ea.design.common.panel.EAPanel;
import com.trinity.ea.design.common.sidebar.SBTab;
import com.trinity.ea.design.common.corners.upperleft.UpperLeftCorner;
import com.trinity.ea.design.common.borderline.HorizontalRuleBorderline;
import com.trinity.ea.design.project.EADesignerProjectPanel;
import com.trinity.ea.design.common.sidebar.SBSpacer;
import com.trinity.ea.design.rules.builder.DesignerRuleBuilder;
import com.trinity.ea.design.common.filechooser.EAXFileFilter;
import com.trinity.ea.design.common.filechooser.EAXFileView;
import com.trinity.ea.design.common.project.SaveDialog;
import com.trinity.ea.design.common.project.ProjectNotFoundDialog;
import com.trinity.ea.design.common.file.ProjectManager;
import com.trinity.ea.design.common.project.NewProject;
import com.trinity.ea.rules.reader.PreviewIndexHandler;
import com.trinity.ea.util.EAProperties;
import com.trinity.ea.design.project.locales.ProjectLocalesPanel;
import com.trinity.ea.design.help.EAHelpViewer;
import java.net.URL;
import java.net.MalformedURLException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.FileOutputStream;

import java.io.File;
import javax.swing.JFileChooser;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import java.awt.Font;
import java.util.HashMap;
import java.util.Collections;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.awt.event.ActionListener;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2005 Trinity Software. All rights reserved.
 */
public class EADesigner extends javax.swing.JFrame {
    private Map sbMap = Collections.synchronizedMap(new HashMap());
    private boolean isNewPrj = true;
    MessageBuilderAction messageBuilderAction = null; 
    UpdateBuilderAction updateBuilderAction = null; 
    private String[] recentFileListArray = null;
    private boolean saveProjectIsSet=false;
    private String[] saveFileArray = {};
    private String saveFileURL = null;
    private java.awt.Image TitleBarIcon = null;
    String filename = File.separator+"tmp";
    JFileChooser fc = new JFileChooser(new File(filename)); 
    private EAXFileFilter filter = new EAXFileFilter();
    private EAXFileView fileView = new EAXFileView();
    private Icon theAppIcon = new javax.swing.ImageIcon(getClass().getResource("/images/lgpl/eaicon16.png"));
    private ActionListener helpListener = null;
    // Preview feature variables
    private ProcessBuilder builder = null;
    private Process p = null;
    private Process sign = null;

    /** Creates new form EADesigner */
    public EADesigner(boolean isNewProject) 
    {
	isNewPrj = isNewProject;
	try
	{
		DesignerRuleBuilder.readPropertiesFile();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
        initComponents();
try
{
	if(isNewProject==true)
	{
		setNewProject(DesignerRuleBuilder.getTempProject());	
	}
	else
	{
		setOpenFile(DesignerRuleBuilder.getTempProject());
	}
}
catch(Exception e)
{
	e.printStackTrace();
}
	initSidebar();
	  setSelectedMenuItem(LeftMenuProjectLabel);
        setSize(900,650);
        setResizable(false);
         // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = getSize().width;
        int h = getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        // Move the window
        setLocation(x, y);  
    	setPopulateOpenRecent();        
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
	  try
	  {
	  	TitleBarIcon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/lgpl/eaicon16.png"));
		setIconImage(TitleBarIcon);
	  }
	  catch(Exception e)
	  {
		e.printStackTrace();
	  } 
        subMainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        mainPanel = new javax.swing.JPanel();
        headerContentPanel = new javax.swing.JPanel();
        headerLeftGroupPanel = new javax.swing.JPanel();
        headerLeftGroupTopPanel = new javax.swing.JPanel();
        headerLeftGroupBottomPanel = new javax.swing.JPanel();
        headerCenterGroupPanel = new javax.swing.JPanel();
        headerCenterGroupTopPanel = new javax.swing.JPanel();
        headerCenterGroupBottomPanel = new javax.swing.JPanel();
        rightHeaderGroupPanel = new javax.swing.JPanel();
        headerRightGroupTopPanel = new javax.swing.JPanel();
        rttopheader = new javax.swing.JLabel();
        headerRightGroupBottomPanel = new javax.swing.JPanel();
        mainContentPanel = new javax.swing.JPanel();
        LeftMenuPanel = new javax.swing.JPanel();
        LeftMenuPanelBottomPanel = new javax.swing.JPanel();
        LeftMenuButtonPanel = new javax.swing.JPanel();
        LeftMenuPanelTopPanel = new SBTab(null,sbTabWidth, sbTabMenuTopSpaceFiller, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, null, iconTextGap, theCurrentMenuColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuProjectLabel = new SBTab("Project",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuEvaluationLabel = new SBTab("Evaluation",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuEMailOptinLabel = new SBTab("E-mail Opt-In",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuRegistrationLabel = new SBTab("Registration",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuPaymentsLabel = new SBTab("Payments",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuAutoUpdateLabel = new SBTab("Automatic Update",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuMessagingLabel = new SBTab("Messaging",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuBuildLabel = new SBTab("Build",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        LeftMenuControlAreaPanel = new SBSpacer(theCurrentMenuColor,sbTabTopBorderColor,theCurrentMenuColor,sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,sbTabIsOpaque);
        LeftMenuHelpButtonPanel = new javax.swing.JPanel();
        LeftMenuHelpButton = new javax.swing.JButton();
        LeftMenuHelpSpacerPanel = new javax.swing.JPanel();
        LeftMenuControlAreaPanel3 = new javax.swing.JPanel();
        RightContentPanel = new javax.swing.JPanel();
        eaMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
    	  editMenu = new javax.swing.JMenu();
    	  designerMenu = new javax.swing.JMenu();
    	  newMenu = new javax.swing.JMenu();
        messageBuilderMenuItem = new javax.swing.JMenuItem();
        autoUpdateBuilderMenuItem = new javax.swing.JMenuItem();
        newMessageMenuItem = new javax.swing.JMenuItem();
        newUpdateMenuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        clearMenuItem = new javax.swing.JMenuItem();
        clearSeparator = new javax.swing.JSeparator();
        preferencesMenuItem = new javax.swing.JMenuItem();

        startWizardMenuItem = new javax.swing.JMenuItem();
        wizardMenu = new javax.swing.JMenu();

        aboutSeparator = new javax.swing.JSeparator();
        checkForUpdatesMenuItem = new javax.swing.JMenuItem();
	  registerMenuItem = new javax.swing.JMenuItem();
        registerSeparator = new javax.swing.JSeparator();
        eaHelpMenuItem = new javax.swing.JMenuItem();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        openRecentMenuItem = new javax.swing.JMenu();
	  openSaveSeparator = new JSeparator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        saveCopyAsMenuItem = new javax.swing.JMenuItem();
        revertToSavedMenuItem = new javax.swing.JMenuItem();
	  saveExitSeparator = new JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
	  mainMenuUpperCorner = new UpperLeftCorner(theCurrentMenuColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, theSelectedMenuColor);
        subMainPanel.setLayout(new java.awt.GridBagLayout());

        subMainPanel.setMinimumSize(new java.awt.Dimension(10, 40));
        subMainPanel.setPreferredSize(new java.awt.Dimension(10, 40));
        subMainPanel.add(jPanel1, new java.awt.GridBagConstraints());

        subMainPanel.add(jSplitPane1, new java.awt.GridBagConstraints());

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());
	  try
	  {
		helpListener = EAHelpViewer.getEAHelpViewer(this);
	  }
	  catch(Exception e)
	  {}
        headerContentPanel.setLayout(new javax.swing.BoxLayout(headerContentPanel, javax.swing.BoxLayout.X_AXIS));

        headerContentPanel.setMaximumSize(new java.awt.Dimension(65747, 24));
        headerContentPanel.setMinimumSize(new java.awt.Dimension(10, 24));
        headerContentPanel.setPreferredSize(new java.awt.Dimension(10, 24));
        headerLeftGroupPanel.setLayout(new javax.swing.BoxLayout(headerLeftGroupPanel, javax.swing.BoxLayout.Y_AXIS));

        headerLeftGroupPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth-2, 24));
        headerLeftGroupPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth-2, 24));
        headerLeftGroupPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth-2, 24));
        headerLeftGroupTopPanel.setBackground(new java.awt.Color(39, 63, 109));
        headerLeftGroupTopPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth-2, 20));
        headerLeftGroupPanel.add(headerLeftGroupTopPanel);

        headerLeftGroupBottomPanel.setBackground(theCurrentMenuColor);
        headerLeftGroupBottomPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth-2, 4));
        headerLeftGroupBottomPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth-2, 4));
        headerLeftGroupBottomPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth-2, 4));
        headerLeftGroupPanel.add(headerLeftGroupBottomPanel);

        headerContentPanel.add(headerLeftGroupPanel);

        headerCenterGroupPanel.setLayout(new javax.swing.BoxLayout(headerCenterGroupPanel, javax.swing.BoxLayout.Y_AXIS));

        headerCenterGroupPanel.setMaximumSize(new java.awt.Dimension(32767, 24));
        headerCenterGroupPanel.setMinimumSize(new java.awt.Dimension(10, 24));
        headerCenterGroupPanel.setPreferredSize(new java.awt.Dimension(10, 24));
        headerCenterGroupTopPanel.setBackground(new java.awt.Color(39, 63, 109));
        headerCenterGroupPanel.add(headerCenterGroupTopPanel);

        headerCenterGroupBottomPanel.setLayout(new java.awt.BorderLayout());
        headerCenterGroupBottomPanel.setMaximumSize(new java.awt.Dimension(32767, 4));
        headerCenterGroupBottomPanel.setMinimumSize(new java.awt.Dimension(10, 4));
        headerCenterGroupBottomPanel.setPreferredSize(new java.awt.Dimension(100, 4));

        mainMenuUpperCorner.setMaximumSize(new java.awt.Dimension(4, 4));
        mainMenuUpperCorner.setMinimumSize(new java.awt.Dimension(4, 4));
        mainMenuUpperCorner.setPreferredSize(new java.awt.Dimension(4, 4));

        headerCenterGroupBottomPanel.add(mainMenuUpperCorner, java.awt.BorderLayout.WEST);

        headerCenterGroupBottomPanel.add(new HorizontalRuleBorderline(sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,theSelectedMenuColor), java.awt.BorderLayout.CENTER);
 headerCenterGroupPanel.add(headerCenterGroupBottomPanel);

        headerContentPanel.add(headerCenterGroupPanel);

        rightHeaderGroupPanel.setLayout(new javax.swing.BoxLayout(rightHeaderGroupPanel, javax.swing.BoxLayout.Y_AXIS));

        headerRightGroupTopPanel.setLayout(new java.awt.BorderLayout());

        headerRightGroupTopPanel.setBackground(new java.awt.Color(51, 51, 51));
        headerRightGroupTopPanel.setMaximumSize(new java.awt.Dimension(213, 20));
        headerRightGroupTopPanel.setMinimumSize(new java.awt.Dimension(213, 20));
        headerRightGroupTopPanel.setPreferredSize(new java.awt.Dimension(213, 20));
        rttopheader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/headrttoplogo.jpg")));
        headerRightGroupTopPanel.add(rttopheader, java.awt.BorderLayout.CENTER);

        rightHeaderGroupPanel.add(headerRightGroupTopPanel);
headerRightGroupBottomPanel.setLayout(new java.awt.BorderLayout());
headerRightGroupBottomPanel.add(new HorizontalRuleBorderline(sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,theSelectedMenuColor), java.awt.BorderLayout.CENTER);

        headerRightGroupBottomPanel.setMaximumSize(new java.awt.Dimension(213, 4));
        headerRightGroupBottomPanel.setMinimumSize(new java.awt.Dimension(213, 4));
        headerRightGroupBottomPanel.setPreferredSize(new java.awt.Dimension(213, 4));
        rightHeaderGroupPanel.add(headerRightGroupBottomPanel);

        headerContentPanel.add(rightHeaderGroupPanel);

        mainPanel.add(headerContentPanel, java.awt.BorderLayout.NORTH);

        mainContentPanel.setLayout(new java.awt.BorderLayout());

        mainContentPanel.setBackground(new java.awt.Color(39, 63, 109));
        mainContentPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuPanel.setLayout(new java.awt.BorderLayout());

        LeftMenuPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuPanel.setMaximumSize(new java.awt.Dimension(130, 10));
        LeftMenuPanel.setMinimumSize(new java.awt.Dimension(130, 10));
        LeftMenuPanel.setPreferredSize(new java.awt.Dimension(130, 10));
        LeftMenuPanelBottomPanel.setLayout(new java.awt.BorderLayout());

        LeftMenuPanelBottomPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuPanelBottomPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuPanelBottomPanel.setMaximumSize(new java.awt.Dimension(120, 100));
        LeftMenuPanelBottomPanel.setMinimumSize(new java.awt.Dimension(120, 100));
        LeftMenuPanelBottomPanel.setPreferredSize(new java.awt.Dimension(120, 100));
        LeftMenuButtonPanel.setLayout(new javax.swing.BoxLayout(LeftMenuButtonPanel, javax.swing.BoxLayout.Y_AXIS));

        LeftMenuButtonPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuButtonPanel.setForeground(new java.awt.Color(255, 255, 255));
        LeftMenuButtonPanel.setMaximumSize(new java.awt.Dimension(120, 200));
        LeftMenuButtonPanel.setMinimumSize(new java.awt.Dimension(120, 200));
        LeftMenuButtonPanel.setPreferredSize(new java.awt.Dimension(120, 200));

        LeftMenuProjectLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuProjectLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuProjectLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuProjectLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuProjectLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuProjectLabelMouseReleased(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuProjectLabel);

        LeftMenuEvaluationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuEvaluationLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuEvaluationLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuEvaluationLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuEvaluationLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuEvaluationLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuEvaluationLabel);

        LeftMenuEMailOptinLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuEMailOptinLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuEMailOptinLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuEMailOptinLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuEMailOptinLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuEMailOptinLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuEMailOptinLabel);

        LeftMenuRegistrationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuRegistrationLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuRegistrationLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuRegistrationLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuRegistrationLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuRegistrationLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuRegistrationLabel);

        LeftMenuPaymentsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuPaymentsLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuPaymentsLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuPaymentsLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuPaymentsLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuPaymentsLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuPaymentsLabel);

        LeftMenuAutoUpdateLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuAutoUpdateLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuAutoUpdateLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuAutoUpdateLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuAutoUpdateLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuAutoUpdateLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuAutoUpdateLabel);

        LeftMenuMessagingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuMessagingLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuMessagingLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuMessagingLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuMessagingLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuMessagingLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuMessagingLabel);

        LeftMenuBuildLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LeftMenuBuildLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LeftMenuBuildLabelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftMenuBuildLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeftMenuBuildLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeftMenuBuildLabelMouseEntered(evt);
            }
        });

        LeftMenuButtonPanel.add(LeftMenuBuildLabel);

        LeftMenuPanelBottomPanel.add(LeftMenuButtonPanel, java.awt.BorderLayout.NORTH);

        LeftMenuControlAreaPanel.setLayout(new java.awt.BorderLayout());

        LeftMenuHelpButtonPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuHelpButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 18));
        LeftMenuHelpButton.setText("Show Help");

	  if(helpListener!=null)
	  {
        	LeftMenuHelpButton.addActionListener(helpListener);
	  }
        LeftMenuHelpButtonPanel.add(LeftMenuHelpButton);

        LeftMenuControlAreaPanel.add(LeftMenuHelpButtonPanel, java.awt.BorderLayout.SOUTH);

        LeftMenuHelpSpacerPanel.setLayout(new java.awt.BorderLayout());

        LeftMenuHelpSpacerPanel.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuControlAreaPanel3.setLayout(new java.awt.BorderLayout());

        LeftMenuControlAreaPanel3.setBackground(new java.awt.Color(39, 63, 109));
        LeftMenuHelpSpacerPanel.add(LeftMenuControlAreaPanel3, java.awt.BorderLayout.CENTER);

        LeftMenuControlAreaPanel.add(LeftMenuHelpSpacerPanel, java.awt.BorderLayout.CENTER);

        LeftMenuPanelBottomPanel.add(LeftMenuControlAreaPanel, java.awt.BorderLayout.CENTER);

        LeftMenuPanel.add(LeftMenuPanelBottomPanel, java.awt.BorderLayout.CENTER);

        LeftMenuPanel.add(LeftMenuPanelTopPanel, java.awt.BorderLayout.NORTH);

        mainContentPanel.add(LeftMenuPanel, java.awt.BorderLayout.WEST);

        RightContentPanel.setLayout(new java.awt.BorderLayout());

        RightContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        mainContentPanel.add(RightContentPanel, java.awt.BorderLayout.CENTER);

        mainPanel.add(mainContentPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Arial", 0, 12));
        fileMenu.setMnemonic('F');
        editMenu.setText("Edit");
        editMenu.setFont(new java.awt.Font("Arial", 0, 12));
        editMenu.setMnemonic('E');
        designerMenu.setText("Designers");
        designerMenu.setFont(new java.awt.Font("Arial", 0, 12));
        designerMenu.setMnemonic('D');
        newMenu.setText("New");
        newMenu.setFont(new java.awt.Font("Arial", 0, 12));
        newMenu.setMnemonic('N');

        autoUpdateBuilderMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        autoUpdateBuilderMenuItem.setText("Automatic Software Update Designer");
        autoUpdateBuilderMenuItem.setMnemonic('A');
        autoUpdateBuilderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoUpdateBuilderMenuItemActionPerformed(evt);
            }
        });
        designerMenu.add(autoUpdateBuilderMenuItem);

        messageBuilderMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        messageBuilderMenuItem.setText("Message Designer");
        messageBuilderMenuItem.setMnemonic('M');
        messageBuilderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageBuilderMenuItemActionPerformed(evt);
            }
        });
        designerMenu.add(messageBuilderMenuItem);

        cutMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });

        editMenu.add(cutMenuItem);

        copyMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });

        editMenu.add(copyMenuItem);

        pasteMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });

        editMenu.add(pasteMenuItem);

        clearMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        clearMenuItem.setText("Copy");
        clearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMenuItemActionPerformed(evt);
            }
        });

        editMenu.add(clearMenuItem);
        editMenu.add(clearSeparator);

        preferencesMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        preferencesMenuItem.setText("Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });

        editMenu.add(preferencesMenuItem);

        wizardMenu.setText("Wizard");
        wizardMenu.setFont(new java.awt.Font("Arial", 0, 12));
        wizardMenu.setMnemonic('W');

        startWizardMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        startWizardMenuItem.setText("Start Wizard...");
        startWizardMenuItem.setMnemonic('S');
        startWizardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startWizardMenuItemActionPerformed(evt);
            }
        });

	  wizardMenu.add(startWizardMenuItem);




// Begin New Menu Settings


        newMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        newMenuItem.setText("New Project");
        newMenuItem.setMnemonic('N');
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });

        newMenu.add(newMenuItem);

        newUpdateMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        newUpdateMenuItem.setText("New Automatic Software Update");
        newUpdateMenuItem.setMnemonic('A');
        newUpdateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoUpdateBuilderMenuItemActionPerformed(evt);
            }
        });

        newMenu.add(newUpdateMenuItem);

        newMessageMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        newMessageMenuItem.setText("New Message");
        newMessageMenuItem.setMnemonic('M');
        newMessageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageBuilderMenuItemActionPerformed(evt);
            }
        });

        newMenu.add(newMessageMenuItem);

        fileMenu.add(newMenu);
//
        openMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        openMenuItem.setText("Open Project...");
        openMenuItem.setMnemonic('O');
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);
//
        openRecentMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        openRecentMenuItem.setText("Open Recent Project");
        openRecentMenuItem.setMnemonic('p');
        openRecentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRecentMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openRecentMenuItem);
        fileMenu.add(openSaveSeparator);
//
        saveMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        saveMenuItem.setText("Save Project");
        saveMenuItem.setMnemonic('S');
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveMenuItem);
//
        saveAsMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        saveAsMenuItem.setText("Save Project As...");
        saveAsMenuItem.setMnemonic('A');
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveAsMenuItem);
//
        saveCopyAsMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        saveCopyAsMenuItem.setText("Save a Project Copy As...");
        saveCopyAsMenuItem.setMnemonic('C');
        saveCopyAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCopyAsMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveCopyAsMenuItem);
//
        revertToSavedMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        revertToSavedMenuItem.setText("Revert to Saved Project...");
        revertToSavedMenuItem.setMnemonic('R');
        revertToSavedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertToSavedMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(revertToSavedMenuItem);
        fileMenu.add(saveExitSeparator);
//End New Menu Settings


        fileMenu.add(saveExitSeparator);
        exitMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        exitMenuItem.setText("Exit");
        exitMenuItem.setMnemonic('x');
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        eaMenuBar.add(fileMenu);


        //eaMenuBar.add(editMenu);


        eaMenuBar.add(wizardMenu);

        eaMenuBar.add(designerMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Arial", 0, 12));
        helpMenu.setMnemonic('H');
        aboutMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        aboutMenuItem.setText("About EvaluateAnywhere...");
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);
	  helpMenu.add(aboutSeparator);

        checkForUpdatesMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        checkForUpdatesMenuItem.setText("Check for Updates...");
        checkForUpdatesMenuItem.setMnemonic('C');
        checkForUpdatesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkForUpdatesMenuItemActionPerformed(evt);
            }
        });

	  //helpMenu.add(checkForUpdatesMenuItem);

        registerMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        registerMenuItem.setText("Register...");
        registerMenuItem.setMnemonic('R');
        registerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerMenuItemActionPerformed(evt);
            }
        });

	  //helpMenu.add(registerMenuItem);
        //helpMenu.add(registerSeparator);

        eaHelpMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        eaHelpMenuItem.setText("EvaluateAnywhere Help...");
        eaHelpMenuItem.setMnemonic('H');

	  if(helpListener!=null)
	  {
        	eaHelpMenuItem.addActionListener(helpListener);
	  }

	  helpMenu.add(eaHelpMenuItem);

        eaMenuBar.add(helpMenu);

        setJMenuBar(eaMenuBar);

        pack();
    }//GEN-END:initComponents

    private void LeftMenuBuildLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuBuildLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuBuildLabel); 
    }//GEN-LAST:event_LeftMenuBuildLabelMouseReleased

    private void LeftMenuBuildLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuBuildLabelMousePressed
        setMousePressedMenuLabel(LeftMenuBuildLabel);
    }//GEN-LAST:event_LeftMenuBuildLabelMousePressed

    private void LeftMenuBuildLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuBuildLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuBuildLabel);
    }//GEN-LAST:event_LeftMenuBuildLabelMouseExited

    private void LeftMenuBuildLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuBuildLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuBuildLabel);
    }//GEN-LAST:event_LeftMenuBuildLabelMouseEntered

    private void LeftMenuBuildLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuBuildLabelMouseClicked
        setSelectedMenuItem(LeftMenuBuildLabel);
    }//GEN-LAST:event_LeftMenuBuildLabelMouseClicked

    private void LeftMenuMessagingLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuMessagingLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuMessagingLabel);
    }//GEN-LAST:event_LeftMenuMessagingLabelMouseReleased

    private void LeftMenuMessagingLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuMessagingLabelMousePressed
        setMousePressedMenuLabel(LeftMenuMessagingLabel);
    }//GEN-LAST:event_LeftMenuMessagingLabelMousePressed

    private void LeftMenuMessagingLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuMessagingLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuMessagingLabel);
    }//GEN-LAST:event_LeftMenuMessagingLabelMouseExited

    private void LeftMenuMessagingLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuMessagingLabelMouseEntered
                setMouseEnteredMenuLabel(LeftMenuMessagingLabel);
    }//GEN-LAST:event_LeftMenuMessagingLabelMouseEntered

    private void LeftMenuMessagingLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuMessagingLabelMouseClicked
        setSelectedMenuItem(LeftMenuMessagingLabel);
    }//GEN-LAST:event_LeftMenuMessagingLabelMouseClicked

    private void LeftMenuAutoUpdateLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuAutoUpdateLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuAutoUpdateLabel);
    }//GEN-LAST:event_LeftMenuAutoUpdateLabelMouseReleased

    private void LeftMenuAutoUpdateLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuAutoUpdateLabelMousePressed
        setMousePressedMenuLabel(LeftMenuAutoUpdateLabel);
    }//GEN-LAST:event_LeftMenuAutoUpdateLabelMousePressed

    private void LeftMenuAutoUpdateLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuAutoUpdateLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuAutoUpdateLabel);
    }//GEN-LAST:event_LeftMenuAutoUpdateLabelMouseExited

    private void LeftMenuAutoUpdateLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuAutoUpdateLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuAutoUpdateLabel);
    }//GEN-LAST:event_LeftMenuAutoUpdateLabelMouseEntered

    private void LeftMenuAutoUpdateLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuAutoUpdateLabelMouseClicked
        setSelectedMenuItem(LeftMenuAutoUpdateLabel);
    }//GEN-LAST:event_LeftMenuAutoUpdateLabelMouseClicked

    private void LeftMenuPaymentsLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuPaymentsLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuPaymentsLabel);
    }//GEN-LAST:event_LeftMenuPaymentsLabelMouseReleased

    private void LeftMenuPaymentsLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuPaymentsLabelMousePressed
        setMousePressedMenuLabel(LeftMenuPaymentsLabel);
    }//GEN-LAST:event_LeftMenuPaymentsLabelMousePressed

    private void LeftMenuPaymentsLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuPaymentsLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuPaymentsLabel);
    }//GEN-LAST:event_LeftMenuPaymentsLabelMouseExited

    private void LeftMenuPaymentsLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuPaymentsLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuPaymentsLabel);
    }//GEN-LAST:event_LeftMenuPaymentsLabelMouseEntered

    private void LeftMenuPaymentsLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuPaymentsLabelMouseClicked
        setSelectedMenuItem(LeftMenuPaymentsLabel);
    }//GEN-LAST:event_LeftMenuPaymentsLabelMouseClicked

    private void LeftMenuRegistrationLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuRegistrationLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuRegistrationLabel);
    }//GEN-LAST:event_LeftMenuRegistrationLabelMouseReleased

    private void LeftMenuRegistrationLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuRegistrationLabelMousePressed
        setMousePressedMenuLabel(LeftMenuRegistrationLabel);
    }//GEN-LAST:event_LeftMenuRegistrationLabelMousePressed

    private void LeftMenuRegistrationLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuRegistrationLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuRegistrationLabel);
    }//GEN-LAST:event_LeftMenuRegistrationLabelMouseExited

    private void LeftMenuRegistrationLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuRegistrationLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuRegistrationLabel);
    }//GEN-LAST:event_LeftMenuRegistrationLabelMouseEntered

    private void LeftMenuRegistrationLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuRegistrationLabelMouseClicked
        setSelectedMenuItem(LeftMenuRegistrationLabel);
    }//GEN-LAST:event_LeftMenuRegistrationLabelMouseClicked

    private void LeftMenuEMailOptinLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEMailOptinLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuEMailOptinLabel);
    }//GEN-LAST:event_LeftMenuEMailOptinLabelMouseReleased

    private void LeftMenuEMailOptinLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEMailOptinLabelMousePressed
        setMousePressedMenuLabel(LeftMenuEMailOptinLabel);
    }//GEN-LAST:event_LeftMenuEMailOptinLabelMousePressed

    private void LeftMenuEMailOptinLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEMailOptinLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuEMailOptinLabel);
    }//GEN-LAST:event_LeftMenuEMailOptinLabelMouseExited

    private void LeftMenuEMailOptinLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEMailOptinLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuEMailOptinLabel);
    }//GEN-LAST:event_LeftMenuEMailOptinLabelMouseEntered

    private void LeftMenuEMailOptinLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEMailOptinLabelMouseClicked
        setSelectedMenuItem(LeftMenuEMailOptinLabel);
    }//GEN-LAST:event_LeftMenuEMailOptinLabelMouseClicked

    private void LeftMenuEvaluationLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEvaluationLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuEvaluationLabel);
    }//GEN-LAST:event_LeftMenuEvaluationLabelMouseReleased

    private void LeftMenuEvaluationLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEvaluationLabelMousePressed
        setMousePressedMenuLabel(LeftMenuEvaluationLabel);
    }//GEN-LAST:event_LeftMenuEvaluationLabelMousePressed

    private void LeftMenuEvaluationLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEvaluationLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuEvaluationLabel);
    }//GEN-LAST:event_LeftMenuEvaluationLabelMouseExited

    private void LeftMenuEvaluationLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEvaluationLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuEvaluationLabel);
    }//GEN-LAST:event_LeftMenuEvaluationLabelMouseEntered

    private void LeftMenuEvaluationLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuEvaluationLabelMouseClicked
        setSelectedMenuItem(LeftMenuEvaluationLabel);
    }//GEN-LAST:event_LeftMenuEvaluationLabelMouseClicked

    private void LeftMenuProjectLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuProjectLabelMouseReleased
        setMouseReleasedMenuLabel(LeftMenuProjectLabel);
    }//GEN-LAST:event_LeftMenuProjectLabelMouseReleased

    private void LeftMenuProjectLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuProjectLabelMousePressed
        setMousePressedMenuLabel(LeftMenuProjectLabel);
    }//GEN-LAST:event_LeftMenuProjectLabelMousePressed

    private void LeftMenuProjectLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuProjectLabelMouseExited
        setMouseExitedMenuLabel(LeftMenuProjectLabel);
    }//GEN-LAST:event_LeftMenuProjectLabelMouseExited

    private void LeftMenuProjectLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuProjectLabelMouseEntered
        setMouseEnteredMenuLabel(LeftMenuProjectLabel);
    }//GEN-LAST:event_LeftMenuProjectLabelMouseEntered

    private void LeftMenuProjectLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftMenuProjectLabelMouseClicked
        setSelectedMenuItem(LeftMenuProjectLabel);
    }//GEN-LAST:event_LeftMenuProjectLabelMouseClicked

    private void messageBuilderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageBuilderMenuItemActionPerformed
         messageBuilderAction = new MessageBuilderAction();
    }//GEN-LAST:event_messageBuilderMenuItemActionPerformed

    private void autoUpdateBuilderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoUpdateBuilderMenuItemActionPerformed
         updateBuilderAction = new UpdateBuilderAction();
    }//GEN-LAST:event_autoUpdateBuilderMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
         new AboutBoxDialog(this, true).show();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
	setNewProject();
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
	setOpenProject();
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void openRecentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRecentMenuItemActionPerformed
	System.out.println("Open Recent Menu Item Action not implemented");
    }//GEN-LAST:event_openRecentMenuItemActionPerformed


    private void checkForUpdatesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
	System.out.println("Check for Updates Menu Item Action not implemented");
    }

    private void registerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
	System.out.println("Register Software Menu Item Action not implemented");	
    }


String[] saTempArrayList;
private String getRecentFileByProjectFileName(String strFileName)
{
	try
	{
	String[] stringArray2 = DesignerRuleBuilder.getRecentProjectsList();
	for(int i = 0;i<stringArray2.length;i++)
	{
		if(DesignerRuleBuilder.getProjectFileName(stringArray2[i]).equalsIgnoreCase(strFileName)==true)
		{
			return stringArray2[i];
		}
	}
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return null;
	}
	return null;
}

    private void openRecentFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {

    }

	private boolean getProjectExists(String Filename)
	{
		try
		{
			return new File(new URL(Filename).getFile()).exists();
		}
		catch(Exception e)
		{
			return false;
		}
	}

    private void setPopulateOpenRecent()
	{
	try
	{
		String[] strArrayFileList = getRecentFileListToFileNamesList(recentFileListArray = (String[])DesignerRuleBuilder.getRecentProjectsList());
		saTempArrayList = new String[strArrayFileList.length];
		openRecentMenuItem.removeAll();
 		for(int i = 0;i<strArrayFileList.length;i++)
		{
			if(1<strArrayFileList.length)
			{
                        final String currentFile = recentFileListArray[i];
				final JMenuItem jmi = new JMenuItem();
        			jmi.setFont(new java.awt.Font("Arial", 0, 12));
        			jmi.setText(strArrayFileList[i]);
       			jmi.addActionListener(new java.awt.event.ActionListener() 
				{
            			public void actionPerformed(java.awt.event.ActionEvent evt) 
					{
						try
						{
							if(getProjectExists(currentFile)==true)
							{
            						setOpenFile(getRecentFileByProjectFileName(jmi.getText()));
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
							}
							else
							{
								if(ProjectNotFoundDialog.showDialog(null, "EvaluateAnywhere Project", currentFile) == 1)
								{
									DesignerRuleBuilder.removeProjectFromRecentFilesList(currentFile);
								}
							}
						}
						catch(Exception eee)
						{
							//TODO: Action goes here for failure to open project.
							eee.printStackTrace();
						}
            			}
        			});
        			openRecentMenuItem.add(jmi);
			}
			else
			{
                        final String currentFile = recentFileListArray[i];
				final JMenuItem jmi = new JMenuItem();
				if(strArrayFileList[0].equalsIgnoreCase("")==false)
				{
        				jmi.setFont(new java.awt.Font("Arial", 0, 12));
        				jmi.setText(strArrayFileList[i]);
       				jmi.addActionListener(new java.awt.event.ActionListener() 
					{
            				public void actionPerformed(java.awt.event.ActionEvent evt) 
						{
							try
							{
								if(getProjectExists(currentFile)==true)
								{
            							setOpenFile(getRecentFileByProjectFileName(jmi.getText()));
								}
								else
								{
									if(ProjectNotFoundDialog.showDialog(null, "EvaluateAnywhere Project", currentFile) == 1)
									{
										DesignerRuleBuilder.removeProjectFromRecentFilesList(currentFile);
									}
								}
							}
							catch(Exception eee)
							{
								//TODO: Action goes here for failure to open project.
								eee.printStackTrace();
							}
            				}
        				});
				}
				else
				{
        				jmi.setFont(new java.awt.Font("Arial", 0, 12));
        				jmi.setText("(No recent files available)");
 				}
        			openRecentMenuItem.add(jmi);								
			}
		}
    	}
	catch(Exception e)
	{
		e.printStackTrace();
	}

    }

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        setSaveProject();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        setSaveProjectAs();
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void saveCopyAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCopyAsMenuItemActionPerformed
	setSaveProjectCopyAs();
    }//GEN-LAST:event_saveCopyAsMenuItemActionPerformed

    private void revertToSavedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertToSavedMenuItemActionPerformed
	setRevertToSavedProject();
    }//GEN-LAST:event_revertToSavedMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
		setExitApplication();
  }//GEN-LAST:event_exitMenuItemActionPerformed
   
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        setVisible(false);
	  setExitApplication();
        System.exit(0);
    }//GEN-LAST:event_exitForm
 

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        cutMenuItem.setEnabled(false);
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        copyMenuItem.setEnabled(false);
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        pasteMenuItem.setEnabled(false);
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void clearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMenuItemActionPerformed
        clearMenuItem.setEnabled(false);
    }//GEN-LAST:event_clearMenuItemActionPerformed

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
        preferencesMenuItem.setEnabled(false);
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void startWizardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startWizardMenuItemActionPerformed
		setVisible(false);
		new NewProject(1,this);
    }//GEN-LAST:event_startWizardMenuItemActionPerformed

    private void checkForUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForUpdatesMenuItemActionPerformed
        checkForUpdatesMenuItem.setEnabled(false);
    }//GEN-LAST:event_checkForUpdatesMenuItemActionPerformed

    private void registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerMenuItemActionPerformed
        registerMenuItem.setEnabled(false);
    }//GEN-LAST:event_registerMenuItemActionPerformed

   
 private Color theCurrentMenuColor = new Color(39, 63, 109);
 private Color theSelectedMenuColor = new Color(100, 120, 170);
 private Color theTextMenuColor = new Color(255, 255, 255);
 private boolean pressedSelected = false;
 private Icon arrowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow.gif"));
 private Icon arrowSelectedIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_selected.gif"));
 private Icon arrowMouseOverIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_mouseover.gif"));  
 private int iconTextGap = 5;
 private int sbTabMenuTopSpaceFiller = 20;
 private int sbTabLeftMargin = 5;
 private int sbTabWidth = 130;
 private int sbTabHeight = 25;
 private boolean sbTabIsOpaque=true;
 private Color sbTabTopBorderColor = new Color(55, 90, 155);
 private Color sbTabBottomBorderColor = new Color(27, 44, 76);
 private Color sbTabTopSelectedBorderColor = new Color(70, 82, 116);
 private Color sbTabBottomSelectedBorderColor = new Color(140, 171, 240);
 private Color sbTabRightInnerBorderColor = new java.awt.Color(49, 56, 80);
 private Color sbTabRightOuterBorderColor = new java.awt.Color(70, 82, 116);
 private Font sbTabFont = new java.awt.Font("Arial", 1, 12);
 private SBTab TheMenuLabelReference = new SBTab(null,sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
 private SBTab thePressedLabelReference = null;
 private SBTab theEnteredLabelReference = null;

 private void setSelectedMenuItem(SBTab theMenuLabel)
  {
    try
    {
        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
	  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
        TheMenuLabelReference.setTheIcon(arrowIcon);
        theMenuLabel.setBackgroundColor(theSelectedMenuColor);
        theMenuLabel.setTheIcon(arrowSelectedIcon);
	  theMenuLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        TheMenuLabelReference = theMenuLabel;

                        try
                        {
					if((getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).equalsIgnoreCase("com.trinity.ea.design.optin.EADesignerOptinPanel")==true)
					{
            				EADesignerOptinPanel eadop1 = (EADesignerOptinPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance();
		             		setContentPanel(eadop1.setParentComp(this));
	 	 				try
	  					{
							if(ProjectManager.get("project_optin_is_new")!=null)
	 						{
								if(ProjectManager.get("project_optin_is_new").equalsIgnoreCase("true")==true)
								{
									eadop1.getFireConfigurationWizardActionNoHide();
									ProjectManager.put("project_optin_is_new","false");
								}
							}
	  					}
	  					catch(Exception e)
	  					{
							e.printStackTrace();
	  					}
					}
					else if((getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).equalsIgnoreCase("com.trinity.ea.design.payments.EADesignerPaymentsPanel")==true)
					{
            				EADesignerPaymentsPanel eadop1 = (EADesignerPaymentsPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance();
		             		setContentPanel(eadop1.setParentComp(this));
	 	 				try
	  					{
							if(ProjectManager.get("project_payment_processing_is_new")!=null)
	 						{
								if(ProjectManager.get("project_payment_processing_is_new").equalsIgnoreCase("true")==true)
								{
									eadop1.getFireConfigurationWizardActionNoHide();
									ProjectManager.put("project_payment_processing_is_new","false");
								}
							}
	  					}
	  					catch(Exception e)
	  					{
							e.printStackTrace();
	  					}
					}
					else if((getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).equalsIgnoreCase("com.trinity.ea.design.build.EADesignerBuildPanel")==true)
					{
            				EADesignerBuildPanel eadop1 = (EADesignerBuildPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance();
		             		setContentPanel(eadop1.setParentComp(this));
					}
					else if((getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).equalsIgnoreCase("com.trinity.ea.design.project.EADesignerProjectPanel")==true)
					{
            				EADesignerProjectPanel eadop1 = (EADesignerProjectPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance();
		             		setContentPanel(eadop1.setParentComp(this));
					}
					else
					{
                            		setContentPanel(((EAPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance()).setParentComp(this));
					}
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }   
    }
    catch(Exception e)
    {
	e.printStackTrace();
    }
  }    
 
 boolean isEntered = false;
 private void setMouseEnteredMenuLabel(SBTab theEnteredLabel)
 {
    isEntered = true;
    try
    {
        theEnteredLabelReference = theEnteredLabel;
        if(theEnteredLabel.equals(TheMenuLabelReference)==false)
        {
            theEnteredLabel.setTheIcon(arrowMouseOverIcon);
            if(pressedSelected==true)
            {
                
                TheMenuLabelReference.setForegroundColor(theTextMenuColor);
            }
        }
        else
        {
            if(pressedSelected==true)
            {
                TheMenuLabelReference.setForegroundColor(theSelectedMenuColor);    
            }
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }     
 }
 private void setMouseExitedMenuLabel(SBTab theExitedLabel)
 {
    isEntered = false;
    try
    {
        if(theExitedLabel.equals(TheMenuLabelReference)==false)
        {
            theExitedLabel.setTheIcon(arrowIcon);   
        }
        else
        {
            theEnteredLabelReference.setForegroundColor(theTextMenuColor);           
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }

  private void setMousePressedMenuLabel(SBTab thePressedLabel)
 {
    try
    {
        thePressedLabelReference = thePressedLabel;
        if(thePressedLabel.equals(TheMenuLabelReference)==false)
        {
            thePressedLabel.setBackgroundColor(theSelectedMenuColor); 
	  	thePressedLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        }
        else
        {
            pressedSelected=true; 
            thePressedLabel.setForegroundColor(theSelectedMenuColor);
        }
    }
    catch(Exception e)
    {
        System.out.println(e);
    }  
 }
 
 private void setMouseReleasedMenuLabel(SBTab theReleasedLabel)
 {
    try
    {
        pressedSelected = false;
        if(theEnteredLabelReference.equals(thePressedLabelReference)==false || isEntered == false)
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==false)
            {
                thePressedLabelReference.setBackgroundColor(theCurrentMenuColor);
		    thePressedLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
            }
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }           
        }
        else
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }
		else
		{
		    try
		    {
 		        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
			  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
 		        TheMenuLabelReference.setTheIcon(arrowIcon);
 		        thePressedLabelReference.setTheIcon(arrowSelectedIcon);
 		        TheMenuLabelReference = thePressedLabelReference;
             		setContentPanel(((EAPanel)Class.forName(getSidebarComponentID(theReleasedLabel.getComponentLocalizationID())).newInstance()).setParentComp(this));
    		    }
		    catch(Exception e)
		    {
		        e.printStackTrace();
		    }
		}
        }
        
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }  
 } 
    private static synchronized Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        try
        {
            while(textArrayString.indexOf(",")!=-1)
            {
                tempString = textArrayString.substring(0,textArrayString.indexOf(","));
                textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
                aryList.add(tempString);
            }
            aryList.add(textArrayString);
            aryList.trimToSize();
        }
        catch(NullPointerException e)
        {
         
        }

        return aryList.toArray();
    }  

private synchronized String getSidebarComponentID(String compRefID)
{
	try
	{
		return (String)sbMap.get(compRefID);
	}
	catch(Exception e)
	{
	e.printStackTrace();
	}
	return "";
}

private synchronized void initSidebar()
{
try
{
	Object[] sbUIStrings = getStringArraysFromString(DesignerRuleBuilder.get("sbMainStrings"));
	Object[] sbUIActions = getStringArraysFromString(DesignerRuleBuilder.get("sbMainActionPanels"));
//sbMap

                    for(int i = 0;i<sbUIStrings.length;i++)
                    {
                        try
				{
					sbMap.put((String)sbUIStrings[i],(String)sbUIActions[i]);
					//LeftMenuButtonPanel.add(new SBTab((String)sbUIStrings[i],sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque));
				}
				catch(Exception e)
				{
					sbMap.put((String)sbUIStrings[i],"");
				} 
                    }
}
catch(Exception e)
{
	e.printStackTrace();
}
}
    JCheckBox cb = new JCheckBox();
    private void cbItemStateChanged(java.awt.event.ItemEvent evt) {
                        if(cb.isSelected()==true)
            		{
                			DesignerRuleBuilder.setEnclosedDirProject("true");
            		}
            		else
            		{
                			DesignerRuleBuilder.setEnclosedDirProject("false");
            		}
    }

	private String[] getRecentFileListToFileNamesList(String[] strArray)
	{
	
		String[] tempStrArray = new String[strArray.length];
		try
		{
		for(int i=0;i<strArray.length;i++)
		{
			tempStrArray[i]=DesignerRuleBuilder.getProjectFileName(strArray[i]);
		}
			return tempStrArray;
		}
		catch(Exception e)
		{
			return tempStrArray;
		}
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private SBTab LeftMenuAutoUpdateLabel;
    private SBTab LeftMenuBuildLabel;
    private javax.swing.JPanel LeftMenuButtonPanel;
    private SBSpacer LeftMenuControlAreaPanel;
    private javax.swing.JPanel LeftMenuControlAreaPanel3;
    private SBTab LeftMenuEMailOptinLabel;
    private SBTab LeftMenuEvaluationLabel;
    private javax.swing.JButton LeftMenuHelpButton;
    private javax.swing.JPanel LeftMenuHelpButtonPanel;
    private javax.swing.JPanel LeftMenuHelpSpacerPanel;
    private SBTab LeftMenuMessagingLabel;
    private javax.swing.JPanel LeftMenuPanel;
    private javax.swing.JPanel LeftMenuPanelBottomPanel;
    private SBTab LeftMenuPanelTopPanel;
    private SBTab LeftMenuPaymentsLabel;
    private SBTab LeftMenuProjectLabel;
    private SBTab LeftMenuRegistrationLabel;
    private javax.swing.JPanel RightContentPanel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuBar eaMenuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenu openRecentMenuItem;
    private javax.swing.JSeparator openSaveSeparator;    
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveCopyAsMenuItem;
    private javax.swing.JMenuItem revertToSavedMenuItem;
    private javax.swing.JSeparator saveExitSeparator;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu designerMenu;
    private javax.swing.JMenuItem autoUpdateBuilderMenuItem;
    private javax.swing.JMenu newMenu;

    private javax.swing.JMenuItem newMessageMenuItem;
    private javax.swing.JMenuItem newUpdateMenuItem;

    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JSeparator clearSeparator;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JMenuItem messageBuilderMenuItem;

    private javax.swing.JMenuItem startWizardMenuItem;
    private javax.swing.JSeparator aboutSeparator;
    private javax.swing.JMenuItem checkForUpdatesMenuItem;
    private javax.swing.JMenuItem registerMenuItem;
    private javax.swing.JSeparator registerSeparator;
    private javax.swing.JMenuItem eaHelpMenuItem;

    private javax.swing.JMenu wizardMenu;
    private javax.swing.JPanel headerCenterGroupBottomPanel;
    private javax.swing.JPanel headerCenterGroupPanel;
    private javax.swing.JPanel headerCenterGroupTopPanel;
    private javax.swing.JPanel headerContentPanel;
    private javax.swing.JPanel headerLeftGroupBottomPanel;
    private javax.swing.JPanel headerLeftGroupPanel;
    private javax.swing.JPanel headerLeftGroupTopPanel;
    private javax.swing.JPanel headerRightGroupBottomPanel;
    private javax.swing.JPanel headerRightGroupTopPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mainContentPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel rightHeaderGroupPanel;
    private javax.swing.JLabel rttopheader;
    private javax.swing.JPanel subMainPanel;
private UpperLeftCorner mainMenuUpperCorner;

    // End of variables declaration//GEN-END:variables
  private EAPanel TheContentPanelReference = new EAPanel();
  private void setContentPanel(EAPanel theContentPanel)
  {
    try
    {
	  getDataUpdate();
	  TheContentPanelReference.setVisible(false);
        RightContentPanel.remove(TheContentPanelReference);        
        TheContentPanelReference = theContentPanel;
        RightContentPanel.add(TheContentPanelReference);     
        TheContentPanelReference.setVisible(true);
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
  }

  public void getDataUpdate()
  {
	try
	{
		TheContentPanelReference.getDataUpdate();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
  }
      private boolean saveFileExists(String saveFileURL2)
	{
		for(int i = 0;i<saveFileArray.length;i++)
		{
			if(saveFileURL2.equalsIgnoreCase(saveFileArray[i])==true)
			{
				return true;
			}
		}
		return false;
	}
	
	/** Preview the built EvaluateAnywhere Application Support - returns true. Return false on could not preview. */
	public boolean getEAPreview()
	{
		return getPreview();
	}

	private boolean getPreview()
	{
		try
		{
			try
			{
				PreviewIndexHandler.reset();
			}
			catch(Exception e){}
			File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
			if(theEATempDir.exists()==false)
			{
				try
				{
					theEATempDir.mkdirs();
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			//copy files from build dir to tempdir
			copyDirectoryDeleteOnExit(new File(new URL(ProjectManager.get("project_build_dir")).getFile()), theEATempDir);	
                  if(ProjectManager.get("allowInternalStartTrialInstanciation")!=null)
                  {
                      if(ProjectManager.get("allowInternalStartTrialInstanciation").equalsIgnoreCase("false")==true)
                      {     
				try
				{                   
 					String[] cmdStrArray = {"java", "-jar",theEATempDir.getAbsolutePath() + "/easigner.jar", "-secret", theEATempDir.getAbsolutePath() + "/" + "rules.eae"};
					java.util.List cmd = Arrays.asList(cmdStrArray);
					builder = new ProcessBuilder(cmd);
 					builder.directory(theEATempDir);
					sign = builder.start ();
				}
				catch(Exception e)
				{
					return false;
				}                          
                      }
                  }
			String[] cmdStrArray = {"java", "-jar",theEATempDir.getAbsolutePath() + "/" + ProjectManager.get("project_jarfile_name")};
			java.util.List cmd = Arrays.asList(cmdStrArray);
			builder = new ProcessBuilder(cmd);
 			builder.directory(theEATempDir);
			p = builder.start ();

			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}

    /** Terminate a build preview process, if !=null). */
    public void getTerminateEAPreview()
    {
	getTerminatePreview();
    }
    
    private void getTerminatePreview()
    {
	try
	{
		if(p!=null)
		{
			p.destroy();
			if(sign!=null)
			{
				sign.destroy();
			}
			builder = null;
			p = null;
			sign = null;
		}
	}
	catch(Exception e)
	{

	}
    }

    // Copies src file to dst file.
    // If the dst file does not exist, it is created
    private static void copy(File src, File dst) throws IOException 
    {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
    
        // Transfer bytes from in to out
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) 
        {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        dst.setLastModified(src.lastModified());
    }   

     // Copies all files under srcDir to dstDir.
    // If dstDir does not exist, it will be created.
    public static void copyDirectory(File srcDir, File dstDir) throws IOException 
    {
        if (srcDir.isDirectory()) 
        {
            if (!dstDir.exists()) 
            {
                dstDir.mkdir();
            }
    
            String[] children = srcDir.list();
            for (int i=0; i<children.length; i++) 
            {
                copyDirectory(new File(srcDir, children[i]),new File(dstDir, children[i]));
            }
        } 
        else 
        {
            // This method is implemented in e1071 Copying a File
            copy(srcDir, dstDir);
        }
    }  

    // Copies src file to dst file and deletes the file on exit.
    // If the dst file does not exist, it is created
    private static void copyDeleteOnExit(File src, File dst) throws IOException 
    {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
    
        // Transfer bytes from in to out
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) 
        {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        dst.setLastModified(src.lastModified());
	  dst.deleteOnExit();
    }   
     // Copies all files under srcDir to dstDir.
    // If dstDir does not exist, it will be created.
    public static void copyDirectoryDeleteOnExit(File srcDir, File dstDir) throws IOException 
    {
        if (srcDir.isDirectory()) 
        {
            if (!dstDir.exists()) 
            {
                dstDir.mkdir();
		    dstDir.deleteOnExit();
            }
    
            String[] children = srcDir.list();
            for (int i=0; i<children.length; i++) 
            {
                copyDirectory(new File(srcDir, children[i]),new File(dstDir, children[i]));
            }
        } 
        else 
        {
            copyDeleteOnExit(srcDir, dstDir);
        }
    }  
      private void setSaveAsProject(String saveFileURL2)
	{
		saveProjectIsSet=true;
		saveFileURL=saveFileURL2;
		String[] tempStringArray = new String[saveFileArray.length + 1];
		tempStringArray[0]=saveFileURL2;
		if(saveFileArray.length>0)
		{
			for(int i = 1;i<saveFileArray.length;i++)
			{
				tempStringArray[i]=saveFileArray[i-1];
			}
		}
		recentFileListArray = tempStringArray;
	}

      private void setOpenOtherProject(String openFileURL2)
	{
		saveProjectIsSet=false;
		saveFileURL=openFileURL2;
		String[] tempStringArray = new String[saveFileArray.length + 1];
		tempStringArray[0]=openFileURL2;
		if(saveFileArray.length>0)
		{
			for(int i = 1;i<saveFileArray.length;i++)
			{
				tempStringArray[i]=saveFileArray[i-1];
			}
		}
	}

// Begin Designer Application Management Methods

public void setExitApplication()
{
	  try      
  	  {
		if(saveProjectIsSet==true)
		{
			SaveDialog sd = new SaveDialog(this,true);
			//sd.setVisible(true);
			int retCode2 = sd.getMethod();
			if(retCode2==0)
			{
				sd.dispose();
				DesignerRuleBuilder.setWorkingProject(DesignerRuleBuilder.getTempProject());
				setSaveProject();				
				if(DesignerRuleBuilder.get("actExitAction")!=null)
				{
      	      		Class.forName(DesignerRuleBuilder.get("actExitAction")).newInstance();
				}	
			}
			else if(retCode2==1)
			{
				sd.dispose();
				if(DesignerRuleBuilder.get("actExitAction")!=null)
				{
      	      		Class.forName(DesignerRuleBuilder.get("actExitAction")).newInstance();
				}
			}
			else
			{
				sd.dispose();
				return;
			}
		}
		else
		{
			if(DesignerRuleBuilder.get("actExitAction")!=null)
			{
            		Class.forName(DesignerRuleBuilder.get("actExitAction")).newInstance();
			}
		}
        }
        catch(InstantiationException e)
        {
            e.printStackTrace();
		System.exit(1);
        }   
        catch(IllegalAccessException e)
        {
            e.printStackTrace();
		System.exit(1);
        }                      
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
		System.exit(1);
        }     
		System.exit(1);
}
	public void getNewProjectWizardGUIUpdate()
	{
		try
		{
			setSelectedMenuItem(TheMenuLabelReference);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
// End Designer Application Management Methods


// Begin Designer GUI Project File Management Methods.

/** Create a new project - GUI component. */
private void setNewProject()
{
	try
	{
	  int intResult = JFileChooser.CANCEL_OPTION;
        boolean isCreated=false;
        try
        {
            fileView.putIcon("eax", theAppIcon);
            fc.setFileView(fileView);
            filter.addExtension("eax");
            filter.setDescription("EvaluateAnywhere Project Files");
            fc.setFileFilter(filter);    
            fc.setDialogTitle("Save new project as");
            
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
     			       cb.setSelected(true);
			  }
			  else
		  	  {
 		           cb.setSelected(false);
			  }
		   }

            cb.setText("Create Enclosing Folder for Project");
        cb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbItemStateChanged(evt);
            }
        });
            JPanel jcomp = (JPanel)fc.getComponent(2);
            jcomp.add(cb,java.awt.BorderLayout.SOUTH);
fc.setSelectedFile(new File("My_Product.eax"));
            intResult = fc.showSaveDialog(this); 
if(intResult==JFileChooser.APPROVE_OPTION)
{
            URL theProjectURL = fc.getSelectedFile().toURL();
	      if(theProjectURL.toString().endsWith(".eax")==false)
		{
			try
			{
				theProjectURL = new URL(theProjectURL.toString() + ".eax");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
            if(DesignerRuleBuilder.setTempProject(theProjectURL.toString())==true)
            {
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDirect2 = new File(new URL(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf("."))).getFile());   
                              if(theDirect2.exists()==false)
                              {
                                  if(theDirect2.mkdirs()==true)
                                  {
							DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
							try
							{
								File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
								theEATempDir.mkdirs();
								File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
								tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
								newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                             			}
							catch(Exception e)
							{
								e.printStackTrace();
							}
						}
                                  else
                                  {
                                      //System.out.println("Failed to create Designer Project Enclosed Directory.");
                                  }
                                  //System.out.println("Created Project Directory: " + isCreated);
                              }
					else
					{
						DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
	
						try
						{
							File theEATempDir = new File(new URL(theTempFile.substring(0, theTempFile.lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
							theEATempDir.mkdirs();
							File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",theEATempDir);
							tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
							newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                                  	}
						catch(Exception e)
						{
							e.printStackTrace();
						}
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                    else
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDesignerFile = null; 
					try
					{
						File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
						theEATempDir.mkdirs();
						File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
						tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
						newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                             	}
					catch(Exception e)
					{
						e.printStackTrace();
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                }
                
               // System.out.println("Successfully set save file vars in Designer Rules.");                
            }
            else
            {
                System.out.println("Failed to set save file vars in Designer Rules.");
            }
	    }
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }        
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        }      
        catch(Exception e)
        {
            e.printStackTrace();
        } 
if(intResult==JFileChooser.APPROVE_OPTION)
{
			if(DesignerRuleBuilder.getTempProject()!=null)
			{
				try
				{	
					setSaveAsProject(DesignerRuleBuilder.getTempProject());
					try
					{
     						setTitle(DesignerRuleBuilder.get("eaProductName") + " " + DesignerRuleBuilder.get("eaEditionName") + " - " + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).substring(0,DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).lastIndexOf(".")) + " (" + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()) + ")");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
				}
				catch(Exception ee)
				{
					ee.printStackTrace();
				}
			}
}

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }   
}

/** Create a new EvaluateAnywhere project - UI component loads project with no GUI. */
private void setNewProject(String strFileURL)
{
	try
	{
        boolean isCreated=false;
        try
        {
            URL theProjectURL = new URL(strFileURL);
	      if(theProjectURL.toString().endsWith(".eax")==false)
		{
			try
			{
				theProjectURL = new URL(theProjectURL.toString() + ".eax");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
            if(DesignerRuleBuilder.setTempProject(theProjectURL.toString())==true)
            {
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDirect2 = new File(new URL(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf("."))).getFile());   
                              if(theDirect2.exists()==false)
                              {
                                  if(theDirect2.mkdirs()==true)
                                  {
							DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
							try
							{
								File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
								theEATempDir.mkdirs();
								File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
								tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
								newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                             			}
							catch(Exception e)
							{
								e.printStackTrace();
							}
						}
                                  else
                                  {
                                      //System.out.println("Failed to create Designer Project Enclosed Directory.");
                                  }
                                  //System.out.println("Created Project Directory: " + isCreated);
                              }
					else
					{
						DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
						try
						{
							File theEATempDir = new File(new URL(theTempFile.substring(0, theTempFile.lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
							theEATempDir.mkdirs();
							File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",theEATempDir);
							tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
							newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                                  	}
						catch(Exception e)
						{
							e.printStackTrace();
						}
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                    else
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDesignerFile = null; 
					try
					{
						File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
						theEATempDir.mkdirs();
						File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
						tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
						newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                             	}
					catch(Exception e)
					{
						e.printStackTrace();
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                }
                
               // System.out.println("Successfully set save file vars in Designer Rules.");                
            }
            else
            {
                System.out.println("Failed to set save file vars in Designer Rules.");
            }
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        }    
        catch(Exception e)
        {
            e.printStackTrace();
        } 
			if(DesignerRuleBuilder.getTempProject()!=null)
			{
				try
				{	
					setSaveAsProject(DesignerRuleBuilder.getTempProject());
					try
					{
     						setTitle(DesignerRuleBuilder.get("eaProductName") + " " + DesignerRuleBuilder.get("eaEditionName") + " - " + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).substring(0,DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).lastIndexOf(".")) + " (" + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()) + ")");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
/*
					if(LeftMenuProjectLabel!=null)
					{
	  					setSelectedMenuItem(LeftMenuProjectLabel);
					}
*/
				}
				catch(Exception ee)
				{
					ee.printStackTrace();
				}
			}
	  }
        catch(Exception e)
        {
            e.printStackTrace();
        }   
}

/*
private void setNewProject(String strFileURL)
{
	try
	{
        boolean isCreated=false;
        try
        {
            URL theProjectURL = new URL(strFileURL);
	      if(theProjectURL.toString().endsWith(".eax")==false)
		{
			try
			{
				theProjectURL = new URL(strFileURL + ".eax");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
            if(DesignerRuleBuilder.setTempProject(strFileURL)==true)
            {
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDirect2 = new File(new URL(theTempFile.substring(0,theTempFile.lastIndexOf("/"))).getFile()); 
                              if(theDirect2.exists()==false)
                              {
                                  if(theDirect2.mkdirs()==true)
                                  {
							DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFile.substring(theTempFile.lastIndexOf("/")));
							try
							{
								File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
								theEATempDir.mkdirs();
								File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
								tmpFile.deleteOnExit();

								newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                             			}
							catch(Exception e)
							{
								e.printStackTrace();
							}
						}
                                  else
                                  {
                                      //System.out.println("Failed to create Designer Project Enclosed Directory.");
                                  }
                                  //System.out.println("Created Project Directory: " + isCreated);
                              }
					else
					{
						DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFile.substring(theTempFile.lastIndexOf("/")));
	
						try
						{
							File theEATempDir = new File(new URL(theTempFile.substring(0, theTempFile.lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
							theEATempDir.mkdirs();
							File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",theEATempDir);
							tmpFile.deleteOnExit();
							newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                                  	}
						catch(Exception e)
						{
							e.printStackTrace();
						}
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                    else
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDesignerFile = null; 
					try
					{
						File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
						theEATempDir.mkdirs();
						File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
						tmpFile.deleteOnExit();
						newProject(tmpFile, DesignerRuleBuilder.getTempProject());
                             	}
					catch(Exception e)
					{
						e.printStackTrace();
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                }
                
                //System.out.println("Successfully set save file vars in Designer Rules.");                
            }
            else
            {
                System.out.println("Failed to set save file vars in Designer Rules.");
            }
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        }
        catch(IOException e)
        {
              e.printStackTrace();          
        }        
        catch(Exception e)
        {
            e.printStackTrace();
        } 
			if(DesignerRuleBuilder.getTempProject()!=null)
			{
				try
				{	
					setSaveAsProject(DesignerRuleBuilder.getTempProject());
					try
					{
     						setTitle(DesignerRuleBuilder.get("eaProductName") + " " + DesignerRuleBuilder.get("eaEditionName") + " - " + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).substring(0,DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).lastIndexOf(".")) + " (" + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()) + ")");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
				}
				catch(Exception ee)
				{
					ee.printStackTrace();
				}
			}
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }   
}
*/

/** Open an existing EvaluateAnywhere project - GUI component. */
public void setOpenProject()
{
try  	
  {
	int intResult = JFileChooser.CANCEL_OPTION;
	try
	{
            fileView.putIcon("eax", theAppIcon);
            fc.setFileView(fileView);
            filter.addExtension("eax");
            filter.setDescription("EvaluateAnywhere Project Files");
            fc.setFileFilter(filter);    
            fc.setDialogTitle("Open Project File");

            intResult = fc.showOpenDialog(this);
if(intResult==JFileChooser.APPROVE_OPTION)
{
            File selFile = fc.getSelectedFile();
            URL theProjectURL = fc.getSelectedFile().toURL();
            if(selFile.exists()==false)
            {
                setNewProject(theProjectURL.toString());
		    ProjectManager.setProjectDefaults();
		    ProjectManager.setEAProjectLookAndFeelDefaults();
            }
            else
            {
                if(DesignerRuleBuilder.setTempProject(theProjectURL.toString())==true)
                {
                    //System.out.println("Successfully set open file vars in Designer Rules."); 
			  setAppendToRecentProjectsList(DesignerRuleBuilder.getTempProject());
                }
                else
                {
                    //System.out.println("Failed to set open file vars in Designer Rules.");
                }
            }
}
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }       
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        } 
        catch(Exception e)
        {
            e.printStackTrace();
        }        
if(intResult==JFileChooser.APPROVE_OPTION)
{
  			if(DesignerRuleBuilder.getTempProject()!=null)
			{
				try
				{	
					setOpenOtherProject(DesignerRuleBuilder.getTempProject());
					try
					{
     						setTitle(DesignerRuleBuilder.get("eaProductName") + " " + DesignerRuleBuilder.get("eaEditionName") + " - " + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).substring(0,DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).lastIndexOf(".")) + " (" + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()) + ")");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					try
					{
						File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
						tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
						openProject(tmpFile, DesignerRuleBuilder.getTempProject());
						DesignerRuleBuilder.setWorkingProject(DesignerRuleBuilder.getTempProject());
                              }
					catch(Exception e)
					{
						e.printStackTrace();
					}
				}
				catch(Exception ee)
				{
					ee.printStackTrace();
				}
			}
			if(LeftMenuProjectLabel!=null)
			{
	  			setSelectedMenuItem(LeftMenuProjectLabel);
			}
		}
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }   
}

/** Open an existing EvaluateAnywhere project - UI component loads project with no GUI. */
private void setOpenFile(String strFile)
{
	try  	
  	{
		try
		{
            File selFile = new File(new URL(strFile).getFile());
            if(selFile.exists()==false)
            {
                setNewProject(strFile);
		    ProjectManager.setProjectDefaults();
		    ProjectManager.setEAProjectLookAndFeelDefaults();
            }
            else
            {
                if(DesignerRuleBuilder.setTempProject(strFile)==true)
                {
			  setAppendToRecentProjectsList(strFile);
                    //System.out.println("Successfully set open file vars in Designer Rules."); 
                }
                else
                {
                    //System.out.println("Failed to set open file vars in Designer Rules.");
                }
            }
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }       
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        }       
        catch(Exception e)
        {
            e.printStackTrace();
        }        

  	  if(DesignerRuleBuilder.getTempProject()!=null)
	  {
		try
		{	
			setOpenOtherProject(DesignerRuleBuilder.getTempProject());
			try
			{
     				setTitle(DesignerRuleBuilder.get("eaProductName") + " " + DesignerRuleBuilder.get("eaEditionName") + " - " + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).substring(0,DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).lastIndexOf(".")) + " (" + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()) + ")");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			try
			{
                            File tmpDirs = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
                            if(tmpDirs.exists()==false)
                            {
                                tmpDirs.mkdirs();
                            }
                            File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
                            tmpFile.deleteOnExit();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
                            openProject(tmpFile, DesignerRuleBuilder.getTempProject());
                        }
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		catch(Exception ee)
		{
			ee.printStackTrace();
		}
	  }
     }
     catch(Exception e)
     {
         e.printStackTrace();
     }   
}
/** A convenience method for saving the project via the New Project Wizard. */
public void setSaveEAProject()
{
	setSaveProject();
}

/** Save the current EvaluateAnywhere project - UI component saves project with no GUI. */
private void setSaveProject()
{
	try
	{
		saveProject();
	  	setAppendToRecentProjectsList(DesignerRuleBuilder.getTempProject());
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

/** Save the current EvaluateAnywhere project as a different project name - GUI component. */
private void setSaveProjectAs()
{
	try
	{
	  int intResult = JFileChooser.CANCEL_OPTION;
        boolean isCreated=false;
	  File FirstDir = null;
	  try
	  {
	  	FirstDir = new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/");
	  }
	  catch(Exception e)
	  {

	  }
        try
        {
	      fileView.putIcon("eax", theAppIcon);
            fc.setFileView(fileView);
            filter.addExtension("eax");
            filter.setDescription("EvaluateAnywhere Project Files");
            fc.setFileFilter(filter);    
            fc.setDialogTitle("Save project as...");
            
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
     			       cb.setSelected(true);
			  }
			  else
		  	  {
 		           cb.setSelected(false);
			  }
		   }

            cb.setText("Create Enclosing Folder for Project");
        cb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbItemStateChanged(evt);
            }
        });
            JPanel jcomp = (JPanel)fc.getComponent(2);
            jcomp.add(cb,java.awt.BorderLayout.SOUTH);
fc.setSelectedFile(new File("My_Product.eax"));
            intResult = fc.showSaveDialog(this);
if(intResult==JFileChooser.APPROVE_OPTION)
{
            URL theProjectURL = fc.getSelectedFile().toURL();
	      if(theProjectURL.toString().endsWith(".eax")==false)
		{
			try
			{
				theProjectURL = new URL(theProjectURL.toString() + ".eax");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
            if(DesignerRuleBuilder.setTempProject(theProjectURL.toString())==true)
            {

                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDirect2 = new File(new URL(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf("."))).getFile());   
                              if(theDirect2.exists()==false)
                              {
                                  if(theDirect2.mkdirs()==true)
                                  {
							DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
	  	    					setAppendToRecentProjectsList(DesignerRuleBuilder.getTempProject());
							try
							{
								File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
								theEATempDir.mkdirs();
								File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
								tmpFile.deleteOnExit();
								saveProjectAs(tmpFile, DesignerRuleBuilder.getTempProject());
								try
								{
									copyDirectory(FirstDir, new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/"));
								}
								catch(Exception e)
								{
									
								}
                             			}
							catch(Exception e)
							{
								e.printStackTrace();
							}
						}
                                  else
                                  {
                                      //System.out.println("Failed to create Designer Project Enclosed Directory.");
                                  }
                                  //System.out.println("Created Project Directory: " + isCreated);
                              }
					else
					{
						DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
	
						try
						{
							File theEATempDir = new File(new URL(theTempFile.substring(0, theTempFile.lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
							theEATempDir.mkdirs();
							File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",theEATempDir);
							tmpFile.deleteOnExit();
							saveProjectAs(tmpFile, DesignerRuleBuilder.getTempProject());
							try
							{
								copyDirectory(FirstDir, new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/"));
							}
							catch(Exception e)
							{
								
							}
                                  	}
						catch(Exception e)
						{
							e.printStackTrace();
						}
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                    else
                    {
                        try
                        {
	  	    			setAppendToRecentProjectsList(DesignerRuleBuilder.getTempProject());
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDesignerFile = null; 
					try
					{
						File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
						theEATempDir.mkdirs();
						File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
						tmpFile.deleteOnExit();
						saveProjectAs(tmpFile, DesignerRuleBuilder.getTempProject());
						try
						{
							copyDirectory(FirstDir, new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/"));
						}
						catch(Exception e)
						{
							
						}
                             	}
					catch(Exception e)
					{
						e.printStackTrace();
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                }
                
                //System.out.println("Successfully set save file vars in Designer Rules.");                
            }
            else
            {
                System.out.println("Failed to set save file vars in Designer Rules.");
            }
		}
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        }       
        catch(Exception e)
        {
            e.printStackTrace();
        } 
if(intResult==JFileChooser.APPROVE_OPTION)
{
			if(DesignerRuleBuilder.getTempProject()!=null)
			{
				try
				{	
					setSaveAsProject(DesignerRuleBuilder.getTempProject());
					DesignerRuleBuilder.setWorkingProject(DesignerRuleBuilder.getTempProject());

					try
					{
     						setTitle(DesignerRuleBuilder.get("eaProductName") + " " + DesignerRuleBuilder.get("eaEditionName") + " - " + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).substring(0,DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()).lastIndexOf(".")) + " (" + DesignerRuleBuilder.getProjectFileName(DesignerRuleBuilder.getTempProject()) + ")");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
				}
				catch(Exception ee)
				{
					ee.printStackTrace();
				}
			}
}
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }   
}

/** Save a copy of the current EvaluateAnywhere project, and continue using the current EvaluateAnywhere project (does not load copy of project). - GUI component. */
private void setSaveProjectCopyAs()
{
	try
	{
	  int intResult = JFileChooser.CANCEL_OPTION;
	  String strSaveProjectCopy = DesignerRuleBuilder.getTempProject();
        boolean isCreated=false;
	  File FirstDir = null;
	  try
	  {
	  	FirstDir = new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/");
	  }
	  catch(Exception e)
	  {

	  }
        try
        {
            fileView.putIcon("eax", theAppIcon);
            fc.setFileView(fileView);
            filter.addExtension("eax");
            filter.setDescription("EvaluateAnywhere Project Files");
            fc.setFileFilter(filter);    
            fc.setDialogTitle("Save project copy as...");
            
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
     			       cb.setSelected(true);
			  }
			  else
		  	  {
 		           cb.setSelected(false);
			  }
		   }

            cb.setText("Create Enclosing Folder for Project");
        cb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbItemStateChanged(evt);
            }
        });
            JPanel jcomp = (JPanel)fc.getComponent(2);
            jcomp.add(cb,java.awt.BorderLayout.SOUTH);
	      fc.setSelectedFile(new File("Copy of " + DesignerRuleBuilder.getTempProject().substring(DesignerRuleBuilder.getTempProject().lastIndexOf("/") + 1)));
            intResult = fc.showSaveDialog(this); 
if(intResult==JFileChooser.APPROVE_OPTION)
{
            URL theProjectURL = fc.getSelectedFile().toURL();
	      if(theProjectURL.toString().endsWith(".eax")==false)
		{
			try
			{
				theProjectURL = new URL(theProjectURL.toString() + ".eax");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
            if(DesignerRuleBuilder.setTempProject(theProjectURL.toString())==true)
            {
                if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder")!=null)
                {
                    if(DesignerRuleBuilder.get("prjDefaultCreateEnclosingFolder").equalsIgnoreCase("true")==true)
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDirect2 = new File(new URL(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf("."))).getFile());   
                              if(theDirect2.exists()==false)
                              {
                                  if(theDirect2.mkdirs()==true)
                                  {
							DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
							try
							{
								File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
								theEATempDir.mkdirs();
								File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
								tmpFile.deleteOnExit();
								saveProjectCopyAs(DesignerRuleBuilder.getTempProject());
								try
								{
									copyDirectory(FirstDir, new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/"));
								}
								catch(Exception e)
								{
									
								}
                             			}
							catch(Exception e)
							{
								e.printStackTrace();
							}
						}
                                  else
                                  {
                                      //System.out.println("Failed to create Designer Project Enclosed Directory.");
                                  }
                                  //System.out.println("Created Project Directory: " + isCreated);
                              }
					else
					{
						DesignerRuleBuilder.setTempProject(theTempFile.substring(0,theTempFile.lastIndexOf("/") + 1) + theTempFileDir.substring(0,theTempFileDir.lastIndexOf(".")) + theTempFile.substring(theTempFile.lastIndexOf("/")));
	
						try
						{
							File theEATempDir = new File(new URL(theTempFile.substring(0, theTempFile.lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
							theEATempDir.mkdirs();
							File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",theEATempDir);
							tmpFile.deleteOnExit();
							saveProjectCopyAs(DesignerRuleBuilder.getTempProject());
							try
							{
								copyDirectory(FirstDir, new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/"));
							}
							catch(Exception e)
							{
								
							}
                                  	}
						catch(Exception e)
						{
							e.printStackTrace();
						}
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                    else
                    {
                        try
                        {
                            String theTempFile = DesignerRuleBuilder.getTempProject();
                            String theTempFileDir = DesignerRuleBuilder.getProjectFileName(theTempFile);
                            File theDesignerFile = null; 
					try
					{
						File theEATempDir = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile());
						theEATempDir.mkdirs();
						File tmpFile = new File(new URL(DesignerRuleBuilder.getTempProject().substring(0,DesignerRuleBuilder.getTempProject().lastIndexOf("/"))).getFile()).createTempFile("Project","tmp",new File(new URL(DesignerRuleBuilder.getTempProject().substring(0, DesignerRuleBuilder.getTempProject().lastIndexOf("/")) + "/.eaproject.tmp/").getFile()));
						tmpFile.deleteOnExit();
						saveProjectCopyAs(DesignerRuleBuilder.getTempProject());
						try
						{
							copyDirectory(FirstDir, new File(new URL(DesignerRuleBuilder.getTempProject()).getPath().substring(0, new URL(DesignerRuleBuilder.getTempProject()).getPath().lastIndexOf("/")) + "/locales/"));
						}
						catch(Exception e)
						{
							
						}
                             	}
					catch(Exception e)
					{
						e.printStackTrace();
					}
                        }
                        catch(SecurityException e)
                        {

                          e.printStackTrace();             
                        }
                        catch(Exception e) 
                        {
                            e.printStackTrace();
                        } 
                    }
                }
                
               // System.out.println("Successfully set save file vars in Designer Rules.");                
            }
            else
            {
                System.out.println("Failed to set save file vars in Designer Rules.");
            }
	}
        }
        catch(NullPointerException e)
        {
            //leave empty for cancel action on file dialogs.
        }
        catch(MalformedURLException e)
        {
            e.printStackTrace();
        }
        catch(SecurityException e)
        {
              e.printStackTrace();          
        }  
        catch(Exception e)
        {
            e.printStackTrace();
        } 
if(intResult==JFileChooser.APPROVE_OPTION)
{
			if(DesignerRuleBuilder.getTempProject()!=null)
			{
				try
				{	
					setSaveAsProject(DesignerRuleBuilder.getTempProject());
					DesignerRuleBuilder.setWorkingProject(DesignerRuleBuilder.getTempProject());

				}
				catch(Exception ee)
				{
					ee.printStackTrace();
				}
			}
		setOpenFile(strSaveProjectCopy);
}
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }   
}

/** Revert to the last saved EvaluateAnywhere project file and ignore the changes that were made to the EvaluateAnywhere project after the last save. - UI component reverts to the saved project with no GUI. */
private void setRevertToSavedProject()
{
	try
	{
		if((new File(new URL(DesignerRuleBuilder.getTempProject()).getFile())).exists()==true)
		{
			boolean isReverted = revertToSaved();
			if(isReverted == true)
			{
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
			}
		}
		else
		{
			ProjectManager.setProjectDefaults();
		      ProjectManager.setEAProjectLookAndFeelDefaults();
					if(LeftMenuProjectLabel!=null)
					{
						if(getSidebarComponentID(LeftMenuProjectLabel.getComponentLocalizationID())!=null)
						{
	  						setSelectedMenuItem(LeftMenuProjectLabel);
						}
					}
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

/** Add the specified project to the most recent projects list. */
private boolean setAppendToRecentProjectsList(String recentProjectStringURL)
{
	try
	{
		DesignerRuleBuilder.setWorkingProject(recentProjectStringURL);
		setPopulateOpenRecent();
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}
// End Designer GUI Project File Management Methods.

// Begin Project File Management Methods

/** Create a new project file in the specified File locations. */
private boolean newProject(File temporaryProjectFile, String projectFileStringURL)
{
	try
	{
		ProjectManager.initialize(temporaryProjectFile, projectFileStringURL);
		ProjectManager.setProjectDefaults();
		ProjectManager.setEAProjectLookAndFeelDefaults();
            ProjectLocalesPanel.getMakeLocaleFile(ProjectManager.get("prjdefaultlocale"));
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Open the specified project file. */
private boolean openProject(File temporaryProjectFile, String projectFileStringURL)
{
	try
	{
		ProjectManager.initialize(temporaryProjectFile, projectFileStringURL);
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Save the current EvaluateAnywhere project */
private boolean saveProject()
{
	try
	{
		getDataUpdate();
		ProjectManager.save();
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Save the current EvaluateAnywhere project as a different project name */
private boolean saveProjectAs(File tempFileNewSaveFile, String projectFileStringURLNewSaveFile)
{
	try
	{
		getDataUpdate();
		ProjectManager.saveAs(tempFileNewSaveFile, projectFileStringURLNewSaveFile);
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Save a copy of the current project, and continue using the current project (does not load copy of project). */
private boolean saveProjectCopyAs(String projectFileStringURLNewCopyFile)
{
	try
	{
		getDataUpdate();
		ProjectManager.saveCopyAs(projectFileStringURLNewCopyFile);
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Revert to the last saved project file and ignore the changes that were made to the project after the last save. */
private boolean revertToSaved()
{
	try
	{
		ProjectManager.revertToSaved();
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}// End Project File Management Methods 

// Begin Project Data Access Methods

/** Sets a project value key, and associated value. */
private boolean put(String prjKey, String prjValue)
{
	try
	{
		ProjectManager.put(prjKey, prjValue);
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Sets a project value key, and associated value. Normally a put will write the key/value to the temp file immediately. This put is meant to be used to write multiple puts to the EAProperties file with a single call to saveTempNow() to write the values to the temporary file. */
private boolean putTempNoFileWrite(String propID, String propValue)
{
	try
	{
		ProjectManager.putTempNoFileWrite(propID, propValue);
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Force a write of the temporary project file. This method is intended to be used with putTempNoFileWrite(String propID, String propValue). */
private boolean saveTempNow()
{
	try
	{
		ProjectManager.saveTempNow();
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Returns a project value by project key value. */
private String get(String prjKey)
{
	try
	{
		return ProjectManager.get(prjKey);
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return null;
	}
}

/** Returns a project value by project key value. */
private boolean remove(String prjKey)
{
	try
	{
		ProjectManager.remove(prjKey);
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}

/** Returns a the current project as an EAProperties object. */
private EAProperties getProjectProperties()
{
	try
	{
		return ProjectManager.getProjectProperties();
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return null;
	}
}

/** Returns a the current temporary project as an EAProperties object. */
private EAProperties getTemporaryProjectProperties()
{
	try
	{
		getDataUpdate();
		return ProjectManager.getTemporaryProjectProperties();
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return null;
	}
}
// End Project Data Access Methods

/** Show a basic message JOptionPane centered in the Designer Frame. */
public void showMessageDialog(String message)
{
    JOptionPane.showMessageDialog(this,message);
}
}
