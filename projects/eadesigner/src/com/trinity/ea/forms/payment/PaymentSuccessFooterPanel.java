/*
 * PaymentSuccessFooterPanel.java
 *
 * Created on June 29, 2004, 1:38 PM
 */

package com.trinity.ea.forms.payment;
import com.trinity.ea.rules.reader.EncryptedRuleReader;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import com.trinity.ea.forms.gui.swing.ImageButton;
import java.awt.event.KeyEvent;
import javax.swing.KeyStroke;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;

/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2005 Trinity Software. All rights reserved.
 */
public class PaymentSuccessFooterPanel extends javax.swing.JPanel {
    private ImageIcon btnFace = null;
    private ImageIcon btnFaceOnClick = null;
    private ImageIcon btnFaceInFocus = null;
    private boolean isImageButton = false;
    private int btnWidth = 94;
    private int btnHeight = 31; 
    private Color btnBGColor = new Color(119,151,172);

    /** Creates new form PaymentSuccessFooterPanel */
    public PaymentSuccessFooterPanel() {
	try
	{
	  if(EncryptedRuleReader.get("btnBarImgButtonsEnabled")!=null)
	  {
	  	if(EncryptedRuleReader.get("btnBarImgButtonsEnabled").equalsIgnoreCase("true")==true)
	  	{
			isImageButton=true;
	  		if(EncryptedRuleReader.get("paymentValidateBtnBGColor")!=null)
	  		{
				if(EncryptedRuleReader.get("paymentValidateBtnBGColor").equalsIgnoreCase("")==false)
				{
					Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentValidateBtnBGColor"));
					btnBGColor = new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue());
				}
	  		}
		}
		else
		{
			isImageButton=false;
		}
	  }
	  else
	  {
		isImageButton=false;
	  }


	  if(EncryptedRuleReader.get("paymentImgCancelButtonWidth")!=null)
	  {
	  	if(EncryptedRuleReader.get("paymentImgCancelButtonWidth").equalsIgnoreCase("")==false)
	  	{
			try
			{
				btnWidth = new Integer(EncryptedRuleReader.get("paymentImgCancelButtonWidth")).intValue();
			}
			catch(Exception eee)
			{
				//eee.printStackTrace();
				btnWidth = 94;
			}
		}
		else
		{
			btnWidth = 94;
		}
	  }
	  else
	  {
		btnWidth = 94;
	  }	  
	  if(EncryptedRuleReader.get("paymentImgCancelButtonHeight")!=null)
	  {
	  	if(EncryptedRuleReader.get("paymentImgCancelButtonHeight").equalsIgnoreCase("")==false)
	  	{
			try
			{
				btnHeight = new Integer(EncryptedRuleReader.get("paymentImgCancelButtonHeight")).intValue();
			}
			catch(Exception eee)
			{
				//eee.printStackTrace();
				btnHeight = 31;
			}
		}
		else
		{
			btnHeight = 31;
		}
	  }
	  else
	  {
		btnHeight = 31;
	  }	  

	if(isImageButton==true)
	{
		if(EncryptedRuleReader.get("paymentImgCancelButtonFace")!=null)
		{
			if(EncryptedRuleReader.get("paymentImgCancelButtonFace").equalsIgnoreCase("")==false)
			{
				try
				{
					btnFace = new javax.swing.ImageIcon(getClass().getResource(EncryptedRuleReader.get("paymentImgCancelButtonFace")));
				}
				catch(Exception e)
				{
					//e.printStackTrace();
					isImageButton = false;
				}
			}
		}
		if(EncryptedRuleReader.get("paymentImgCancelButtonFaceOnClick")!=null)
		{
			if(EncryptedRuleReader.get("paymentImgCancelButtonFaceOnClick").equalsIgnoreCase("")==false)
			{
				try
				{
					btnFaceOnClick = new javax.swing.ImageIcon(getClass().getResource(EncryptedRuleReader.get("paymentImgCancelButtonFaceOnClick")));

				}
				catch(Exception e)
				{
					//e.printStackTrace();
					isImageButton = false;
				}
			}
		}
		if(EncryptedRuleReader.get("paymentImgCancelButtonFaceInFocus")!=null)
		{
			if(EncryptedRuleReader.get("paymentImgCancelButtonFaceInFocus").equalsIgnoreCase("")==false)
			{
				try
				{
					btnFaceInFocus = new javax.swing.ImageIcon(getClass().getResource(EncryptedRuleReader.get("paymentImgCancelButtonFaceInFocus")));
				}
				catch(Exception e)
				{
					//e.printStackTrace();
					isImageButton = false;
				}
			}
		}
	  }
	  }
	  catch(Exception e)
	  {
		//e.printStackTrace();
	  }

	if(isImageButton==true)
	{
	  if(btnFace!=null)
	  {
		if(btnFaceOnClick!=null)
		{
			initComponents(true);
		}
		else
		{
			initComponents(false);
		}
	  }
	  else
	  {
        	initComponents(false);
	  }
	}
	else
	{
        	initComponents(false);
	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents(boolean isImgButton) {//GEN-BEGIN:initComponents
        setLayout(null);
	  isImageButton = isImgButton;
	  try
	  {

	  if(isImageButton==true)
	  {
        	btnImageFinish = new ImageButton(btnFace,btnFaceOnClick,btnFaceInFocus,btnWidth,btnHeight);	  }
	  else
	  {
        	btnFinish = new javax.swing.JButton();
	  }


	  if(isImageButton==true)
	  {
	  	if(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonText")!=null)
	  	{
      		btnImageFinish.setText(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonText"));
	 	}
	  	if(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonMnemonic")!=null)
	  	{
	  		if(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonMnemonic").equalsIgnoreCase("")==false)
	  		{
				btnImageFinish.setMnemonic(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonMnemonic").charAt(0));
			}
	  	}
	  	 if(EncryptedRuleReader.get("paymentButtonFont")!=null)
	  	 {
	  		if(EncryptedRuleReader.get("paymentButtonFont").equalsIgnoreCase("")==false)
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentButtonFont"));
      			btnImageFinish.setFont(new java.awt.Font((String)tmpArray[0], new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
	  	  }
        	  btnImageFinish.setMaximumSize(new java.awt.Dimension(btnWidth, btnHeight));
       	  btnImageFinish.setMinimumSize(new java.awt.Dimension(btnWidth, btnHeight));
       	  btnImageFinish.setPreferredSize(new java.awt.Dimension(btnWidth, btnHeight));
      	  btnImageFinish.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImageFinishMouseClicked(evt);
            }
        });

        add(btnImageFinish);
        btnImageFinish.setBounds(413, 4, btnWidth, btnHeight);
	  }
	  else
	  {
	  	if(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonText")!=null)
	  	{
      		btnFinish.setText(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonText"));
	 	}
	  	if(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonMnemonic")!=null)
	  	{
	  		if(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonMnemonic").equalsIgnoreCase("")==false)
	  		{
				btnFinish.setMnemonic(EncryptedRuleReader.getLocaleString("paymentSuccessFinishButtonMnemonic").charAt(0));
			}
	  	}
	  	 if(EncryptedRuleReader.get("paymentButtonFont")!=null)
	  	 {
	  		if(EncryptedRuleReader.get("paymentButtonFont").equalsIgnoreCase("")==false)
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentButtonFont"));
      			btnFinish.setFont(new java.awt.Font((String)tmpArray[0], new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
	  	  }

        	  btnFinish.setMaximumSize(new java.awt.Dimension(btnWidth, btnHeight));
       	  btnFinish.setMinimumSize(new java.awt.Dimension(btnWidth, btnHeight));
       	  btnFinish.setPreferredSize(new java.awt.Dimension(btnWidth, btnHeight));
      	  btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });

        add(btnFinish);
        btnFinish.setBounds(413, 4, btnWidth, 23);
	  }
	  if(EncryptedRuleReader.get("paymentBackgroundColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentBackgroundColor").equalsIgnoreCase("")==false)
		{
			Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentBackgroundColor"));
			setBackgroundColor(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
		}
	  }
	  if(EncryptedRuleReader.get("paymentButtonTextColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentButtonTextColor").equalsIgnoreCase("")==false)
		{
			Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentButtonTextColor"));
			setButtonTextColor(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
		}
	  }
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	  	if(isImageButton==true)
	  	{
	  		setKeyManager();
		}
    }//GEN-END:initComponents

     private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
	getFinishAction();
    }//GEN-LAST:event_btnFinishActionPerformed

    private void btnImageFinishMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImageFinishMouseClicked
	getFinishAction();
    }//GEN-LAST:event_btnImageFinishMouseClicked
   
	private void getFinishAction()
	{
            // TODO: Command Line implementation
            // TODO: MIDP implementation
		try
		{
                if(EncryptedRuleReader.get("paymentReceiptFinishedAction")!=null)
                {
                    try
                    {
                        JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                        theDialog.dispose();
                        Class.forName(EncryptedRuleReader.get("paymentReceiptFinishedAction")).newInstance();
                    }
                    catch(InstantiationException e)
                    {
                        e.printStackTrace();
                    }   
                    catch(IllegalAccessException e)
                    {
                        e.printStackTrace();
                    }                      
                    catch(ClassNotFoundException e)
                    {
                        e.printStackTrace();
                    }       
                }
                else
                {
                    //Problem in Properties File
                }
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

    private void setButtonTextColor(Color FGColor)
    {
	try
	{
		if(isImageButton==true)
		{
			btnImageFinish.setForeground(FGColor);
		}
		else
		{
			btnFinish.setForeground(FGColor);
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	} 
   }   

    private void setButtonTextFont(Font LFont)
    {
	try
	{
		if(isImageButton==true)
		{
			btnImageFinish.setFont(LFont);
		}
		else
		{
			btnFinish.setFont(LFont);
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	} 
    }

    private void setBackgroundColor(Color BGColor)
    {
		try
		{
			setBackground(BGColor);
			if(isImageButton==true)
			{
				btnImageFinish.setBackground(btnBGColor);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		} 
   }

    private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    } 
 public void paint(Graphics g)
{
Graphics2D g2 = (Graphics2D) g;

g2.setRenderingHint(
RenderingHints.KEY_TEXT_ANTIALIASING,
RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT);

super.paint(g);
} 

    public void setKeyManager()
    { 
     KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(
        new KeyEventDispatcher() {
            public boolean dispatchKeyEvent(KeyEvent e) 
            {
               
              if (e.getID() == KeyEvent.KEY_PRESSED) 
              {
                   if (e.isAltDown() == true || e.isMetaDown() == true || e.isControlDown()==true) 
                   {   
				armed = true;
			 }
              }            
                // This example converts all typed keys to upper case
              if (e.getID() == KeyEvent.KEY_RELEASED) 
              {
			if(armed==true)
			{
                        if(e.getComponent().equals(btnImageFinish)==true)
                        {
				    if(e.getKeyCode()==btnImageFinish.getDisplayedMnemonic())
                            {
					   getFinishAction();
				    }
                        }
				armed = false;
			}
              }
              // If the key should not be dispatched to the
              // focused component, set discardEvent to true
              boolean discardEvent = false;
              return discardEvent;
            }
        });       
    }

    private boolean armed = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private ImageButton btnImageFinish;    
    private javax.swing.JButton btnFinish;
}
