/*
 * SecureOrderInformationPanel.java
 *
 * Created on October 27, 2003, 11:32 PM
 */

package com.trinity.ea.forms.payment;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import com.trinity.ea.util.*;
import com.trinity.ea.rules.reader.EncryptedRuleReader;
import java.io.*;
import java.util.ArrayList;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;  


/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2005 Trinity Software. All rights reserved.
 */
public class SecureOrderInformationPanel extends javax.swing.JPanel {
    private int imageWidth = 94;
    /** Creates new form SecureOrderInformationPanel */
    public SecureOrderInformationPanel() {
        initComponents();
	  if(EncryptedRuleReader.get("paymentBackgroundColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentBackgroundColor").equalsIgnoreCase("")==false)
		{
			Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentBackgroundColor"));
			setBackgroundColor(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
		}
	  }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        SSLImage = new javax.swing.JLabel();
        lblSSL2 = new javax.swing.JLabel();
        SoftwareLogo = new javax.swing.JLabel();
        lblPriceHeader = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        setLayout(null);


      if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{	
			try
			{	
        			SSLImage.setIcon(new javax.swing.ImageIcon(EncryptedRuleReader.getImage(getClass().getResource(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")))));
			}
			catch(Exception e)
			{

			}	
        		add(SSLImage);
			if(EncryptedRuleReader.get("paymentFormLeftTopImageWidth")!=null)
			{
				if(EncryptedRuleReader.get("paymentFormLeftTopImageWidth").equalsIgnoreCase("")==false)
				{
					try
					{
						imageWidth = new Integer(EncryptedRuleReader.get("paymentFormLeftTopImageWidth")).intValue();
						SSLImage.setBounds(9, 8, imageWidth, 94);
					}
					catch(Exception e)
					{
						SSLImage.setBounds(9, 8, 94, 94);
					}
				}
				else
				{
					SSLImage.setBounds(9, 8, 94, 94);
				}
			}	
			else
			{		
        			SSLImage.setBounds(9, 8, 94, 94);
			}
		}
		else
		{
			imageWidth=15;
		}
	}
	else
	{
		imageWidth=15;
	}

        
        lblSSL2.setFont(new java.awt.Font("Helvetica", 0, 10));
      if(EncryptedRuleReader.getLocaleString("paymentSSLEnabledText")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentSSLEnabledText").equalsIgnoreCase("")==false)
      	{		
        		lblSSL2.setText(EncryptedRuleReader.getLocaleString("paymentSSLEnabledText"));
		}
	}
	  if(EncryptedRuleReader.get("paymentLabelHeaderTextColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentLabelHeaderTextColor").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentLabelHeaderTextColor"));
				lblSSL2.setForeground(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			lblSSL2.setForeground(new java.awt.Color(38,54,69));
			}
		}
		else
		{
			lblSSL2.setForeground(new java.awt.Color(38,54,69));
		}
	  }
	  else
	  {
		lblSSL2.setForeground(new java.awt.Color(38,54,69));
	  }
        add(lblSSL2);

      if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
        		lblSSL2.setBounds(476, 87, 100, 20);
		}
		else
		{
        		lblSSL2.setBounds(476, 67, 100, 20);
		}
	}
	else
	{
        	lblSSL2.setBounds(476, 67, 100, 20);
	}

      if(EncryptedRuleReader.getLocaleString("paymentFormRightTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormRightTopImagePath").equalsIgnoreCase("")==false)
      	{		
			try
			{
        			SoftwareLogo.setIcon(new javax.swing.ImageIcon(EncryptedRuleReader.getImage(getClass().getResource(EncryptedRuleReader.getLocaleString("paymentFormRightTopImagePath")))));
			}
			catch(Exception e)
			{

			}	
        		add(SoftwareLogo);

      if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
        		SoftwareLogo.setBounds(480, 28, 68, 74);
		}
		else
		{
        		SoftwareLogo.setBounds(480, 8, 68, 74);
		}
	}
	else
	{
        	SoftwareLogo.setBounds(480, 28, 8, 74);
	}
		}
	}


	  if(EncryptedRuleReader.get("paymentLabelHeaderTextFont")!=null)
	  {
		if(EncryptedRuleReader.get("paymentLabelHeaderTextFont").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentLabelHeaderTextFont"));
				lblPriceHeader.setFont(new java.awt.Font((String)tmpArray[0],new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			lblPriceHeader.setFont(new java.awt.Font("Helvetica", 0, 14));
			}
		}
		else
		{
        		lblPriceHeader.setFont(new java.awt.Font("Helvetica", 0, 14));
		}
	  }
	  else
	  {
        	lblPriceHeader.setFont(new java.awt.Font("Helvetica", 0, 14));
	  }

	try
	{
      	if(EncryptedRuleReader.getLocaleString("paymentPriceLabel")!=null)
      	{
        		lblPriceHeader.setText(EncryptedRuleReader.getLocaleString("paymentPriceLabel").replaceAll("product_price",getTotalPrice()));
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	  if(EncryptedRuleReader.get("paymentLabelHeaderTextColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentLabelHeaderTextColor").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentLabelHeaderTextColor"));
				lblPriceHeader.setForeground(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			lblPriceHeader.setForeground(new java.awt.Color(38,54,69));
			}
		}
		else
		{
			lblPriceHeader.setForeground(new java.awt.Color(38,54,69));
		}
	  }
	  else
	  {
		lblPriceHeader.setForeground(new java.awt.Color(38,54,69));
	  }
        add(lblPriceHeader);

      if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
        		lblPriceHeader.setBounds(imageWidth + 19, 82, 360, 20);
		}
		else
		{
        		lblPriceHeader.setBounds(imageWidth + 19, 62, 360, 20);
		}
	}
	else
	{
        	lblPriceHeader.setBounds(imageWidth + 19, 62, 360, 20);
	}

 	  if(EncryptedRuleReader.get("paymentLabelHeaderProductNameTextColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentLabelHeaderProductNameTextColor").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentLabelHeaderProductNameTextColor"));
				lblProduct.setForeground(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			lblProduct.setForeground(new java.awt.Color(38,54,69));
			}
		}
		else
		{
			lblProduct.setForeground(new java.awt.Color(38,54,69));
		}
	  }
	  else
	  {
		lblProduct.setForeground(new java.awt.Color(38,54,69));
	  }

      if(EncryptedRuleReader.get("paymentFormProductLabelImageEnabled")!=null)
      {
      	if(EncryptedRuleReader.get("paymentFormProductLabelImageEnabled").equalsIgnoreCase("true")==true)
      	{
      		if(EncryptedRuleReader.getLocaleString("paymentFormProductLabel")!=null)
      		{
				try
				{
        				lblProduct.setIcon(new javax.swing.ImageIcon(EncryptedRuleReader.getImage(getClass().getResource(EncryptedRuleReader.getLocaleString("paymentFormProductLabel")))));
				}
				catch(Exception e)
				{
					//e.printStackTrace();
				}
			}
		}
		else
		{
      		if(EncryptedRuleReader.getLocaleString("paymentFormProductLabel")!=null)
      		{
        			lblProduct.setText(EncryptedRuleReader.getLocaleString("paymentFormProductLabel"));
	  if(EncryptedRuleReader.get("paymentLabelHeaderProductNameTextFont")!=null)
	  {
		if(EncryptedRuleReader.get("paymentLabelHeaderProductNameTextFont").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentLabelHeaderProductNameTextFont"));
				lblProduct.setFont(new java.awt.Font((String)tmpArray[0],new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			lblProduct.setFont(new java.awt.Font("Helvetica", 0, 14));
			}
		}
		else
		{
        		lblProduct.setFont(new java.awt.Font("Helvetica", 0, 14));
		}
	  }
	  else
	  {
        	lblProduct.setFont(new java.awt.Font("Helvetica", 0, 14));
	  }
			}
		}
	}
	else
	{
      		if(EncryptedRuleReader.getLocaleString("paymentFormProductLabel")!=null)
      		{
        			lblProduct.setText(EncryptedRuleReader.getLocaleString("paymentFormProductLabel"));
			}
	}

        add(lblProduct);

      if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
        		lblProduct.setBounds(imageWidth + 18, 61, 360, 21);
		}
		else
		{
        		lblProduct.setBounds(imageWidth + 19, 41, 360, 21);
		}
	}
	else
	{
        	lblProduct.setBounds(imageWidth + 19, 41, 360, 21);
	}

    }//GEN-END:initComponents

    public String getTotalPrice()
    {
            // TODO: Command Line implementation
            // TODO: MIDP implementation
            // Total Price
            if(EncryptedRuleReader.get("product_price")!=null)
            {
                    return EncryptedRuleReader.get("product_price");
            }
            else
            {
                //Problem in Properties File
                return null;
            }
    }
     private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    } 
    private void setBackgroundColor(Color BGColor)
    {
        setBackground(BGColor);
        SSLImage.setBackground(BGColor);
	  lblSSL2.setBackground(BGColor);
        lblPriceHeader.setBackground(BGColor);
        lblProduct.setBackground(BGColor);
        SoftwareLogo.setBackground(BGColor);
    }

    public void paint(Graphics g)
    {
	Graphics2D g2 = (Graphics2D) g;
	g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
	super.paint(g);
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SoftwareLogo;
    private javax.swing.JLabel SSLImage;
    private javax.swing.JLabel lblPriceHeader;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JLabel lblSSL2;
    // End of variables declaration//GEN-END:variables
    
}
