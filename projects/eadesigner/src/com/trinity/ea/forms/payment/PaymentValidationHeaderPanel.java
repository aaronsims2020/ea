/*
 * PaymentValidationHeaderPanel.java
 *
 * Created on October 27, 2003, 11:32 PM
 */

package com.trinity.ea.forms.payment;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import com.trinity.ea.util.*;
import com.trinity.ea.rules.reader.EncryptedRuleReader;
import java.io.*;
import java.util.ArrayList;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;  


/**
 *
 * @author  aaronsc Trinity Software
 * Copyright Â©2003-2004 Trinity Software. All rights reserved.
 */
public class PaymentValidationHeaderPanel extends javax.swing.JPanel {
    private int imageWidth = 94;
    /** Creates new form PaymentValidationHeaderPanel */
    public PaymentValidationHeaderPanel() {
        initComponents();
	  if(EncryptedRuleReader.get("paymentBackgroundColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentBackgroundColor").equalsIgnoreCase("")==false)
		{
			Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentBackgroundColor"));
			setBackgroundColor(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
		}
		else
		{
	  		taValidationResponse.setBackground(getBackground());
		}
	  }
	  else
	  {
	  	taValidationResponse.setBackground(getBackground());
	  }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        SoftwareLogo = new javax.swing.JLabel();
        taValidationResponse = new javax.swing.JTextArea();
        setLayout(null);


      if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")!=null)
      {
      	if(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath").equalsIgnoreCase("")==false)
      	{		
        		SoftwareLogo.setIcon(new javax.swing.ImageIcon(EncryptedRuleReader.getImage(getClass().getResource(EncryptedRuleReader.getLocaleString("paymentFormLeftTopImagePath")))));
        		add(SoftwareLogo);
			if(EncryptedRuleReader.get("paymentFormLeftTopImageWidth")!=null)
			{
				if(EncryptedRuleReader.get("paymentFormLeftTopImageWidth").equalsIgnoreCase("")==false)
				{
					try
					{
						imageWidth = new Integer(EncryptedRuleReader.get("paymentFormLeftTopImageWidth")).intValue();
						SoftwareLogo.setBounds(15, 8, imageWidth, 94);
					}
					catch(Exception e)
					{
						SoftwareLogo.setBounds(15, 8, 94, 94);
					}
				}
				else
				{
					SoftwareLogo.setBounds(15, 8, 94, 94);
				}
			}	
			else
			{		
        			SoftwareLogo.setBounds(15, 8, 94, 94);
			}
		}
	}

        

	  if(EncryptedRuleReader.get("paymentSuccessLabelHeaderTextFont")!=null)
	  {
		if(EncryptedRuleReader.get("paymentSuccessLabelHeaderTextFont").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentSuccessLabelHeaderTextFont"));
				taValidationResponse.setFont(new java.awt.Font((String)tmpArray[0],new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			e.printStackTrace();
			}
		}
	  }
	try
	{
      	if(EncryptedRuleReader.getLocaleString("paymentSuccessResponsePanelHeaderDescription")!=null)
      	{
        		taValidationResponse.setText(EncryptedRuleReader.getLocaleString("paymentSuccessResponsePanelHeaderDescription"));
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	  if(EncryptedRuleReader.get("paymentSuccessLabelHeaderTextColor")!=null)
	  {
		if(EncryptedRuleReader.get("paymentSuccessLabelHeaderTextColor").equalsIgnoreCase("")==false)
		{
			try
			{
				Object[] tmpArray = getStringArraysFromString(EncryptedRuleReader.get("paymentSuccessLabelHeaderTextColor"));
				taValidationResponse.setForeground(new java.awt.Color(new Integer((String)tmpArray[0]).intValue(),new Integer((String)tmpArray[1]).intValue(),new Integer((String)tmpArray[2]).intValue()));
			}
			catch(Exception e)
			{
        			e.printStackTrace();
			}
		}
	  }
	  taValidationResponse.setBorder(null);
	  taValidationResponse.setEditable(false);
	  taValidationResponse.setSelectedTextColor(taValidationResponse.getForeground());
        taValidationResponse.setLineWrap(true);
        taValidationResponse.setWrapStyleWord(true);
        add(taValidationResponse);
	  if(imageWidth>94)
	  {
        	taValidationResponse.setBounds(imageWidth + 23, 11, 489 - (imageWidth + 23), 85);
	  }
	  else
	  {
        	taValidationResponse.setBounds(imageWidth + 23, 11, 374, 85);
	  }


    }//GEN-END:initComponents

     private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    } 
    private void setBackgroundColor(Color BGColor)
    {
        setBackground(BGColor);
        SoftwareLogo.setBackground(BGColor);
        taValidationResponse.setBackground(BGColor);
	  taValidationResponse.setSelectionColor(BGColor);
    }

    public void paint(Graphics g)
    {
	Graphics2D g2 = (Graphics2D) g;
	g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT);
	super.paint(g);
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SoftwareLogo;
    private javax.swing.JTextArea taValidationResponse;
    // End of variables declaration//GEN-END:variables
    
}
