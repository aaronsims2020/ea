/*
 * EADesignerPaymentsPanel.java
 *
 * Created on December 13, 2003, 1:17 AM
 */

package com.trinity.ea.design.payments;
import com.trinity.ea.design.common.panel.EAPanel;
import com.trinity.ea.design.common.panel.EAMasterControlPanel;
import com.trinity.ea.design.common.panel.EAPropertiesPanel;
import com.trinity.ea.design.common.panel.EAListItem;
import com.trinity.ea.design.common.panel.EAListItemContent;
import com.trinity.ea.design.common.panel.DataContentPanelFourthTier;
import com.trinity.ea.design.common.panel.TextFieldPanelFourthTier;
import com.trinity.ea.design.common.panel.TextPanePanelFourthTier;
import com.trinity.ea.design.common.panel.DataContentPanel;
import com.trinity.ea.design.common.panel.TextFieldPanel;
import com.trinity.ea.design.common.panel.TextPanePanel;
import com.trinity.ea.design.common.file.ProjectManager;
import com.trinity.ea.design.common.borderline.ContentAreaHeaderPanel;
//import com.trinity.ea.design.common.status.ProgressWindow;
import com.trinity.ea.design.payments.options.PaymentOptionsPanel;
import com.trinity.ea.design.payments.inputs.PaymentsHTMLFormInputsPanel;
import com.trinity.ea.design.payments.uistrings.PaymentsUserInterfacePanel;
import com.trinity.ea.design.payments.actions.PaymentsActionsPanel;
import com.trinity.ea.design.common.sidebar.SBTab;
import com.trinity.ea.design.common.sidebar.SBSpacer;
import com.trinity.ea.design.rules.builder.DesignerRuleBuilder;
import java.util.HashMap;
import java.util.Collections;
import java.util.Map;
import java.util.ArrayList;
import java.awt.Font;
import javax.swing.*;
import java.awt.*;


/**
 *
 * @author  aaronsc Trinity Software
 * Copyright ©2003-2004 Trinity Software. All rights reserved.
 */
public class EADesignerPaymentsPanel extends EAMasterControlPanel {
    Map sbMap = Collections.synchronizedMap(new HashMap());
    private Color backgroundColor = new java.awt.Color(100, 120, 170);
    private Color borderColor1 = new java.awt.Color(198, 226, 253);
    private Color borderColor2 = new java.awt.Color(96, 110, 145);
    private Color rowColor = new java.awt.Color(220, 225, 240);
    private Color rowBorderColor = new java.awt.Color(255, 255, 255);
    private Icon theRowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/tree/arrow.png"));
    private Icon theUIStringRowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/tree/uistring.png"));
    private Icon theActionRowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/tree/actionflag.png"));
    private int rowHeight = 25;
 
    /** Creates new form EADesignerProjectPanel */
    public EADesignerPaymentsPanel() {
   
     	//ProgressWindow progWindow = new ProgressWindow();
	//try
	//{
	//  progWindow.showStatus("Launching Payments Designer", 1);
        initComponents();
	  initSidebar();
        setSelectedMenuItem(lConfigurationMenuItem);
	//  progWindow.close();
	//}
	//catch(Exception e)
	//{
	//	e.printStackTrace();
	//	progWindow.close();
	//}    
    }

   private EAPanel TheContentPanelReference = new EAPanel();
   private void setContentPanel(EAPanel theContentPanel)
  {
    try
    {
	 getDataUpdate();
       TheContentPanelReference.setVisible(false);
       PaymentsSelectionContentPanel.remove(TheContentPanelReference);        
       TheContentPanelReference = theContentPanel;
	 PaymentsSelectionContentPanel.setPreferredSize(new java.awt.Dimension(620, 275));
       PaymentsSelectionContentPanel.add(TheContentPanelReference);     
       TheContentPanelReference.setVisible(true);

    }
    catch(Exception e)
    {
        System.out.println(e);
    }
  }     

  public void getDataUpdate()
  {
	try
	{
		// Optin Support Functionality Checkbox Enabled/Disabled
		registrationEnabledPanel.getDataUpdate();
		TheContentPanelReference.getDataUpdate();		
		ProjectManager.saveTempNow();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
  }   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        PaymentsContentTopPanel = new javax.swing.JPanel();
        PaymentsCentralContentPanel = new javax.swing.JPanel();
        PaymentsContentPanel = new javax.swing.JPanel();
        PaymentsContentPanelItem3 = new javax.swing.JPanel();
        PaymentsSettingsPanelItem2 = new javax.swing.JPanel();
        PaymentsEnabledPanel1 = new javax.swing.JPanel();
        cbPaymentsEnabled = new javax.swing.JCheckBox();
        PaymentsPanelMainContainer1 = new javax.swing.JPanel();
        btnPaymentsFormPreview = new javax.swing.JButton();
        PaymentsSettingsPanelItem8 = new javax.swing.JPanel();
        PaymentsContentPanelItem4 = new javax.swing.JPanel();
        PaymentsSettingsPanelItem1 = new javax.swing.JPanel();
        PaymentsTitlePanel = new javax.swing.JPanel();
        lEvaluationUnlockCode = new javax.swing.JLabel();
	  PaymentsMenuPanelBottomPanel = new javax.swing.JPanel();
        tfEvaluationUnlockCode = new javax.swing.JTextField();
        PaymentsTitleRightPanel = new javax.swing.JPanel();
        btnGenerateEvaluationUnlockCode = new javax.swing.JButton();
        MaxPaymentsAttemptsSettingsPanel = new javax.swing.JPanel();
        MaxPaymentsAttemptsLeftContentPanel = new javax.swing.JPanel();
        lMaxPaymentsAttempts = new javax.swing.JLabel();
        tfMaxPaymentsAttempts = new javax.swing.JTextField();
        MaxPaymentsAttemptsRightFillerPanel = new javax.swing.JPanel();
        PaymentsCentralContentLeftMarginPanel = new javax.swing.JPanel();
        PaymentsCentralContentRightMarginPanel = new javax.swing.JPanel();
        PaymentsContentBottomPanel = new javax.swing.JPanel();
        PaymentsMenuPanel = new javax.swing.JPanel();
        PaymentsMenuButtonPanel = new javax.swing.JPanel();
 	  lConfigurationMenuItem = new SBTab("Properties",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        lPaymentsCodeUIMenuItem = new SBTab("HTML Form",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        lPaymentsCodeSuccessUIMenuItem = new SBTab("User Interface",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        lPaymentsCodeFailedUIMenuItem = new SBTab("Actions",sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        PaymentsMenuButtonPanelTop = new SBTab(null,sbTabWidth, sbTabMenuTopSpaceFiller, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, null, iconTextGap, theCurrentMenuColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
        PaymentsMenuButtonPanelBottom = new SBSpacer(theCurrentMenuColor,sbTabTopBorderColor,theCurrentMenuColor,sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,sbTabIsOpaque);
        PaymentsMenuLeftSpaceFiller = new javax.swing.JPanel();
        PaymentsSelectionContentPanel = new javax.swing.JPanel();
PaymentsMenuContentPanel = new javax.swing.JPanel();

	  registrationEnabledPanel = new PaymentsEnabledControl();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

//
theEAProperties = new EAPropertiesPanel(getConfigurationEAListItems(),rowColor, rowBorderColor, backgroundColor, rowHeight);
//
theEAProperties.setMasterControlPanel(this);
//
	  registrationEnabledPanel.setBackgroundColor(backgroundColor);
	  registrationEnabledPanel.setText("Enable Payment Processing Support");
	  theEAProperties.setHeaderTextAndWidth("Payments Code Configuration", 300, "Value", 175, "", 0);
	  theEAProperties.setAddButtonText("Add Input");
	  theEAProperties.setRemoveButtonText("Remove Input");
	  theEAProperties.setEditButtonText("Edit Input");
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setConfigurationWizardButtonVisible(false);
	  theEAProperties.setPreviewButtonText("Preview");
	  theEAProperties.setConfigurationWizardButtonText("Configuration Wizard");
	  theEAProperties.setDescriptorPanelWidth(241);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }

        setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentTopPanel.setLayout(new java.awt.BorderLayout());

        PaymentsContentTopPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentTopPanel.setMaximumSize(new java.awt.Dimension(2147483647, 150));
        PaymentsContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 150));
        PaymentsCentralContentPanel.setLayout(new java.awt.BorderLayout());

        PaymentsMenuContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsMenuContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 150));
        PaymentsMenuContentPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 3000));

        PaymentsCentralContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsCentralContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 110));
        PaymentsCentralContentPanel.setPreferredSize(new java.awt.Dimension(620, 115));
        PaymentsContentPanel.setLayout(new java.awt.BorderLayout());

        PaymentsContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 115));
        PaymentsContentPanel.setMinimumSize(new java.awt.Dimension(448, 0));
        PaymentsContentPanel.setPreferredSize(new java.awt.Dimension(600, 115));
        PaymentsContentPanelItem3.setLayout(new javax.swing.BoxLayout(PaymentsContentPanelItem3, javax.swing.BoxLayout.Y_AXIS));

        PaymentsContentPanelItem3.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentPanelItem3.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(new java.awt.Color(140, 171, 240), new java.awt.Color(27, 44, 76)), "Payments Code", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12)));
        PaymentsSettingsPanelItem2.setLayout(new java.awt.BorderLayout());

        PaymentsSettingsPanelItem2.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsEnabledPanel1.setLayout(new java.awt.BorderLayout(15, 5));

        PaymentsEnabledPanel1.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsEnabledPanel1.setMaximumSize(new java.awt.Dimension(300, 2147483647));
        cbPaymentsEnabled.setBackground(new java.awt.Color(100, 120, 170));
        cbPaymentsEnabled.setFont(new java.awt.Font("Arial", 0, 12));
        cbPaymentsEnabled.setSelected(true);
        cbPaymentsEnabled.setText("Enable Payment Processing Support");
        PaymentsEnabledPanel1.add(cbPaymentsEnabled, java.awt.BorderLayout.CENTER);

        PaymentsSettingsPanelItem2.add(PaymentsEnabledPanel1, java.awt.BorderLayout.WEST);

        PaymentsPanelMainContainer1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 15, 0));

        PaymentsPanelMainContainer1.setBackground(new java.awt.Color(100, 120, 170));
        btnPaymentsFormPreview.setFont(new java.awt.Font("Arial", 0, 12));
        btnPaymentsFormPreview.setText("Preview");
        PaymentsPanelMainContainer1.add(btnPaymentsFormPreview);

        PaymentsSettingsPanelItem2.add(PaymentsPanelMainContainer1, java.awt.BorderLayout.CENTER);

        PaymentsContentPanelItem3.add(PaymentsSettingsPanelItem2);

        PaymentsSettingsPanelItem8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        PaymentsSettingsPanelItem8.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentPanelItem3.add(PaymentsSettingsPanelItem8);

	  theEAProperties.setDescriptorPanel(registrationEnabledPanel);
	  PaymentsContentPanel.add(theEAProperties);

        //PaymentsContentPanel.add(PaymentsContentPanelItem3, java.awt.BorderLayout.NORTH);

        PaymentsContentPanelItem4.setLayout(new javax.swing.BoxLayout(PaymentsContentPanelItem4, javax.swing.BoxLayout.Y_AXIS));

        PaymentsContentPanelItem4.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentPanelItem4.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(new java.awt.Color(140, 171, 240), new java.awt.Color(27, 44, 76)), "Configuration", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12)));
        PaymentsContentPanelItem4.setMaximumSize(new java.awt.Dimension(1400, 50));
        PaymentsContentPanelItem4.setMinimumSize(new java.awt.Dimension(60, 50));
        PaymentsContentPanelItem4.setPreferredSize(new java.awt.Dimension(600, 50));
        PaymentsSettingsPanelItem1.setLayout(new java.awt.BorderLayout());

        PaymentsSettingsPanelItem1.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsSettingsPanelItem1.setMaximumSize(new java.awt.Dimension(32767, 33));
        PaymentsTitlePanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsTitlePanel.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        lEvaluationUnlockCode.setBackground(new java.awt.Color(100, 120, 170));
        lEvaluationUnlockCode.setFont(new java.awt.Font("Arial", 0, 12));
        lEvaluationUnlockCode.setText("Software Evaluation Unlock Code:");
        PaymentsTitlePanel.add(lEvaluationUnlockCode);

        tfEvaluationUnlockCode.setPreferredSize(new java.awt.Dimension(220, 19));
        PaymentsTitlePanel.add(tfEvaluationUnlockCode);

        PaymentsSettingsPanelItem1.add(PaymentsTitlePanel, java.awt.BorderLayout.WEST);

        PaymentsTitleRightPanel.setLayout(new javax.swing.BoxLayout(PaymentsTitleRightPanel, javax.swing.BoxLayout.Y_AXIS));

        PaymentsTitleRightPanel.setBackground(new java.awt.Color(100, 120, 170));
        btnGenerateEvaluationUnlockCode.setText("Generate");
        PaymentsTitleRightPanel.add(btnGenerateEvaluationUnlockCode);

        PaymentsSettingsPanelItem1.add(PaymentsTitleRightPanel, java.awt.BorderLayout.CENTER);

        PaymentsContentPanelItem4.add(PaymentsSettingsPanelItem1);

        MaxPaymentsAttemptsSettingsPanel.setLayout(new java.awt.BorderLayout());

        MaxPaymentsAttemptsSettingsPanel.setBackground(new java.awt.Color(100, 120, 170));
        MaxPaymentsAttemptsSettingsPanel.setMaximumSize(new java.awt.Dimension(32767, 33));
        MaxPaymentsAttemptsLeftContentPanel.setBackground(new java.awt.Color(100, 120, 170));
        MaxPaymentsAttemptsLeftContentPanel.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        lMaxPaymentsAttempts.setBackground(new java.awt.Color(100, 120, 170));
        lMaxPaymentsAttempts.setFont(new java.awt.Font("Arial", 0, 12));
        lMaxPaymentsAttempts.setText("Maximum Payments Attempts to Lockout:");
        MaxPaymentsAttemptsLeftContentPanel.add(lMaxPaymentsAttempts);

        tfMaxPaymentsAttempts.setPreferredSize(new java.awt.Dimension(220, 19));
        MaxPaymentsAttemptsLeftContentPanel.add(tfMaxPaymentsAttempts);

        MaxPaymentsAttemptsSettingsPanel.add(MaxPaymentsAttemptsLeftContentPanel, java.awt.BorderLayout.WEST);

        MaxPaymentsAttemptsRightFillerPanel.setLayout(new javax.swing.BoxLayout(MaxPaymentsAttemptsRightFillerPanel, javax.swing.BoxLayout.Y_AXIS));

        MaxPaymentsAttemptsRightFillerPanel.setBackground(new java.awt.Color(100, 120, 170));
        MaxPaymentsAttemptsSettingsPanel.add(MaxPaymentsAttemptsRightFillerPanel, java.awt.BorderLayout.CENTER);

        PaymentsContentPanelItem4.add(MaxPaymentsAttemptsSettingsPanel);

        //PaymentsContentPanel.add(PaymentsContentPanelItem4, java.awt.BorderLayout.CENTER);

        PaymentsCentralContentPanel.add(PaymentsContentPanel, java.awt.BorderLayout.CENTER);

        PaymentsCentralContentLeftMarginPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsCentralContentPanel.add(PaymentsCentralContentLeftMarginPanel, java.awt.BorderLayout.WEST);

        PaymentsCentralContentRightMarginPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsCentralContentPanel.add(PaymentsCentralContentRightMarginPanel, java.awt.BorderLayout.EAST);

        PaymentsContentTopPanel.add(PaymentsCentralContentPanel, java.awt.BorderLayout.CENTER);
PaymentsContentTopPanel.setPreferredSize(new java.awt.Dimension(620, 2000));
        add(PaymentsContentTopPanel);

        PaymentsContentBottomPanel.setLayout(new java.awt.BorderLayout());

        PaymentsContentBottomPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsContentBottomPanel.setMinimumSize(new java.awt.Dimension(180, 275));
        PaymentsContentBottomPanel.setPreferredSize(new java.awt.Dimension(180, 275));
        PaymentsContentBottomPanel.setMaximumSize(new java.awt.Dimension(180, 275));
        PaymentsMenuPanel.setLayout(new java.awt.BorderLayout());

        PaymentsMenuPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsMenuPanel.setForeground(new java.awt.Color(255, 255, 255));
        PaymentsMenuPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 32767));
        PaymentsMenuPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 10));
        PaymentsMenuPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 10));
        PaymentsMenuButtonPanel.setLayout(new javax.swing.BoxLayout(PaymentsMenuButtonPanel, javax.swing.BoxLayout.Y_AXIS));

        PaymentsMenuButtonPanel.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsMenuButtonPanel.setForeground(new java.awt.Color(255, 255, 255));
        PaymentsMenuButtonPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        PaymentsMenuButtonPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));
        PaymentsMenuButtonPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, sbTabGroupHeight));

        PaymentsMenuPanelBottomPanel.setLayout(new java.awt.BorderLayout());

        PaymentsMenuPanelBottomPanel.setBackground(new java.awt.Color(39, 63, 109));
        PaymentsMenuPanelBottomPanel.setForeground(new java.awt.Color(255, 255, 255));
        PaymentsMenuPanelBottomPanel.setMaximumSize(new java.awt.Dimension(sbTabWidth, 100));
        PaymentsMenuPanelBottomPanel.setMinimumSize(new java.awt.Dimension(sbTabWidth, 100));
        PaymentsMenuPanelBottomPanel.setPreferredSize(new java.awt.Dimension(sbTabWidth, 100));

	  lConfigurationMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lConfigurationMenuItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lConfigurationMenuItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lConfigurationMenuItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lConfigurationMenuItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lConfigurationMenuItemMouseReleased(evt);
            }
        });

        PaymentsMenuButtonPanel.add(lConfigurationMenuItem);


        lPaymentsCodeUIMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPaymentsCodeUIMenuItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lPaymentsCodeUIMenuItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lPaymentsCodeUIMenuItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lPaymentsCodeUIMenuItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lPaymentsCodeUIMenuItemMouseReleased(evt);
            }
        });

        PaymentsMenuButtonPanel.add(lPaymentsCodeUIMenuItem);

        lPaymentsCodeSuccessUIMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPaymentsCodeSuccessUIMenuItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lPaymentsCodeSuccessUIMenuItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lPaymentsCodeSuccessUIMenuItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lPaymentsCodeSuccessUIMenuItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lPaymentsCodeSuccessUIMenuItemMouseReleased(evt);
            }
        });

        PaymentsMenuButtonPanel.add(lPaymentsCodeSuccessUIMenuItem);

        lPaymentsCodeFailedUIMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPaymentsCodeFailedUIMenuItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lPaymentsCodeFailedUIMenuItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lPaymentsCodeFailedUIMenuItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lPaymentsCodeFailedUIMenuItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lPaymentsCodeFailedUIMenuItemMouseReleased(evt);
            }
        });

        PaymentsMenuButtonPanel.add(lPaymentsCodeFailedUIMenuItem);

/**********************/
        PaymentsMenuPanelBottomPanel.add(PaymentsMenuButtonPanel, java.awt.BorderLayout.NORTH);
        PaymentsMenuPanelBottomPanel.add(PaymentsMenuButtonPanelBottom, java.awt.BorderLayout.CENTER);
        PaymentsMenuPanel.add(PaymentsMenuPanelBottomPanel, java.awt.BorderLayout.CENTER);
        PaymentsMenuPanel.add(PaymentsMenuButtonPanelTop, java.awt.BorderLayout.NORTH);
        PaymentsMenuButtonPanelBottom.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsMenuButtonPanelBottom.setForeground(new java.awt.Color(255, 255, 255));
        PaymentsMenuLeftSpaceFiller.setBackground(new java.awt.Color(100, 120, 170));
        PaymentsMenuLeftSpaceFiller.setMinimumSize(new java.awt.Dimension(1, 10));
        PaymentsMenuLeftSpaceFiller.setPreferredSize(new java.awt.Dimension(1, 10));
        PaymentsMenuPanel.add(PaymentsMenuLeftSpaceFiller, java.awt.BorderLayout.WEST);
        PaymentsContentBottomPanel.add(PaymentsMenuPanel, java.awt.BorderLayout.WEST);
/**********************/
        PaymentsSelectionContentPanel.setLayout(new java.awt.BorderLayout());

        PaymentsSelectionContentPanel.setBackground(new java.awt.Color(140, 160, 210));
        PaymentsSelectionContentPanel.setForeground(new java.awt.Color(255, 255, 255));
        PaymentsContentBottomPanel.add(PaymentsSelectionContentPanel, java.awt.BorderLayout.CENTER);

        //add(PaymentsContentBottomPanel);
// add header here
	  contentPanel = new JPanel();
        contentPanel.setLayout(new java.awt.BorderLayout());
        contentPanel.add(PaymentsMenuPanel, java.awt.BorderLayout.WEST);
        contentPanel.add(PaymentsContentBottomPanel, java.awt.BorderLayout.CENTER);
	  contentProjectPanel = new ContentAreaHeaderPanel(contentPanel, sbTabWidth, theCurrentMenuColor, sbTabRightInnerBorderColor,sbTabRightOuterBorderColor,theSelectedMenuColor);
	  add(contentProjectPanel, java.awt.BorderLayout.CENTER);
    }//GEN-END:initComponents

    private void lConfigurationMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lConfigurationMenuItemMouseReleased
	 setMouseReleasedMenuLabel(lConfigurationMenuItem);
    }//GEN-LAST:event_lConfigurationMenuItemMouseReleased

    private void lPaymentsCodeFailedUIMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeFailedUIMenuItemMouseReleased
	 setMouseReleasedMenuLabel(lPaymentsCodeFailedUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeFailedUIMenuItemMouseReleased

    private void lPaymentsCodeSuccessUIMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeSuccessUIMenuItemMouseReleased
	 setMouseReleasedMenuLabel(lPaymentsCodeSuccessUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeSuccessUIMenuItemMouseReleased

    private void lPaymentsCodeUIMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeUIMenuItemMouseReleased
	 setMouseReleasedMenuLabel(lPaymentsCodeUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeUIMenuItemMouseReleased

    private void lConfigurationMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lConfigurationMenuItemMousePressed
        setMousePressedMenuLabel(lConfigurationMenuItem);
    }//GEN-LAST:event_lConfigurationMenuItemMousePressed

    private void lPaymentsCodeFailedUIMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeFailedUIMenuItemMousePressed
        setMousePressedMenuLabel(lPaymentsCodeFailedUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeFailedUIMenuItemMousePressed

    private void lPaymentsCodeSuccessUIMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeSuccessUIMenuItemMousePressed
        setMousePressedMenuLabel(lPaymentsCodeSuccessUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeSuccessUIMenuItemMousePressed

    private void lPaymentsCodeUIMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeUIMenuItemMousePressed
        setMousePressedMenuLabel(lPaymentsCodeUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeUIMenuItemMousePressed

    private void lConfigurationMenuItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lConfigurationMenuItemMouseExited
        setMouseExitedMenuLabel(lConfigurationMenuItem);
    }//GEN-LAST:event_lConfigurationMenuItemMouseExited

    private void lPaymentsCodeFailedUIMenuItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeFailedUIMenuItemMouseExited
        setMouseExitedMenuLabel(lPaymentsCodeFailedUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeFailedUIMenuItemMouseExited

    private void lPaymentsCodeSuccessUIMenuItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeSuccessUIMenuItemMouseExited
        setMouseExitedMenuLabel(lPaymentsCodeSuccessUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeSuccessUIMenuItemMouseExited

    private void lPaymentsCodeUIMenuItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeUIMenuItemMouseExited
        setMouseExitedMenuLabel(lPaymentsCodeUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeUIMenuItemMouseExited

    private void lConfigurationMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lConfigurationMenuItemMouseEntered
        setMouseEnteredMenuLabel(lConfigurationMenuItem);
    }//GEN-LAST:event_lConfigurationMenuItemMouseEntered

    private void lPaymentsCodeFailedUIMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeFailedUIMenuItemMouseEntered
        setMouseEnteredMenuLabel(lPaymentsCodeFailedUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeFailedUIMenuItemMouseEntered

    private void lPaymentsCodeSuccessUIMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeSuccessUIMenuItemMouseEntered
        setMouseEnteredMenuLabel(lPaymentsCodeSuccessUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeSuccessUIMenuItemMouseEntered

    private void lPaymentsCodeUIMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeUIMenuItemMouseEntered
        setMouseEnteredMenuLabel(lPaymentsCodeUIMenuItem);
    }//GEN-LAST:event_lPaymentsCodeUIMenuItemMouseEntered

    private void lConfigurationMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lConfigurationMenuItemMouseClicked
 	setSelectedMenuItem(lConfigurationMenuItem);
	setConfigurationPropertyPanel();
    }//GEN-LAST:event_lConfigurationMenuItemMouseClicked

    private void lPaymentsCodeFailedUIMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeFailedUIMenuItemMouseClicked
 	setSelectedMenuItem(lPaymentsCodeFailedUIMenuItem);
	setPaymentsCodeFailedUserInterfacePropertyPanel();
    }//GEN-LAST:event_lPaymentsCodeFailedUIMenuItemMouseClicked

    private void lPaymentsCodeSuccessUIMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeSuccessUIMenuItemMouseClicked
 	setSelectedMenuItem(lPaymentsCodeSuccessUIMenuItem);
	setPaymentsCodeSuccessUserInterfacePropertyPanel();
    }//GEN-LAST:event_lPaymentsCodeSuccessUIMenuItemMouseClicked

    private void lPaymentsCodeUIMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPaymentsCodeUIMenuItemMouseClicked
 	setSelectedMenuItem(lPaymentsCodeUIMenuItem);
	setPaymentsCodeUserInterfacePropertyPanel();
    }//GEN-LAST:event_lPaymentsCodeUIMenuItemMouseClicked

 private Color theCurrentMenuColor = new Color(100, 120, 170);
 private Color theSelectedMenuColor = new Color(140,160,210);
 private Color theTextMenuColor = new Color(255, 255, 255);
 private boolean pressedSelected = false;
 private Icon arrowIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow.gif"));
 private Icon arrowSelectedIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_selected.gif"));
 private Icon arrowMouseOverIcon = new javax.swing.ImageIcon(getClass().getResource("/images/arrow_mouseover.gif"));  
 private int iconTextGap = 5;
 private int sbTabMenuTopSpaceFiller = 15;
 private int sbTabLeftMargin = 5;
 private int sbTabWidth = 120;
 private int sbTabHeight = 25;
 private int sbTabGroupHeight = 100;
 private boolean sbTabIsOpaque=true;
 private Color sbTabTopBorderColor = new Color(140, 171, 240);
 private Color sbTabBottomBorderColor = new Color(70, 82, 116);
 private Color sbTabTopSelectedBorderColor = new Color(96, 110, 145);
 private Color sbTabBottomSelectedBorderColor = new Color(198, 226, 253);
 private Color sbTabRightInnerBorderColor = new java.awt.Color(68, 76, 100);
 private Color sbTabRightOuterBorderColor = new java.awt.Color(100, 114, 149);
 private Font sbTabFont = new java.awt.Font("Arial", 1, 12);
 private SBTab TheMenuLabelReference = new SBTab(null,sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque);
 private SBTab thePressedLabelReference = null;
 private SBTab theEnteredLabelReference = null;

 private void setSelectedMenuItem(SBTab theMenuLabel)
  {
    try
    {
        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
	  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
        TheMenuLabelReference.setTheIcon(arrowIcon);
        theMenuLabel.setBackgroundColor(theSelectedMenuColor);
        theMenuLabel.setTheIcon(arrowSelectedIcon);
	  theMenuLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        TheMenuLabelReference = theMenuLabel;

                 /*       try
                        {
                            setContentPanel((EAPanel)Class.forName(getSidebarComponentID(theMenuLabel.getComponentLocalizationID())).newInstance());
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        }
*/   
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
    }
    catch(Exception e)
    {
	e.printStackTrace();
    }
  }    
 
 private void setMouseEnteredMenuLabel(SBTab theEnteredLabel)
 {
    try
    {
        theEnteredLabelReference = theEnteredLabel;
        if(theEnteredLabel.equals(TheMenuLabelReference)==false)
        {
            theEnteredLabel.setTheIcon(arrowMouseOverIcon);
            if(pressedSelected==true)
            {
                
                TheMenuLabelReference.setForegroundColor(theTextMenuColor);
            }
        }
        else
        {
            if(pressedSelected==true)
            {
                TheMenuLabelReference.setForegroundColor(theSelectedMenuColor);    
            }
        }
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }     
 }
 private void setMouseExitedMenuLabel(SBTab theExitedLabel)
 {
    try
    {
        if(theExitedLabel.equals(TheMenuLabelReference)==false)
        {
            theExitedLabel.setTheIcon(arrowIcon);   
        }
        else
        {
            theEnteredLabelReference.setForegroundColor(theTextMenuColor);           
        }
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }  
 }

  private void setMousePressedMenuLabel(SBTab thePressedLabel)
 {
    try
    {
        thePressedLabelReference = thePressedLabel;
        if(thePressedLabel.equals(TheMenuLabelReference)==false)
        {
            thePressedLabel.setBackgroundColor(theSelectedMenuColor); 
	  	thePressedLabel.setTheTopBottomBorderColors(sbTabTopSelectedBorderColor, sbTabBottomSelectedBorderColor, theSelectedMenuColor, theSelectedMenuColor);
        }
        else
        {
            pressedSelected=true; 
            thePressedLabel.setForegroundColor(theSelectedMenuColor);
        }
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }  
 }
 
  private void setMouseReleasedMenuLabel(SBTab theReleasedLabel)
 {
    try
    {
        pressedSelected = false;
        if(theEnteredLabelReference.equals(thePressedLabelReference)==false)
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==false)
            {
                thePressedLabelReference.setBackgroundColor(theCurrentMenuColor);
		    thePressedLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
            }
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }           
        }
        else
        {
            if(thePressedLabelReference.equals(TheMenuLabelReference)==true)
            {           
                thePressedLabelReference.setForegroundColor(theTextMenuColor);
            }
		else
		{
		    try
		    {
 		        TheMenuLabelReference.setBackgroundColor(theCurrentMenuColor);
			  TheMenuLabelReference.setTheTopBottomBorderColors(sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor);
 		        TheMenuLabelReference.setTheIcon(arrowIcon);
 		        thePressedLabelReference.setTheIcon(arrowSelectedIcon);
 		        TheMenuLabelReference = thePressedLabelReference;
			/*
                        try
                        {
                            setContentPanel((EAPanel)Class.forName(getSidebarComponentID(theReleasedLabel.getComponentLocalizationID())).newInstance());
                        }
                        catch(InstantiationException e)
                        {
                            e.printStackTrace();
                        }   
                        catch(IllegalAccessException e)
                        {
                            e.printStackTrace();
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            e.printStackTrace();
                        } 
			*/
  	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
 		    }
		    catch(Exception e)
		    {
        		e.printStackTrace();
		    }
		}
        }
        
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }  
 } 

    private static synchronized Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        try
        {
            while(textArrayString.indexOf(",")!=-1)
            {
                tempString = textArrayString.substring(0,textArrayString.indexOf(","));
                textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
                aryList.add(tempString);
            }
            aryList.add(textArrayString);
            aryList.trimToSize();
        }
        catch(NullPointerException e)
        {
         
        }

        return aryList.toArray();
    }  

private synchronized String getSidebarComponentID(String compRefID)
{
	try
	{
		return (String)sbMap.get(compRefID);
	}
	catch(Exception e)
	{
	e.printStackTrace();
	}
	return "";
}

private synchronized void initSidebar()
{
try
{
	Object[] sbUIStrings = getStringArraysFromString(DesignerRuleBuilder.get("sbPaymentsStrings"));
	Object[] sbUIActions = getStringArraysFromString(DesignerRuleBuilder.get("sbPaymentsActionPanels"));
//sbMap

                    for(int i = 0;i<sbUIStrings.length;i++)
                    {
                        try
				{
					sbMap.put((String)sbUIStrings[i],(String)sbUIActions[i]);
					//LeftMenuButtonPanel.add(new SBTab((String)sbUIStrings[i],sbTabWidth, sbTabHeight, sbTabLeftMargin, theCurrentMenuColor, theTextMenuColor, arrowIcon, iconTextGap, sbTabTopBorderColor, sbTabBottomBorderColor, sbTabRightInnerBorderColor, sbTabRightOuterBorderColor, sbTabIsOpaque));
				}
				catch(Exception e)
				{
					sbMap.put((String)sbUIStrings[i],"");
				} 
                    }
}
catch(Exception e)
{
	e.printStackTrace();
}
}

public void setPaymentsCodeUserInterfacePropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("User Interface Strings");
	  theEAProperties.setHeaderTextAndWidth("User Interface Strings", 300, "String Value", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getUIStringEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

public void setPaymentsCodeActionsPropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("Action Mappings");
	  theEAProperties.setHeaderTextAndWidth("Action Mappings", 300, "Class Name", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getActionsEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

public void setPaymentsCodeSuccessUserInterfacePropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("User Interface Strings");
	  theEAProperties.setHeaderTextAndWidth("User Interface Strings", 300, "String Value", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationSuccessDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getSuccessUIStringEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

public void setPaymentsCodeSuccessActionsPropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("Action Mappings");
	  theEAProperties.setHeaderTextAndWidth("Action Mappings", 300, "Class Name", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationSuccessDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getSuccessActionsEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

public void setPaymentsCodeFailedUserInterfacePropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("User Interface Strings");
	  theEAProperties.setHeaderTextAndWidth("User Interface Strings", 300, "String Value", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationFailedDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getFailedUIStringEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

public void setPaymentsCodeFailedActionsPropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("User Interface Strings");
	  theEAProperties.setHeaderTextAndWidth("User Interface Strings", 300, "String Value", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationFailedDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getFailedUIStringEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

private void setConfigurationPropertyPanel()
{
	try
	{
	  theEAProperties.setHeaderText("Payments Code Configuration");
	  theEAProperties.setHeaderTextAndWidth("Payments Code Configuration", 300, "Value", 175, "", 0);
	  theEAProperties.setAddButtonVisible(false);
	  theEAProperties.setEditButtonVisible(false);
	  theEAProperties.setRemoveButtonVisible(false);
	  try
	  {
	  	theEAProperties.setPreviewButtonAction(DesignerRuleBuilder.get("registrationDialogPreviewAction"));
	  }
	  catch(Exception ee)
	  {
		ee.printStackTrace();
	  }
	  theEAProperties.setListDefaults(getConfigurationEAListItems());
	  theEAProperties.setSelectedIndex(0);
	  EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
	  eaListItemObj.setSelectedMode();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}

private int eaPropPanel = 0;
private String[] UIStringArray = new String[6];
private EAListItem[] UIStringEAListItemArray = new EAListItem[6];
private EAListItem[] getUIStringEAListItems()
{
	  eaPropPanel = 0;
        try
        {
		int defUIStringLabelWidth = 275;
		int defUIStringDataWidth = 375;

		EAListItem[] eaItems = new EAListItem[6];
            EAListItem eai = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent titleUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		titleUIStringItem.setLabelText("Register Software Title: ");
		if(ProjectManager.get("registerSoftwareWindowTitle")!=null)
		{
			titleUIStringItem.setInputText(ProjectManager.get("registerSoftwareWindowTitle"));
			UIStringArray[0] = "registerSoftwareWindowTitle";
		}
            eai.setRowDataPanel(titleUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
//
            EAListItem eai2 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationCodeLabelUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationCodeLabelUIStringItem.setLabelText("Payments Code Label: ");
		if(ProjectManager.get("registrationCodeLabel")!=null)
		{
			registrationCodeLabelUIStringItem.setInputText(ProjectManager.get("registrationCodeLabel"));
			UIStringArray[1] = "registrationCodeLabel";
		}
            eai2.setRowDataPanel(registrationCodeLabelUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai2.setListItemIsRemovable(false);
		eai2.setValueBoxEnabled(false);
		eaItems[1] = eai2;
//
            EAListItem eai3 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationPaidHeaderLabelUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationPaidHeaderLabelUIStringItem.setLabelText("Payments Paid Header Label: ");
		if(ProjectManager.get("registrationPaidHeaderLabel")!=null)
		{
			registrationPaidHeaderLabelUIStringItem.setInputText(ProjectManager.get("registrationPaidHeaderLabel"));
			UIStringArray[2] = "registrationPaidHeaderLabel";
		}
            eai3.setRowDataPanel(registrationPaidHeaderLabelUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai3.setListItemIsRemovable(false);
		eai3.setValueBoxEnabled(false);
		eaItems[2] = eai3;
//
            EAListItem eai4 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationPaidLabelUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationPaidLabelUIStringItem.setLabelText("Payments Paid Label: ");
		if(ProjectManager.get("registrationPaidLabel")!=null)
		{
			//registrationPaidLabelUIStringItem.setInputText(ProjectManager.get("registrationPaidLabel"));
			UIStringArray[3] = "registrationPaidLabel";
			registrationPaidLabelUIStringItem.setInputTextColor(Color.blue);
			registrationPaidLabelUIStringItem.setInputText("(Select the Label item to View, or Edit the Label below.)");
			registrationPaidLabelUIStringItem.setInputTextColor(Color.blue);
		}
            eai4.setRowDataPanel(registrationPaidLabelUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai4.setListItemIsRemovable(false);
		eai4.setValueBoxEnabled(false);
		eaItems[3] = eai4;
//
            EAListItem eai5 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationUnpaidHeaderLabelUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationUnpaidHeaderLabelUIStringItem.setLabelText("Payments Unpaid Header Label: ");
		if(ProjectManager.get("registrationUnpaidHeaderLabel")!=null)
		{
			registrationUnpaidHeaderLabelUIStringItem.setInputText(ProjectManager.get("registrationUnpaidHeaderLabel"));
			UIStringArray[4] = "registrationUnpaidHeaderLabel";
		}
            eai5.setRowDataPanel(registrationUnpaidHeaderLabelUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai5.setListItemIsRemovable(false);
		eai5.setValueBoxEnabled(false);
		eaItems[4] = eai5;
//
            EAListItem eai6 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationUnpaidLabelUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationUnpaidLabelUIStringItem.setLabelText("Payments Unpaid Label: ");
		if(ProjectManager.get("registrationUnpaidLabel")!=null)
		{
			//registrationUnpaidLabelUIStringItem.setInputText(ProjectManager.get("registrationUnpaidLabel"));
			UIStringArray[5] = "registrationUnpaidLabel";
			registrationUnpaidLabelUIStringItem.setInputTextColor(Color.blue);
			registrationUnpaidLabelUIStringItem.setInputText("(Select the Label item to View, or Edit the Label below.)");
			registrationUnpaidLabelUIStringItem.setInputTextColor(Color.blue);
		}
            eai6.setRowDataPanel(registrationUnpaidLabelUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai6.setListItemIsRemovable(false);
		eai6.setValueBoxEnabled(false);
		eaItems[5] = eai6;
		UIStringEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}

private String[] strActionsArray = new String[3];
private EAListItem[] ActionsEAListItemArray = new EAListItem[3];
private EAListItem[] getActionsEAListItems()
{
	  eaPropPanel = 1;
        try
        {
		int defActionLabelWidth = 275;
		int defActionDataWidth = 375;

		EAListItem[] eaItems = new EAListItem[3];
            EAListItem eai = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent loadPaymentsCodeUIActionItem = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		loadPaymentsCodeUIActionItem.setLabelText("Load Payments Code UI Action: ");
		if(ProjectManager.get("enterPaymentsCodeAction")!=null)
		{
			loadPaymentsCodeUIActionItem.setInputText(ProjectManager.get("enterPaymentsCodeAction"));
			strActionsArray[0] = "enterPaymentsCodeAction";
		}
            eai.setRowDataPanel(loadPaymentsCodeUIActionItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
//
            EAListItem eai2 = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent registrationSuccessUIActionItem = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		registrationSuccessUIActionItem.setLabelText("Payments Success UI Action: ");
		if(ProjectManager.get("registrationSuccessUIAction")!=null)
		{
			registrationSuccessUIActionItem.setInputText(ProjectManager.get("registrationSuccessUIAction"));
			strActionsArray[1] = "registrationSuccessUIAction";
		}
            eai2.setRowDataPanel(registrationSuccessUIActionItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai2.setListItemIsRemovable(false);
		eai2.setValueBoxEnabled(false);
		eaItems[1] = eai2;
//
            EAListItem eai3 = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent registrationFailedUIActionItem = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		registrationFailedUIActionItem.setLabelText("Payments Failed UI Action: ");
		if(ProjectManager.get("registrationFailedUIAction")!=null)
		{
			registrationFailedUIActionItem.setInputText(ProjectManager.get("registrationFailedUIAction"));
			strActionsArray[2] = "registrationFailedUIAction";
		}
            eai3.setRowDataPanel(registrationFailedUIActionItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai3.setListItemIsRemovable(false);
		eai3.setValueBoxEnabled(false);
		eaItems[2] = eai3;
		ActionsEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}
////////////////////////////////////////
private String[] UISuccessStringArray = new String[4];
private EAListItem[] UISuccessEAListItemArray = new EAListItem[4];
private EAListItem[] getSuccessUIStringEAListItems()
{
	  eaPropPanel = 2;
        try
        {
		int defUIStringLabelWidth = 275;
		int defUIStringDataWidth = 375;

		EAListItem[] eaItems = new EAListItem[4];
            EAListItem eai = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent titleUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		titleUIStringItem.setLabelText("Payments Succeeded Title: ");
		if(ProjectManager.get("registrationSuccessWindowTitle")!=null)
		{
			titleUIStringItem.setInputText(ProjectManager.get("registrationSuccessWindowTitle"));
			UISuccessStringArray[0] = "registrationSuccessWindowTitle";
		}
            eai.setRowDataPanel(titleUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
//
            EAListItem eai2 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationSucceededHeaderMessageUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationSucceededHeaderMessageUIStringItem.setLabelText("Payments Succeeded Header Message Label: ");
		if(ProjectManager.get("registrationSucceededHeaderMessage")!=null)
		{
			registrationSucceededHeaderMessageUIStringItem.setInputText(ProjectManager.get("registrationSucceededHeaderMessage"));
			UISuccessStringArray[1] = "registrationSucceededHeaderMessage";
		}
            eai2.setRowDataPanel(registrationSucceededHeaderMessageUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai2.setListItemIsRemovable(false);
		eai2.setValueBoxEnabled(false);
		eaItems[1] = eai2;
//
            EAListItem eai3 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationSucceededMessageUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationSucceededMessageUIStringItem.setLabelText("Payments Succeeded Message Label: ");
		if(ProjectManager.get("registrationSucceededMessage")!=null)
		{
			registrationSucceededMessageUIStringItem.setInputText(ProjectManager.get("registrationSucceededMessage"));
			UISuccessStringArray[2] = "registrationSucceededMessage";
		}
            eai3.setRowDataPanel(registrationSucceededMessageUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai3.setListItemIsRemovable(false);
		eai3.setValueBoxEnabled(false);
		eaItems[2] = eai3;
//
            EAListItem eai4 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent defaultPaymentsSucceededActionMessageUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		defaultPaymentsSucceededActionMessageUIStringItem.setLabelText("Default Payments Succeeded Action Message: ");
		if(ProjectManager.get("registrationSucceededActionMessage")!=null)
		{
			//defaultPaymentsSucceededActionMessageUIStringItem.setInputText(ProjectManager.get("registrationSucceededActionMessage"));
			UISuccessStringArray[3] = "registrationSucceededActionMessage";
			defaultPaymentsSucceededActionMessageUIStringItem.setInputTextColor(Color.blue);
			defaultPaymentsSucceededActionMessageUIStringItem.setInputText("(Select the Label item to View, or Edit the Label below.)");
			defaultPaymentsSucceededActionMessageUIStringItem.setInputTextColor(Color.blue);
		}
            eai4.setRowDataPanel(defaultPaymentsSucceededActionMessageUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai4.setListItemIsRemovable(false);
		eai4.setValueBoxEnabled(false);
		eaItems[3] = eai4;
		UISuccessEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}

private String[] strSuccessActionsArray = new String[1];
private EAListItem[] SuccessActionsEAListItemArray = new EAListItem[1];
private EAListItem[] getSuccessActionsEAListItems()
{
	  eaPropPanel = 3;
        try
        {
		int defActionLabelWidth = 275;
		int defActionDataWidth = 375;

		EAListItem[] eaItems = new EAListItem[1];
            EAListItem eai = new EAListItem(theActionRowIcon,rowColor);
		EAListItemContent registrationSucceededActionItem = new EAListItemContent(rowColor, defActionLabelWidth, defActionDataWidth);
		registrationSucceededActionItem.setLabelText("Payments Succeeded Action: ");
		if(ProjectManager.get("registrationSucceededAction")!=null)
		{
			registrationSucceededActionItem.setInputText(ProjectManager.get("registrationSucceededAction"));
			strSuccessActionsArray[0] = "registrationSucceededAction";
		}
            eai.setRowDataPanel(registrationSucceededActionItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
		SuccessActionsEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}

private String[] UIFailedStringArray = new String[2];
private EAListItem[] UIFailedEAListItemArray = new EAListItem[2];
private EAListItem[] getFailedUIStringEAListItems()
{
	  eaPropPanel = 4;
        try
        {
		int defUIStringLabelWidth = 275;
		int defUIStringDataWidth = 375;

		EAListItem[] eaItems = new EAListItem[2];
            EAListItem eai = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent titleUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		titleUIStringItem.setLabelText("Payments Failed Title: ");
		if(ProjectManager.get("registrationFailedWindowTitle")!=null)
		{
			titleUIStringItem.setInputText(ProjectManager.get("registrationFailedWindowTitle"));
			UIFailedStringArray[0] = "registrationFailedWindowTitle";
		}
            eai.setRowDataPanel(titleUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
//
            EAListItem eai2 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent registrationFailedMessageUIStringItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		registrationFailedMessageUIStringItem.setLabelText("Payments Failed Message: ");
		if(ProjectManager.get("registrationFailedMessage")!=null)
		{
			registrationFailedMessageUIStringItem.setInputText(ProjectManager.get("registrationFailedMessage"));
			UIFailedStringArray[1] = "registrationFailedMessage";
		}
            eai2.setRowDataPanel(registrationFailedMessageUIStringItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai2.setListItemIsRemovable(false);
		eai2.setValueBoxEnabled(false);
		eaItems[1] = eai2;
		UIFailedEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}

private String[] ConfigurationStringArray = new String[2];
private EAListItem[] ConfigurationEAListItemArray = new EAListItem[2];
private EAListItem[] getConfigurationEAListItems()
{
	  eaPropPanel = 5;
        try
        {
		int defUIStringLabelWidth = 275;
		int defUIStringDataWidth = 375;

		EAListItem[] eaItems = new EAListItem[2];
            EAListItem eai = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent softwareEvaluationUnlockCodeItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		softwareEvaluationUnlockCodeItem.setLabelText("Software Evaluation Unlock Code: ");
		if(ProjectManager.get("registeredCode")!=null)
		{
			softwareEvaluationUnlockCodeItem.setInputText(ProjectManager.get("registeredCode"));
			ConfigurationStringArray[0] = "registeredCode";
		}
            eai.setRowDataPanel(softwareEvaluationUnlockCodeItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai.setListItemIsRemovable(false);
		eai.setValueBoxEnabled(false);
		eaItems[0] = eai;
//
            EAListItem eai2 = new EAListItem(theUIStringRowIcon,rowColor);
		EAListItemContent maximumPaymentsAttemptsLockoutItem = new EAListItemContent(rowColor, defUIStringLabelWidth, defUIStringDataWidth);
		maximumPaymentsAttemptsLockoutItem.setLabelText("Maximum Payments Attempts Lockout: ");
		if(ProjectManager.get("maxRegisterAttempts")!=null)
		{
			maximumPaymentsAttemptsLockoutItem.setInputText(ProjectManager.get("maxRegisterAttempts"));
			ConfigurationStringArray[1] = "maxRegisterAttempts";
		}
            eai2.setRowDataPanel(maximumPaymentsAttemptsLockoutItem);
		// Always call setListItemIsRemovable(false) after the ContentPanel is added, like in setRowDataPanel(...)
		eai2.setListItemIsRemovable(false);
		eai2.setValueBoxEnabled(false);
		eaItems[1] = eai2;
		ConfigurationEAListItemArray = eaItems;

		return eaItems;
        }
        catch(Exception e)
        {
          e.printStackTrace();   
        }
	EAListItem[] tempLIArray2 = new EAListItem[0];
	return tempLIArray2;
}
/////////////////////////////////////////

    public void setSelectedListItemEvent(int theLastSelectedIndex)
    {
		try
		{
			TheContentPanelReference.getDataUpdate();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		/*if(eaPropPanel!=0)
		{*/

	 	//Possibly where to fix display updates on the panel
		EAListItem eaListItemObj = theEAProperties.getSelectedEAListItem();
		EAListItemContent theContent = eaListItemObj.getRowDataPanel();
		if(eaPropPanel==0)
		{
			if(theLastSelectedIndex!=-1)
			{
				try
				{
					if(theLastSelectedIndex!=3 && theLastSelectedIndex!=5)
					{
						theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(UIStringArray[theLastSelectedIndex]));
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}

			//UI Strings Panel Selected
			//UIStringArray
			if(theEAProperties.getSelectedIndex()!=3 && theEAProperties.getSelectedIndex()!=5)
			{
				//Is not the Privacy Policy
				DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code User Interface String is defined below");
				tempPanel.setContentPanel(new TextFieldPanelFourthTier(UIStringEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(UIStringArray[theEAProperties.getSelectedIndex()]), UIStringArray[theEAProperties.getSelectedIndex()], true));
//				setContentPanel(tempPanel);
				PaymentsHTMLFormInputsPanel rcuip = new PaymentsHTMLFormInputsPanel();
				rcuip.setParentComponent(this);
				rcuip.setUISelected();
				rcuip.setContentPanel(tempPanel);
				setContentPanel(rcuip);
			}
			else
			{

				//Is the Privacy Policy 
				DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code User Interface String is defined below");
				tempPanel.setContentPanel(new TextPanePanelFourthTier(UIStringEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(UIStringArray[theEAProperties.getSelectedIndex()]), UIStringArray[theEAProperties.getSelectedIndex()], true));
//				setContentPanel(tempPanel);
				PaymentsHTMLFormInputsPanel rcuip = new PaymentsHTMLFormInputsPanel();
				rcuip.setParentComponent(this);
				rcuip.setUISelected();
				rcuip.setContentPanel(tempPanel);
				setContentPanel(rcuip);
			}
		}
		else if(eaPropPanel==1)
		{
			if(theLastSelectedIndex!=-1)
			{
				try
				{
					theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(strActionsArray[theLastSelectedIndex]));
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}

			//Payments Code Actions Panel Selected
			//strActionsArray
			DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code Action is defined below");
			tempPanel.setContentPanel(new TextFieldPanelFourthTier(ActionsEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(strActionsArray[theEAProperties.getSelectedIndex()]), strActionsArray[theEAProperties.getSelectedIndex()], false));
//			setContentPanel(tempPanel);
			PaymentsHTMLFormInputsPanel rcuip = new PaymentsHTMLFormInputsPanel();
			rcuip.setParentComponent(this);
			rcuip.setActionSelected();
			rcuip.setContentPanel(tempPanel);
			setContentPanel(rcuip);
		}
		else if(eaPropPanel==2)
		{
			if(theLastSelectedIndex!=-1)
			{
				if(theLastSelectedIndex!=3)
				{
					try
					{
						theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(UISuccessStringArray[theLastSelectedIndex]));
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
				}
			}
			//UI Strings Success Panel Selected
			//UISuccessStringArray
			if(theEAProperties.getSelectedIndex()!=3)
			{
				DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code Success User Interface String is defined below");
				tempPanel.setContentPanel(new TextFieldPanelFourthTier(UISuccessEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(UISuccessStringArray[theEAProperties.getSelectedIndex()]), UISuccessStringArray[theEAProperties.getSelectedIndex()], true));
				PaymentsUserInterfacePanel rcsuip = new PaymentsUserInterfacePanel();
				rcsuip.setParentComponent(this);
				rcsuip.setUISelected();
				rcsuip.setContentPanel(tempPanel);
				setContentPanel(rcsuip);
			}
			else
			{
				DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code Success User Interface String is defined below");
				tempPanel.setContentPanel(new TextPanePanelFourthTier(UISuccessEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(UISuccessStringArray[theEAProperties.getSelectedIndex()]), UISuccessStringArray[theEAProperties.getSelectedIndex()], true));
//				setContentPanel(tempPanel);
				PaymentsUserInterfacePanel rcsuip = new PaymentsUserInterfacePanel();
				rcsuip.setParentComponent(this);
				rcsuip.setUISelected();
				rcsuip.setContentPanel(tempPanel);
				setContentPanel(rcsuip);
			}
		}
		else if(eaPropPanel==3)
		{
			if(theLastSelectedIndex!=-1)
			{
				try
				{
					theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(strSuccessActionsArray[theLastSelectedIndex]));
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			//Payments Code Success Actions Panel Selected
			//strSuccessActionsArray
			DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code Success Action is defined below");
			tempPanel.setContentPanel(new TextFieldPanelFourthTier(SuccessActionsEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(strSuccessActionsArray[theEAProperties.getSelectedIndex()]), strSuccessActionsArray[theEAProperties.getSelectedIndex()], false));
//			setContentPanel(tempPanel);
			PaymentsUserInterfacePanel rcsuip = new PaymentsUserInterfacePanel();
			rcsuip.setParentComponent(this);
			rcsuip.setActionSelected();
			rcsuip.setContentPanel(tempPanel);
			setContentPanel(rcsuip);
		}
		else if(eaPropPanel==4)
		{
			if(theLastSelectedIndex!=-1)
			{
				try
				{
					theEAProperties.getSelectedEAListItem().getRowDataPanel().setInputText(ProjectManager.get(UIFailedStringArray[theLastSelectedIndex]));
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			//UI Strings Failed Panel Selected
			//UIFailedStringArray
			DataContentPanelFourthTier tempPanel = new DataContentPanelFourthTier("The Payments Code Failed User Interface String is defined below");
			tempPanel.setContentPanel(new TextFieldPanelFourthTier(UIFailedEAListItemArray[theEAProperties.getSelectedIndex()].getRowDataPanel().getLabelText(), ProjectManager.get(UIFailedStringArray[theEAProperties.getSelectedIndex()]), UIFailedStringArray[theEAProperties.getSelectedIndex()], true));
//			setContentPanel(tempPanel);
			PaymentsActionsPanel rcfuip = new PaymentsActionsPanel();
			rcfuip.setParentComponent(this);
			rcfuip.setUISelected();
			rcfuip.setContentPanel(tempPanel);
			setContentPanel(rcfuip);
		}
		else if(eaPropPanel==5)
		{
			DataContentPanel tempPanel = new DataContentPanel("The Payments Code Configuration can be set below.");
			PaymentOptionsPanel oiip = new PaymentOptionsPanel();
			oiip.setMasterStatusController(this);
			tempPanel.setContentPanel(oiip);
			setContentPanel(tempPanel);
		}
		
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MaxPaymentsAttemptsLeftContentPanel;
    private javax.swing.JPanel MaxPaymentsAttemptsRightFillerPanel;
    private javax.swing.JPanel MaxPaymentsAttemptsSettingsPanel;
    private javax.swing.JPanel PaymentsCentralContentLeftMarginPanel;
    private javax.swing.JPanel PaymentsCentralContentPanel;
    private javax.swing.JPanel PaymentsCentralContentRightMarginPanel;
    private javax.swing.JPanel PaymentsContentBottomPanel;
    private javax.swing.JPanel PaymentsContentPanel;
    private javax.swing.JPanel PaymentsContentPanelItem3;
    private javax.swing.JPanel PaymentsContentPanelItem4;
    private javax.swing.JPanel PaymentsContentTopPanel;
    private javax.swing.JPanel PaymentsEnabledPanel1;
    private javax.swing.JPanel PaymentsMenuButtonPanel;
    private SBSpacer PaymentsMenuButtonPanelBottom;
    private SBTab PaymentsMenuButtonPanelTop;
    private javax.swing.JPanel PaymentsMenuContentPanel;
    private javax.swing.JPanel PaymentsMenuLeftSpaceFiller;
    private javax.swing.JPanel PaymentsMenuPanel;
    private javax.swing.JPanel PaymentsPanelMainContainer1;
    private javax.swing.JPanel PaymentsSelectionContentPanel;
    private javax.swing.JPanel PaymentsSettingsPanelItem1;
    private javax.swing.JPanel PaymentsSettingsPanelItem2;
    private javax.swing.JPanel PaymentsSettingsPanelItem8;
    private javax.swing.JPanel PaymentsTitlePanel;
    private javax.swing.JPanel PaymentsTitleRightPanel;
    private javax.swing.JButton btnGenerateEvaluationUnlockCode;
    private javax.swing.JButton btnPaymentsFormPreview;
    private javax.swing.JCheckBox cbPaymentsEnabled;
    private javax.swing.JLabel lEvaluationUnlockCode;
    private javax.swing.JLabel lMaxPaymentsAttempts;
    private SBTab lConfigurationMenuItem;
    private SBTab lPaymentsCodeFailedUIMenuItem;
    private SBTab lPaymentsCodeSuccessUIMenuItem;
    private SBTab lPaymentsCodeUIMenuItem;
    private javax.swing.JTextField tfEvaluationUnlockCode;
    private javax.swing.JTextField tfMaxPaymentsAttempts;
    private javax.swing.JPanel PaymentsMenuPanelBottomPanel;
    private ContentAreaHeaderPanel contentProjectPanel;
    private javax.swing.JPanel contentPanel;
    private EAPropertiesPanel theEAProperties;
    private PaymentsEnabledControl registrationEnabledPanel;
    // End of variables declaration//GEN-END:variables
    
}
