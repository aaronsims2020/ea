/*
 * emailOptin.java
 *
 * Created on November 15, 2003, 3:33 PM
 */

package com.trinity.ea.forms.optin;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.util.*;
import com.trinity.ea.actions.ConfigurationErrorAction;
import com.trinity.ea.rules.reader.EncryptedRuleReader;
import com.trinity.ea.net.WebConnectionRequest;
import com.trinity.ea.parser.HTTPGETRequestParser;
import com.trinity.ea.forms.PrivacyPolicy;
/**
 *
 * @author  aaronsc Trinity Software
 * Copyright ï¿½2003 Trinity Software. All rights reserved.
 */
public class emailOptin extends javax.swing.JPanel {
    
    /** Creates new form emailOptin */
    public emailOptin() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        tfName = new javax.swing.JTextField();
        tfEMail = new javax.swing.JTextField();
        lName = new javax.swing.JLabel();
        lEMail = new javax.swing.JLabel();
        taDescription = new javax.swing.JTextArea();
        btnCancel = new javax.swing.JButton();
        btnContinue = new javax.swing.JButton();
        lPrivacyPolicy = new javax.swing.JLabel();

        setLayout(null);

        tfName.setFont(new java.awt.Font("Arial", 0, 14));
        add(tfName);
        tfName.setBounds(110, 40, 200, 20);

        tfEMail.setFont(new java.awt.Font("Arial", 0, 14));
        add(tfEMail);
        tfEMail.setBounds(110, 70, 200, 20);

        lName.setFont(new java.awt.Font("Arial", 1, 14));
        if(EncryptedRuleReader.get("optinYourNameLabel")!=null)
        {
        	lName.setText(EncryptedRuleReader.get("optinYourNameLabel"));
	  }
        add(lName);
        lName.setBounds(10, 40, 100, 20);

        lEMail.setFont(new java.awt.Font("Arial", 1, 14));
        if(EncryptedRuleReader.get("optinYourEMailLabel")!=null)
        {
        	lEMail.setText(EncryptedRuleReader.get("optinYourEMailLabel"));
	  }
        add(lEMail);
        lEMail.setBounds(10, 70, 100, 20);

        taDescription.setBackground(new java.awt.Color(204, 204, 204));
        taDescription.setEditable(false);
        taDescription.setFont(new java.awt.Font("Arial", 0, 14));
        taDescription.setLineWrap(true);
        if(EncryptedRuleReader.get("optinDescription")!=null)
        {
        	taDescription.setText(EncryptedRuleReader.get("optinDescription"));
	  }
        taDescription.setWrapStyleWord(true);
        add(taDescription);
        taDescription.setBounds(10, 10, 320, 21);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        add(btnCancel);
        btnCancel.setBounds(110, 100, 90, 26);

        btnContinue.setText("Continue >>");
        btnContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinueActionPerformed(evt);
            }
        });

        add(btnContinue);
        btnContinue.setBounds(210, 100, 102, 26);
        if(EncryptedRuleReader.get("optinPrivacyPolicyEnabled")!=null)
        {
        if(EncryptedRuleReader.get("optinPrivacyPolicyEnabled").equalsIgnoreCase("true")==true)
        {
        lPrivacyPolicy.setBackground(new java.awt.Color(255, 255, 255));
        lPrivacyPolicy.setFont(new java.awt.Font("Arial", 0, 12));
        lPrivacyPolicy.setForeground(new java.awt.Color(0, 0, 153));
        lPrivacyPolicy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        if(EncryptedRuleReader.get("optinPrivacyPolicyLabel")!=null)
        {
        	lPrivacyPolicy.setText(EncryptedRuleReader.get("optinPrivacyPolicyLabel"));
	  }
        lPrivacyPolicy.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lPrivacyPolicy.setMaximumSize(new java.awt.Dimension(299, 100));
        lPrivacyPolicy.setMinimumSize(new java.awt.Dimension(299, 100));
        lPrivacyPolicy.setPreferredSize(new java.awt.Dimension(299, 100));
        lPrivacyPolicy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPrivacyPolicyMouseClicked(evt);
            }
        });

        add(lPrivacyPolicy);
	
        lPrivacyPolicy.setBounds(0, 110, 100, 20);
	  }
	  else
	  {
		lPrivacyPolicy.setVisible(false);
	  }
	  }

    }//GEN-END:initComponents

    private void lPrivacyPolicyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPrivacyPolicyMouseClicked
                if(EncryptedRuleReader.get("privacyPolicyAction")!=null)
                {
                    try
                    {
                        //dispose();
                        Class.forName(EncryptedRuleReader.get("privacyPolicyAction")).newInstance();
                    }
                    catch(InstantiationException e)
                    {
                        System.out.println(e);
                    }   
                    catch(IllegalAccessException e)
                    {
                        System.out.println(e);
                    }                      
                    catch(ClassNotFoundException e)
                    {
                        System.out.println(e);
                    }       
                }
                else
                {
                    new ConfigurationErrorAction();
                }
    }//GEN-LAST:event_lPrivacyPolicyMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
                // TODO: Command Line implementation
                // TODO: MIDP implementation
                // Trial Expired
                //System.out.println("Attempting to read property expired action. ");
                if(EncryptedRuleReader.get("optinCancelAction")!=null)
                {
                    try
                    {
                       
                        JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                        theDialog.setVisible(false); 
                        theDialog.dispose();
                        Class.forName(EncryptedRuleReader.get("optinCancelAction")).newInstance();
                    }
                    catch(InstantiationException e)
                    {
                        System.out.println(e);
                    }   
                    catch(IllegalAccessException e)
                    {
                        System.out.println(e);
                    }                      
                    catch(ClassNotFoundException e)
                    {
                        System.out.println(e);
                    }       
                }
                else
                {
                    new ConfigurationErrorAction();
                }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinueActionPerformed
        if(validateData()==true)
        {
            // EMail Validation Code
            String emailAddress = null;
            String nameID = null;
            try
            {
                nameID=getUserName();
            }
            catch(NullPointerException e)
            {
            }
            try
            {
                emailAddress = getEMailAddress();
            }
            catch(NullPointerException e)
            {
            }
            String optinFormRequestMethod = null;
            if(EncryptedRuleReader.get("optinFormRequestMethod") != null)
            {
                optinFormRequestMethod = EncryptedRuleReader.get("optinFormRequestMethod");
            }
            /* Handle HTTP Requests now */
            if(optinFormRequestMethod.equalsIgnoreCase("GET")==true)
            {
                //System.out.println("The get request: " + getHTTPRequest());
                try
                {
                    URL theURL1 = new URL(getHTTPRequest());
                    WebConnectionRequest wcr = new WebConnectionRequest();
                    Map responseDataMap = wcr.doWebGetRequest(theURL1);
                    //System.out.println("Response Data Map: " + responseDataMap);
                    String inputNameFullName = "";
                    String inputNameEMail = "";
                    if(EncryptedRuleReader.get("optinInputFullName")!=null)
                    {        
                        inputNameFullName=EncryptedRuleReader.get("optinInputFullName");
                    }
                    if(EncryptedRuleReader.get("optinInputEMailAddress")!=null)
                    {       
                        inputNameEMail=EncryptedRuleReader.get("optinInputEMailAddress");
                    }
                    EncryptedRuleReader.optin(inputNameFullName, inputNameEMail);                 
                    Map refreshResponseDataMap;
                    //System.out.println("MAP DATA: " + responseDataMap);
                       //System.out.println("supportMetaRefreshEnabled=" + EncryptedRuleReader.get("supportMetaRefreshEnabled"));

                    if(EncryptedRuleReader.get("supportMetaRefreshEnabled") != null)
                    {
                        //System.out.println("supportMetaRefreshEnabled=" + EncryptedRuleReader.get("supportMetaRefreshEnabled"));
                        /* if the GET Request return HTML returns a Meta Refresh tag follow through with Refresh timeout, and connection. */
                        if(Boolean.valueOf(EncryptedRuleReader.get("supportMetaRefreshEnabled")).booleanValue()==true)
                        {
                            if(responseDataMap.get("refreshenabled")!=null)
                            {
                                if(((String)responseDataMap.get("refreshenabled")).equalsIgnoreCase("true")==true)
                                {
                                    /* Wait the elapsed time before refresh follow through */
                                    if(responseDataMap.get("refreshwait")!=null)
                                    {

                                    }
                                     /* load the following URL*/
                                    if(responseDataMap.get("refreshurl")!=null)
                                    {          
                                        refreshResponseDataMap = wcr.doWebGetRequest(new URL(((String)responseDataMap.get("refreshurl"))));
                                        //System.out.println("Refresh Response Map: \r\n" + refreshResponseDataMap);
                                        HTTPGETRequestParser grp = new HTTPGETRequestParser((String)responseDataMap.get("refreshurl"));
                                        Map valueMap = grp.getRequestMap();
                                        //System.out.println("Parsed Response Value Map: \r\n" + valueMap);  
                                        if(valueMap.get(EncryptedRuleReader.get("respInputStatus"))!=null)
                                        {   //1 = Success
                                            if(((String)valueMap.get(EncryptedRuleReader.get("respInputStatus"))).equalsIgnoreCase("1")==true)
                                            {
                                               JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                                                theDialog.dispose();
                                                //new dlgCustomerBillingResponsePanelSuccess(valueMap,new javax.swing.JFrame(), true).show(); 

                                                //TODO: Create a method in object and pass in Map data then fill in labels.
                                            }//0 = Failure
                                            else if(((String)valueMap.get(EncryptedRuleReader.get("respInputStatus"))).equalsIgnoreCase("0")==true)
                                            {
                                                //Count the Failure Attempts for Lockdown on max attempts exceeded.
                                                EncryptedRuleReader.attemptPayment();
                                                JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                                                theDialog.dispose();
                                                //new dlgCustomerBillingResponsePanelFailure(valueMap,new javax.swing.JFrame(), true).show();


                                               //TODO: Create a method in object and pass in Map data then fill in labels.
                                            }                                       
                                        }
                                    }
                                }
                            }
                        }
                    } 
                    /* add second call to http connection based on return data.. */ 

                }
                catch(NullPointerException eeeee)
                {
                    System.out.println(eeeee);
                    //eeeee.printStackTrace();
                    //skip this, becuase it is currently thrown by the ResponseMap Objects when not connected to the internet, or server. Fix the logic and error handling later on. 
                }
                catch(MalformedURLException e){
                    System.out.println(e);
                    //e.printStackTrace();
                }
            }
            else if(optinFormRequestMethod.equalsIgnoreCase("POST")==true)
            {
                //System.out.println(getPOSTRequest());
                //System.out.println("The get request: " + getHTTPRequest());
                try
                {
                    String strTheURLString = null;
                    if(EncryptedRuleReader.get("optinFormActionURL")!=null)
                    {
                        strTheURLString=EncryptedRuleReader.get("optinFormActionURL");
                    }               
                    URL theURL1 = new URL(strTheURLString);
                    WebConnectionRequest wcr = new WebConnectionRequest();
                    Map responseDataMap = wcr.doWebPostRequest(theURL1,getHTTPRequest());
                     
                    String inputNameFullName = "";
                    String inputNameEMail = "";
                    if(EncryptedRuleReader.get("optinInputFullName")!=null)
                    {        
                        inputNameFullName=EncryptedRuleReader.get("optinInputFullName");
                    }
                    if(EncryptedRuleReader.get("optinInputEMailAddress")!=null)
                    {       
                        inputNameEMail=EncryptedRuleReader.get("optinInputEMailAddress");
                    }
                    EncryptedRuleReader.optin(inputNameFullName, inputNameEMail); 
                    Map refreshResponseDataMap;
                    //System.out.println("MAP DATA: " + responseDataMap);
                       //System.out.println("supportMetaRefreshEnabled=" + EncryptedRuleReader.get("supportMetaRefreshEnabled"));

                    if(EncryptedRuleReader.get("supportMetaRefreshEnabled") != null)
                    {
                        //System.out.println("supportMetaRefreshEnabled=" + EncryptedRuleReader.get("supportMetaRefreshEnabled"));
                        /* if the GET Request return HTML returns a Meta Refresh tag follow through with Refresh timeout, and connection. */
                        if(Boolean.valueOf(EncryptedRuleReader.get("supportMetaRefreshEnabled")).booleanValue()==true)
                        {
                            if(responseDataMap.get("refreshenabled")!=null)
                            {
                                if(((String)responseDataMap.get("refreshenabled")).equalsIgnoreCase("true")==true)
                                {
                                    /* Wait the elapsed time before refresh follow through */
                                    if(responseDataMap.get("refreshwait")!=null)
                                    {

                                    }
                                     /* load the following URL*/
                                    if(responseDataMap.get("refreshurl")!=null)
                                    {          
                                        refreshResponseDataMap = wcr.doWebGetRequest(new URL(((String)responseDataMap.get("refreshurl"))));
                                        //System.out.println("Refresh Response Map: \r\n" + refreshResponseDataMap);
                                        HTTPGETRequestParser grp = new HTTPGETRequestParser((String)responseDataMap.get("refreshurl"));
                                        Map valueMap = grp.getRequestMap();
                                        //System.out.println("Parsed Response Value Map: \r\n" + valueMap);  
                                        if(valueMap.get(EncryptedRuleReader.get("respInputStatus"))!=null)
                                        {   //1 = Success
                                            if(((String)valueMap.get(EncryptedRuleReader.get("respInputStatus"))).equalsIgnoreCase("1")==true)
                                            {
                                               JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                                                theDialog.dispose();
                                                //new dlgCustomerBillingResponsePanelSuccess(valueMap,new javax.swing.JFrame(), true).show(); 

                                                //TODO: Create a method in object and pass in Map data then fill in labels.
                                            }//0 = Failure
                                            else if(((String)valueMap.get(EncryptedRuleReader.get("respInputStatus"))).equalsIgnoreCase("0")==true)
                                            {
                                                //Count the Failure Attempts for Lockdown on max attempts exceeded.
                                                EncryptedRuleReader.attemptPayment();
                                                JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                                                theDialog.dispose();
                                                //new dlgCustomerBillingResponsePanelFailure(valueMap,new javax.swing.JFrame(), true).show();


                                               //TODO: Create a method in object and pass in Map data then fill in labels.
                                            }                                       
                                        }
                                    }
                                }
                            }
                        }
                    } 
                    /* add second call to http connection based on return data.. */ 

                }
                catch(NullPointerException eeeee)
                {
                    System.out.println(eeeee);
                    //eeeee.printStackTrace();
                    //skip this, becuase it is currently thrown by the ResponseMap Objects when not connected to the internet, or server. Fix the logic and error handling later on. 
                }
                catch(MalformedURLException e){
                    System.out.println(e);
                    //e.printStackTrace();
                }
    /****************************************************************************************/


                   // TODO: Command Line implementation
                    // TODO: MIDP implementation
                    // Trial Expired
                    //System.out.println("Attempting to read property expired action. ");
                    if(EncryptedRuleReader.get("optinContinueAction")!=null)
                    {
                        try
                        {


                            JDialog theDialog=(JDialog)this.getTopLevelAncestor();
                            theDialog.setVisible(false); 
                            theDialog.dispose();
                            Class.forName(EncryptedRuleReader.get("optinContinueAction")).newInstance();
                        }
                        catch(InstantiationException e)
                        {
                            System.out.println(e);
                        }   
                        catch(IllegalAccessException e)
                        {
                            System.out.println(e);
                        }                      
                        catch(ClassNotFoundException e)
                        {
                            System.out.println(e);
                        }       
                    }
                    else
                    {
                        //Problem in Properties File
                    }
        }
        }
    }//GEN-LAST:event_btnContinueActionPerformed
    /** Set the EMail Address TextField EMail Address text */
    public void setEMailAddress(String strEMailAddress)
    {
        tfEMail.setText(strEMailAddress);
    }
    /** Return the EMail Address TextField EMail Address text */    
    public String getEMailAddress()
    {
         return tfEMail.getText();
    }
    /** Set the EMail Address TextField EMail Address text */    
    public void setUserName(String strName)
    {
        tfName.setText(strName);
    }
    public String getUserName()
    {
         return tfName.getText();
    }    
    
    /** returns the HTTP Request */
    public String getHTTPRequest()
    {
        String theRequestType = null;
        String formActionURL = null;
        String inputNameFullName = null;
        String inputNameEMail = null;
        String inputNames = null;
        String inputValues = null;        
        String theHTTPRequest = null;
        
        if(EncryptedRuleReader.get("optinFormActionURL")!=null)
        {
            formActionURL=EncryptedRuleReader.get("optinFormActionURL");
        }
        if(EncryptedRuleReader.get("optinInputFullName")!=null)
        {        
            inputNameFullName=EncryptedRuleReader.get("optinInputFullName");
        }
        if(EncryptedRuleReader.get("optinInputEMailAddress")!=null)
        {       
            inputNameEMail=EncryptedRuleReader.get("optinInputEMailAddress");
        }
        EncryptedRuleReader.optin(inputNameFullName, inputNameEMail);  
        if(EncryptedRuleReader.get("optinFormRequestMethod")!=null)
        {        
            theRequestType=EncryptedRuleReader.get("optinFormRequestMethod");
            
        }
        if(EncryptedRuleReader.get("optinInputHiddenNames")!=null)
        {       
            inputNames=EncryptedRuleReader.get("optinInputHiddenNames");
            if(EncryptedRuleReader.get("optinInputHiddenValues")!=null)
            {        
                inputValues=EncryptedRuleReader.get("optinInputHiddenValues");
            } 
         }        
        try
        {
            Object[] objArrayNames = getStringArray(inputNames);
            Object[] objArrayValues = getStringArray(inputValues);
		try
		{
			Object[] tmpArrayValues = new Object[objArrayValues.length];
			for(int i = 0;i<tmpArrayValues.length;i++)
			{
				 tmpArrayValues[i] = getCommaSeparatedStringValues((String)objArrayValues[i]);
			}
			objArrayValues = tmpArrayValues;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

            StringBuffer sb = new StringBuffer();
            sb.append(inputNameFullName + "=" + URLEncoder.encode(getUserName()) + "&" + inputNameEMail + "=" + URLEncoder.encode(getEMailAddress()));
            if(objArrayNames.length>=1)
            {
                for(int i=0;i<objArrayNames.length;i++)
                {
                    sb.append("&" + (String)objArrayNames[i] + "=" + URLEncoder.encode((String)objArrayValues[i]));
                }
            }
            theHTTPRequest = sb.toString();            
        }
        catch(Exception e)
        {
            return null;
        }
        if(theRequestType.equalsIgnoreCase("POST")==true)
        {
            return theHTTPRequest;
        }
        else if(theRequestType.equalsIgnoreCase("GET")==true)
        {
            return formActionURL + "?" + theHTTPRequest;
        }
        return theHTTPRequest;
    }

    private Object[] getStringArray(String theString)
    {
        ArrayList al = new ArrayList();
        String parseString = theString;
        if(parseString.indexOf(",") !=-1)
        {
            while(parseString.indexOf(",") !=-1)
            {
                al.add(parseString.substring(0,parseString.indexOf(",")));
                parseString = parseString.substring(parseString.indexOf(",") + 1);
            }
            al.add(parseString);
            al.trimToSize();
            //Parse key/pair values
            return al.toArray();
        }  
        al.add(parseString);
        al.trimToSize();
        //Parse key/pair values
        return al.toArray();        
    }

    private String getCommaSeparatedStringValues(String strToUpdate)
    {
	 return strToUpdate.replaceAll(":::",",");
    }
    
    public boolean validateData()
    {
         // EMail Validation Code
        String emailAddress = null;
        String nameID = null;
        try
        {
            nameID=getUserName();
            if(nameID.equals("")==true)
            {
                JOptionPane.showMessageDialog(null,"Please Enter Your Name.");
                tfName.grabFocus();
                return false;                
            }
        }
        catch(NullPointerException e)
        {
            JOptionPane.showMessageDialog(null,"Please Enter Your Name.");
            tfName.grabFocus();
            return false;            
        }
        try
        {
            emailAddress = getEMailAddress();
            if(emailAddress.indexOf("@") == -1)
            {
                System.out.println("@ missing, EMail address is: " + emailAddress);
                JOptionPane.showMessageDialog(null,"Please Enter a Valid Email Address.");
                tfEMail.grabFocus();
                return false;               
            }
            else if(emailAddress.indexOf(".") == -1)
            {
                 System.out.println(". missing");               
                JOptionPane.showMessageDialog(null,"Please Enter a Valid Email Address.");
                tfEMail.grabFocus();
                return false;               
            }
        }
        catch(NullPointerException e)
        {
            System.out.println("Exception thrown.");
            JOptionPane.showMessageDialog(null,"Please Enter Your Email Address.");
            tfEMail.grabFocus();
            return false;           
        }
        String optinFormRequestMethod = null;
        if(EncryptedRuleReader.get("optinFormRequestMethod") != null)
        {
            optinFormRequestMethod = EncryptedRuleReader.get("optinFormRequestMethod");
        }
        else
        {
               //Problem in Properties File
               new ConfigurationErrorAction();
               return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnContinue;
    private javax.swing.JLabel lEMail;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lPrivacyPolicy;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfEMail;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
    
}
